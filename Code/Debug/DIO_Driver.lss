
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00006554  000065e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800190  00800190  00006718  2**0
                  ALLOC
  3 .stab         00006bd0  00000000  00000000  00006718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000288a  00000000  00000000  0000d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000fb72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000fec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00011ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00013034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00014038  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00014496  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__vector_1>
       8:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__vector_2>
       c:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_10>
      2c:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 30 	call	0x6166	; 0x6166 <main>
      8a:	0c 94 a8 32 	jmp	0x6550	; 0x6550 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 32 	jmp	0x64e2	; 0x64e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 32 	jmp	0x651a	; 0x651a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 32 	jmp	0x64e2	; 0x64e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 32 	jmp	0x651a	; 0x651a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 99 32 	jmp	0x6532	; 0x6532 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7a 32 	jmp	0x64f4	; 0x64f4 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 96 32 	jmp	0x652c	; 0x652c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 81 32 	jmp	0x6502	; 0x6502 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 9d 32 	jmp	0x653a	; 0x653a <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ec 58       	subi	r30, 0x8C	; 140
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     cb6:	a1 e4       	ldi	r26, 0x41	; 65
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e4       	ldi	r30, 0x41	; 65
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_voidDisable>:

void WDT_voidDisable(void){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     cee:	a1 e4       	ldi	r26, 0x41	; 65
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e4       	ldi	r30, 0x41	; 65
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     cfc:	a1 e4       	ldi	r26, 0x41	; 65
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e4       	ldi	r30, 0x41	; 65
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"


void UART_Init(void){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <UART_Init+0x6>
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	
	/* This Variable To Put 1 In Bit 7 & Select Asynch Mode  */
	u8 Local_u8UCSRCValue = 0x80;
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Variable To Select Boud Rate */
	u16 Local_u16BoudRate = 103;
     d26:	87 e6       	ldi	r24, 0x67	; 103
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Select Normal Speed Mode */
	#if Speed_Mode == Normal_Speed
	CLR_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
     d2e:	ab e2       	ldi	r26, 0x2B	; 43
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e2       	ldi	r30, 0x2B	; 43
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	8c 93       	st	X, r24
	#elif Speed_Mode == Double_Speed
	SET_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
	#endif
	
	/* Disable MPCM */
	CLR_BIT(UART_u8_UCSRA_REG, UART_MPCM_PIN);
     d3c:	ab e2       	ldi	r26, 0x2B	; 43
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	eb e2       	ldi	r30, 0x2B	; 43
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
	CLR_BIT(Local_u8UCSRCValue, UART_UCSZ0);
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	
	#elif BitData_Mode == Eight_Data
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8b 7f       	andi	r24, 0xFB	; 251
     d56:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ0);
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	84 60       	ori	r24, 0x04	; 4
     d62:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	#endif
	
	/* Operation Mode (Asynch / Synch) */
	#if Operation_Mode == ASynch
	CLR_BIT(Local_u8UCSRCValue, UART_UMSEL);
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	8f 7b       	andi	r24, 0xBF	; 191
     d68:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UMSEL);
	#endif
	
	/* Select Parity Mode (None / Even / Odd) */
	#if Parity_Mode == None
	CLR_BIT(Local_u8UCSRCValue, UART_UPM0);
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	8f 7e       	andi	r24, 0xEF	; 239
     d6e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue, UART_UPM1);
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UPM1);
	#endif
	
	/*  Stop Bits Mode ( 1 / 2) */
	#if StopBits_Mode == One_Bit
	CLR_BIT(Local_u8UCSRCValue, UART_USBS);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8b 83       	std	Y+3, r24	; 0x03
	#elif StopBits_Mode == Two_Bits
	SET_BIT(Local_u8UCSRCValue, UART_USBS);
	#endif
	
	/* Update UCSRC Reg Value  */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     d7c:	e0 e4       	ldi	r30, 0x40	; 64
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	80 83       	st	Z, r24
	
	/* Boud Rate => 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BoudRate;
     d84:	e9 e2       	ldi	r30, 0x29	; 41
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BoudRate >> 8);
     d8c:	e0 e4       	ldi	r30, 0x40	; 64
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	89 2f       	mov	r24, r25
     d96:	99 27       	eor	r25, r25
     d98:	80 83       	st	Z, r24
	
	/* Enable Tx & Rx */
	SET_BIT(UART_u8_UCSRB_REG, UART_TXEN_PIN);
     d9a:	aa e2       	ldi	r26, 0x2A	; 42
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e2       	ldi	r30, 0x2A	; 42
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG, UART_RXEN_PIN);
     da8:	aa e2       	ldi	r26, 0x2A	; 42
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e2       	ldi	r30, 0x2A	; 42
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	8c 93       	st	X, r24
	
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <UART_Send1ByteData>:

void UART_Send1ByteData(u8 Copy_u8Sended1ByteData){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Pin Should be 1 (empty) to be able to write date in it */
	while(!GET_BIT(UART_u8_UCSRA_REG, UART_UDRE_PIN));
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 95       	swap	r24
     dd6:	86 95       	lsr	r24
     dd8:	87 70       	andi	r24, 0x07	; 7
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	a1 f3       	breq	.-24     	; 0xdce <UART_Send1ByteData+0xc>
	
	/* Send 1 Byte Data */
	UART_u8_UDR_REG = Copy_u8Sended1ByteData;
     de6:	ec e2       	ldi	r30, 0x2C	; 44
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	80 83       	st	Z, r24
	
}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <UART_SendString>:

void UART_SendString(u8 *Copy_u8SendedString){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <UART_SendString+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <UART_SendString+0x30>
	while(Copy_u8SendedString[i] !=  '\0'){
		UART_Send1ByteData(Copy_u8SendedString[i]);
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
		i++;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	89 83       	std	Y+1, r24	; 0x01
	
}

void UART_SendString(u8 *Copy_u8SendedString){
	u8 i = 0;
	while(Copy_u8SendedString[i] !=  '\0'){
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	39 f7       	brne	.-50     	; 0xe0a <UART_SendString+0x14>
		UART_Send1ByteData(Copy_u8SendedString[i]);
		i++;
	}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <UART_DisplayNumber>:

void UART_DisplayNumber(u32 num){
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	68 97       	sbiw	r28, 0x18	; 24
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	6d 8b       	std	Y+21, r22	; 0x15
     e62:	7e 8b       	std	Y+22, r23	; 0x16
     e64:	8f 8b       	std	Y+23, r24	; 0x17
     e66:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
     e68:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
     e6a:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	08 2f       	mov	r16, r24
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	8d 89       	ldd	r24, Y+21	; 0x15
     e74:	9e 89       	ldd	r25, Y+22	; 0x16
     e76:	af 89       	ldd	r26, Y+23	; 0x17
     e78:	b8 8d       	ldd	r27, Y+24	; 0x18
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 3b 32 	call	0x6476	; 0x6476 <__udivmodsi4>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	28 2f       	mov	r18, r24
     e90:	20 5d       	subi	r18, 0xD0	; 208
     e92:	ce 01       	movw	r24, r28
     e94:	05 96       	adiw	r24, 0x05	; 5
     e96:	fc 01       	movw	r30, r24
     e98:	e0 0f       	add	r30, r16
     e9a:	f1 1f       	adc	r31, r17
     e9c:	20 83       	st	Z, r18
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
     ea4:	8d 89       	ldd	r24, Y+21	; 0x15
     ea6:	9e 89       	ldd	r25, Y+22	; 0x16
     ea8:	af 89       	ldd	r26, Y+23	; 0x17
     eaa:	b8 8d       	ldd	r27, Y+24	; 0x18
     eac:	2a e0       	ldi	r18, 0x0A	; 10
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 3b 32 	call	0x6476	; 0x6476 <__udivmodsi4>
     ebc:	da 01       	movw	r26, r20
     ebe:	c9 01       	movw	r24, r18
     ec0:	8d 8b       	std	Y+21, r24	; 0x15
     ec2:	9e 8b       	std	Y+22, r25	; 0x16
     ec4:	af 8b       	std	Y+23, r26	; 0x17
     ec6:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
     ec8:	8d 89       	ldd	r24, Y+21	; 0x15
     eca:	9e 89       	ldd	r25, Y+22	; 0x16
     ecc:	af 89       	ldd	r26, Y+23	; 0x17
     ece:	b8 8d       	ldd	r27, Y+24	; 0x18
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	51 f6       	brne	.-108    	; 0xe6c <UART_DisplayNumber+0x24>

    if (isNegative) {
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 23       	and	r24, r24
     edc:	69 f0       	breq	.+26     	; 0xef8 <UART_DisplayNumber+0xb0>
        buffer[i++] = '-';
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	05 96       	adiw	r24, 0x05	; 5
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	8d e2       	ldi	r24, 0x2D	; 45
     ef0:	80 83       	st	Z, r24
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     ef8:	1a 82       	std	Y+2, r1	; 0x02
     efa:	3d c0       	rjmp	.+122    	; 0xf76 <UART_DisplayNumber+0x12e>
        char temp = buffer[j];
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	ce 01       	movw	r24, r28
     f04:	05 96       	adiw	r24, 0x05	; 5
     f06:	fc 01       	movw	r30, r24
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b9 01       	movw	r22, r18
     f24:	68 1b       	sub	r22, r24
     f26:	79 0b       	sbc	r23, r25
     f28:	cb 01       	movw	r24, r22
     f2a:	9c 01       	movw	r18, r24
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	30 40       	sbci	r19, 0x00	; 0
     f30:	ce 01       	movw	r24, r28
     f32:	05 96       	adiw	r24, 0x05	; 5
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	20 81       	ld	r18, Z
     f3c:	ce 01       	movw	r24, r28
     f3e:	05 96       	adiw	r24, 0x05	; 5
     f40:	fc 01       	movw	r30, r24
     f42:	e4 0f       	add	r30, r20
     f44:	f5 1f       	adc	r31, r21
     f46:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a9 01       	movw	r20, r18
     f56:	48 1b       	sub	r20, r24
     f58:	59 0b       	sbc	r21, r25
     f5a:	ca 01       	movw	r24, r20
     f5c:	9c 01       	movw	r18, r24
     f5e:	21 50       	subi	r18, 0x01	; 1
     f60:	30 40       	sbci	r19, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	05 96       	adiw	r24, 0x05	; 5
     f66:	fc 01       	movw	r30, r24
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	98 2f       	mov	r25, r24
     f7a:	96 95       	lsr	r25
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	89 17       	cp	r24, r25
     f80:	08 f4       	brcc	.+2      	; 0xf84 <UART_DisplayNumber+0x13c>
     f82:	bc cf       	rjmp	.-136    	; 0xefc <UART_DisplayNumber+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	05 96       	adiw	r24, 0x05	; 5
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	10 82       	st	Z, r1

    // Write the string to LCD
    UART_SendString(buffer);
     f96:	ce 01       	movw	r24, r28
     f98:	05 96       	adiw	r24, 0x05	; 5
     f9a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <UART_SendString>
}
     f9e:	68 96       	adiw	r28, 0x18	; 24
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <UART_displayFloat>:

void UART_displayFloat(f32 number) {
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	28 97       	sbiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	6d 83       	std	Y+5, r22	; 0x05
     fca:	7e 83       	std	Y+6, r23	; 0x06
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
     fd0:	6d 81       	ldd	r22, Y+5	; 0x05
     fd2:	7e 81       	ldd	r23, Y+6	; 0x06
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	aa 27       	eor	r26, r26
     fea:	97 fd       	sbrc	r25, 7
     fec:	a0 95       	com	r26
     fee:	ba 2f       	mov	r27, r26
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	6d 81       	ldd	r22, Y+5	; 0x05
     ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a e7       	ldi	r20, 0x7A	; 122
    1016:	54 e4       	ldi	r21, 0x44	; 68
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	84 36       	cpi	r24, 0x64	; 100
    1036:	91 05       	cpc	r25, r1
    1038:	54 f0       	brlt	.+20     	; 0x104e <UART_displayFloat+0x9a>
    	integerPart /= 10;
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	b9 01       	movw	r22, r18
    1044:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodhi4>
    1048:	cb 01       	movw	r24, r22
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    }
    UART_DisplayNumber(integerPart);
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	aa 27       	eor	r26, r26
    1054:	97 fd       	sbrc	r25, 7
    1056:	a0 95       	com	r26
    1058:	ba 2f       	mov	r27, r26
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_DisplayNumber>
    UART_Send1ByteData('.');
    1062:	8e e2       	ldi	r24, 0x2E	; 46
    1064:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
    UART_DisplayNumber(decimalPart);
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	aa 27       	eor	r26, r26
    106e:	97 fd       	sbrc	r25, 7
    1070:	a0 95       	com	r26
    1072:	ba 2f       	mov	r27, r26
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_DisplayNumber>
}
    107c:	28 96       	adiw	r28, 0x08	; 8
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <UART_u8Recieve1ByteData>:

u8 UART_u8Recieve1ByteData(u8 *Copy_Pu8RecievedByteData){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <UART_u8Recieve1ByteData+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8RecievedByteData != NULL){
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <UART_u8Recieve1ByteData+0x34>
		while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	dc f7       	brge	.-10     	; 0x10aa <UART_u8Recieve1ByteData+0x1c>
		*Copy_Pu8RecievedByteData = UART_u8_UDR_REG;
    10b4:	ec e2       	ldi	r30, 0x2C	; 44
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 83       	st	Z, r24
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <UART_u8Recieve1ByteData+0x36>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    10c2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <UART_u8RecieveString>:


u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <UART_u8RecieveString+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <UART_u8RecieveString+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
    10e4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    10ea:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8RecievedString != NULL){
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	19 f1       	breq	.+70     	; 0x113a <UART_u8RecieveString+0x68>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <UART_u8RecieveString+0x4c>
		while(i < Copy_u8StringSize){
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    10f6:	eb e2       	ldi	r30, 0x2B	; 43
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 23       	and	r24, r24
    10fe:	dc f7       	brge	.-10     	; 0x10f6 <UART_u8RecieveString+0x24>
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	dc 01       	movw	r26, r24
    110c:	a2 0f       	add	r26, r18
    110e:	b3 1f       	adc	r27, r19
    1110:	ec e2       	ldi	r30, 0x2C	; 44
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8c 93       	st	X, r24
			i++;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	89 83       	std	Y+1, r24	; 0x01
u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 i = 0;
	
	if(Copy_Pu8RecievedString != NULL){
		while(i < Copy_u8StringSize){
    111e:	99 81       	ldd	r25, Y+1	; 0x01
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	98 17       	cp	r25, r24
    1124:	40 f3       	brcs	.-48     	; 0x10f6 <UART_u8RecieveString+0x24>
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
			i++;
		}
		Copy_Pu8RecievedString[i] = '\0';
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	10 82       	st	Z, r1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <UART_u8RecieveString+0x6a>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    113a:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
    1172:	a3 e5       	ldi	r26, 0x53	; 83
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e3 e5       	ldi	r30, 0x53	; 83
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 62       	ori	r24, 0x20	; 32
    117e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 61       	ori	r24, 0x10	; 16
    118c:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8b 7f       	andi	r24, 0xFB	; 251
    11b6:	8c 93       	st	X, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
    11e2:	ae e4       	ldi	r26, 0x4E	; 78
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ee e4       	ldi	r30, 0x4E	; 78
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	88 60       	ori	r24, 0x08	; 8
    11ee:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
    11f0:	ae e4       	ldi	r26, 0x4E	; 78
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee e4       	ldi	r30, 0x4E	; 78
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 61       	ori	r24, 0x10	; 16
    11fc:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
    11fe:	af e4       	ldi	r26, 0x4F	; 79
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ef e4       	ldi	r30, 0x4F	; 79
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
    120c:	af e4       	ldi	r26, 0x4F	; 79
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e4       	ldi	r30, 0x4F	; 79
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 7b       	andi	r24, 0xBF	; 191
    1218:	8c 93       	st	X, r24

	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
    121a:	ae e4       	ldi	r26, 0x4E	; 78
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ee e4       	ldi	r30, 0x4E	; 78
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8e 7f       	andi	r24, 0xFE	; 254
    1226:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
    1228:	ae e4       	ldi	r26, 0x4E	; 78
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e4       	ldi	r30, 0x4E	; 78
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
    1236:	ae e4       	ldi	r26, 0x4E	; 78
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ee e4       	ldi	r30, 0x4E	; 78
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8b 7f       	andi	r24, 0xFB	; 251
    1242:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 39999;
    1244:	e6 e4       	ldi	r30, 0x46	; 70
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8f e3       	ldi	r24, 0x3F	; 63
    124a:	9c e9       	ldi	r25, 0x9C	; 156
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = 3499;
    1250:	ea e4       	ldi	r30, 0x4A	; 74
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8b ea       	ldi	r24, 0xAB	; 171
    1256:	9d e0       	ldi	r25, 0x0D	; 13
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <TIMERS_u8TIMER0SetCallBack+0x6>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9b 83       	std	Y+3, r25	; 0x03
    1270:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	9b 81       	ldd	r25, Y+3	; 0x03
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	90 93 91 01 	sts	0x0191, r25
    1286:	80 93 90 01 	sts	0x0190, r24
    128a:	01 c0       	rjmp	.+2      	; 0x128e <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    128c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	90 93 93 01 	sts	0x0193, r25
    12c0:	80 93 92 01 	sts	0x0192, r24
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    12e2:	ec e5       	ldi	r30, 0x5C	; 92
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	80 83       	st	Z, r24
	
}
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
    12fe:	e2 e5       	ldi	r30, 0x52	; 82
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
    131c:	ea e4       	ldi	r30, 0x4A	; 74
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMERS_voidTIMER1SetTimerValue+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
    1340:	ec e4       	ldi	r30, 0x4C	; 76
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
    135e:	ec e4       	ldi	r30, 0x4C	; 76
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1396:	80 91 94 01 	lds	r24, 0x0194
    139a:	90 91 95 01 	lds	r25, 0x0195
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	90 93 95 01 	sts	0x0195, r25
    13a4:	80 93 94 01 	sts	0x0194, r24
	if(Local_u16CounterOVF == 3907){
    13a8:	80 91 94 01 	lds	r24, 0x0194
    13ac:	90 91 95 01 	lds	r25, 0x0195
    13b0:	2f e0       	ldi	r18, 0x0F	; 15
    13b2:	83 34       	cpi	r24, 0x43	; 67
    13b4:	92 07       	cpc	r25, r18
    13b6:	99 f4       	brne	.+38     	; 0x13de <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    13b8:	e2 e5       	ldi	r30, 0x52	; 82
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 ec       	ldi	r24, 0xC0	; 192
    13be:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    13c0:	10 92 95 01 	sts	0x0195, r1
    13c4:	10 92 94 01 	sts	0x0194, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
    13c8:	80 91 90 01 	lds	r24, 0x0190
    13cc:	90 91 91 01 	lds	r25, 0x0191
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
    13d4:	e0 91 90 01 	lds	r30, 0x0190
    13d8:	f0 91 91 01 	lds	r31, 0x0191
    13dc:	09 95       	icall
		}
	}
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    142e:	80 91 96 01 	lds	r24, 0x0196
    1432:	90 91 97 01 	lds	r25, 0x0197
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	90 93 97 01 	sts	0x0197, r25
    143c:	80 93 96 01 	sts	0x0196, r24
	if(Local_u16CounterCTC == 10000){
    1440:	80 91 96 01 	lds	r24, 0x0196
    1444:	90 91 97 01 	lds	r25, 0x0197
    1448:	27 e2       	ldi	r18, 0x27	; 39
    144a:	80 31       	cpi	r24, 0x10	; 16
    144c:	92 07       	cpc	r25, r18
    144e:	79 f4       	brne	.+30     	; 0x146e <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    1450:	10 92 97 01 	sts	0x0197, r1
    1454:	10 92 96 01 	sts	0x0196, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    1458:	80 91 92 01 	lds	r24, 0x0192
    145c:	90 91 93 01 	lds	r25, 0x0193
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    1464:	e0 91 92 01 	lds	r30, 0x0192
    1468:	f0 91 93 01 	lds	r31, 0x0193
    146c:	09 95       	icall
		}
	}
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <Switch_Init+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <Switch_Init+0x8>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    14a8:	1a 82       	std	Y+2, r1	; 0x02
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	50 c0       	rjmp	.+160    	; 0x154e <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    14ae:	29 81       	ldd	r18, Y+1	; 0x01
    14b0:	3a 81       	ldd	r19, Y+2	; 0x02
    14b2:	c9 01       	movw	r24, r18
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	40 81       	ld	r20, Z
    14c8:	29 81       	ldd	r18, Y+1	; 0x01
    14ca:	3a 81       	ldd	r19, Y+2	; 0x02
    14cc:	c9 01       	movw	r24, r18
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	28 0f       	add	r18, r24
    14d4:	39 1f       	adc	r19, r25
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	fc 01       	movw	r30, r24
    14dc:	e2 0f       	add	r30, r18
    14de:	f3 1f       	adc	r31, r19
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	84 2f       	mov	r24, r20
    14e4:	69 2f       	mov	r22, r25
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    14ec:	29 81       	ldd	r18, Y+1	; 0x01
    14ee:	3a 81       	ldd	r19, Y+2	; 0x02
    14f0:	c9 01       	movw	r24, r18
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	28 0f       	add	r18, r24
    14f8:	39 1f       	adc	r19, r25
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	fc 01       	movw	r30, r24
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	50 81       	ld	r21, Z
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	c9 01       	movw	r24, r18
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	28 0f       	add	r18, r24
    1512:	39 1f       	adc	r19, r25
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	fc 01       	movw	r30, r24
    151a:	e2 0f       	add	r30, r18
    151c:	f3 1f       	adc	r31, r19
    151e:	41 81       	ldd	r20, Z+1	; 0x01
    1520:	29 81       	ldd	r18, Y+1	; 0x01
    1522:	3a 81       	ldd	r19, Y+2	; 0x02
    1524:	c9 01       	movw	r24, r18
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	28 0f       	add	r18, r24
    152c:	39 1f       	adc	r19, r25
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	fc 01       	movw	r30, r24
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	92 81       	ldd	r25, Z+2	; 0x02
    153a:	85 2f       	mov	r24, r21
    153c:	64 2f       	mov	r22, r20
    153e:	49 2f       	mov	r20, r25
    1540:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	0c f4       	brge	.+2      	; 0x1560 <Switch_Init+0xcc>
    155e:	a7 cf       	rjmp	.-178    	; 0x14ae <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Switch_GetValue+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <Switch_GetValue+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	7c 83       	std	Y+4, r23	; 0x04
    1582:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    1584:	e9 81       	ldd	r30, Y+1	; 0x01
    1586:	fa 81       	ldd	r31, Y+2	; 0x02
    1588:	80 81       	ld	r24, Z
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	69 2f       	mov	r22, r25
    1596:	a9 01       	movw	r20, r18
    1598:	0e 94 23 13 	call	0x2646	; 0x2646 <DIO_u8GetPinValue>
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <LCD_setPinDirection+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <LCD_setPinDirection+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
    15bc:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <LCD_setPinDirection+0x1c>
    15c4:	d5 c0       	rjmp	.+426    	; 0x1770 <LCD_setPinDirection+0x1c6>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <LCD_setPinDirection+0x24>
    15cc:	d1 c0       	rjmp	.+418    	; 0x1770 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 83       	std	Y+5, r19	; 0x05
    15d6:	2c 83       	std	Y+4, r18	; 0x04
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <LCD_setPinDirection+0x3a>
    15e2:	43 c0       	rjmp	.+134    	; 0x166a <LCD_setPinDirection+0xc0>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <LCD_setPinDirection+0x4e>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	71 f0       	breq	.+28     	; 0x1612 <LCD_setPinDirection+0x68>
    15f6:	bc c0       	rjmp	.+376    	; 0x1770 <LCD_setPinDirection+0x1c6>
    15f8:	2c 81       	ldd	r18, Y+4	; 0x04
    15fa:	3d 81       	ldd	r19, Y+5	; 0x05
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <LCD_setPinDirection+0x5a>
    1602:	5f c0       	rjmp	.+190    	; 0x16c2 <LCD_setPinDirection+0x118>
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <LCD_setPinDirection+0x66>
    160e:	85 c0       	rjmp	.+266    	; 0x171a <LCD_setPinDirection+0x170>
    1610:	af c0       	rjmp	.+350    	; 0x1770 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	a1 f4       	brne	.+40     	; 0x1640 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1618:	aa e3       	ldi	r26, 0x3A	; 58
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ea e3       	ldi	r30, 0x3A	; 58
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <LCD_setPinDirection+0x8c>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <LCD_setPinDirection+0x88>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	98 c0       	rjmp	.+304    	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    1640:	aa e3       	ldi	r26, 0x3A	; 58
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ea e3       	ldi	r30, 0x3A	; 58
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <LCD_setPinDirection+0xb4>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <LCD_setPinDirection+0xb0>
    1662:	80 95       	com	r24
    1664:	84 23       	and	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	83 c0       	rjmp	.+262    	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	a1 f4       	brne	.+40     	; 0x1698 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1670:	a7 e3       	ldi	r26, 0x37	; 55
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e7 e3       	ldi	r30, 0x37	; 55
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <LCD_setPinDirection+0xe4>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <LCD_setPinDirection+0xe0>
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	6c c0       	rjmp	.+216    	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    1698:	a7 e3       	ldi	r26, 0x37	; 55
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e7 e3       	ldi	r30, 0x37	; 55
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <LCD_setPinDirection+0x10c>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <LCD_setPinDirection+0x108>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	57 c0       	rjmp	.+174    	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	a1 f4       	brne	.+40     	; 0x16f0 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16c8:	a4 e3       	ldi	r26, 0x34	; 52
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <LCD_setPinDirection+0x13c>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <LCD_setPinDirection+0x138>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	40 c0       	rjmp	.+128    	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    16f0:	a4 e3       	ldi	r26, 0x34	; 52
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e4 e3       	ldi	r30, 0x34	; 52
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <LCD_setPinDirection+0x164>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <LCD_setPinDirection+0x160>
    1712:	80 95       	com	r24
    1714:	84 23       	and	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	2b c0       	rjmp	.+86     	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	a1 f4       	brne	.+40     	; 0x1748 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1720:	a1 e3       	ldi	r26, 0x31	; 49
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e1 e3       	ldi	r30, 0x31	; 49
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <LCD_setPinDirection+0x194>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <LCD_setPinDirection+0x190>
    1742:	84 2b       	or	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    1748:	a1 e3       	ldi	r26, 0x31	; 49
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e1 e3       	ldi	r30, 0x31	; 49
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <LCD_setPinDirection+0x1bc>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <LCD_setPinDirection+0x1b8>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <LCD_setPinValue+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <LCD_setPinValue+0x8>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	6a 83       	std	Y+2, r22	; 0x02
    1792:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	08 f0       	brcs	.+2      	; 0x179c <LCD_setPinValue+0x1c>
    179a:	d5 c0       	rjmp	.+426    	; 0x1946 <LCD_setPinValue+0x1c6>
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <LCD_setPinValue+0x24>
    17a2:	d1 c0       	rjmp	.+418    	; 0x1946 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3d 83       	std	Y+5, r19	; 0x05
    17ac:	2c 83       	std	Y+4, r18	; 0x04
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <LCD_setPinValue+0x3a>
    17b8:	43 c0       	rjmp	.+134    	; 0x1840 <LCD_setPinValue+0xc0>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <LCD_setPinValue+0x4e>
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	71 f0       	breq	.+28     	; 0x17e8 <LCD_setPinValue+0x68>
    17cc:	bc c0       	rjmp	.+376    	; 0x1946 <LCD_setPinValue+0x1c6>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <LCD_setPinValue+0x5a>
    17d8:	5f c0       	rjmp	.+190    	; 0x1898 <LCD_setPinValue+0x118>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <LCD_setPinValue+0x66>
    17e4:	85 c0       	rjmp	.+266    	; 0x18f0 <LCD_setPinValue+0x170>
    17e6:	af c0       	rjmp	.+350    	; 0x1946 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17ee:	ab e3       	ldi	r26, 0x3B	; 59
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <LCD_setPinValue+0x8c>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <LCD_setPinValue+0x88>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	98 c0       	rjmp	.+304    	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    1816:	ab e3       	ldi	r26, 0x3B	; 59
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	eb e3       	ldi	r30, 0x3B	; 59
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <LCD_setPinValue+0xb4>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <LCD_setPinValue+0xb0>
    1838:	80 95       	com	r24
    183a:	84 23       	and	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	83 c0       	rjmp	.+262    	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	a1 f4       	brne	.+40     	; 0x186e <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1846:	a8 e3       	ldi	r26, 0x38	; 56
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <LCD_setPinValue+0xe4>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <LCD_setPinValue+0xe0>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	6c c0       	rjmp	.+216    	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    186e:	a8 e3       	ldi	r26, 0x38	; 56
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e8 e3       	ldi	r30, 0x38	; 56
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <LCD_setPinValue+0x10c>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <LCD_setPinValue+0x108>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	57 c0       	rjmp	.+174    	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	a1 f4       	brne	.+40     	; 0x18c6 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    189e:	a5 e3       	ldi	r26, 0x35	; 53
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <LCD_setPinValue+0x13c>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <LCD_setPinValue+0x138>
    18c0:	84 2b       	or	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	40 c0       	rjmp	.+128    	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    18c6:	a5 e3       	ldi	r26, 0x35	; 53
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e5 e3       	ldi	r30, 0x35	; 53
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <LCD_setPinValue+0x164>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <LCD_setPinValue+0x160>
    18e8:	80 95       	com	r24
    18ea:	84 23       	and	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	2b c0       	rjmp	.+86     	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	a1 f4       	brne	.+40     	; 0x191e <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18f6:	a2 e3       	ldi	r26, 0x32	; 50
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <LCD_setPinValue+0x194>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <LCD_setPinValue+0x190>
    1918:	84 2b       	or	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	14 c0       	rjmp	.+40     	; 0x1946 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    191e:	a2 e3       	ldi	r26, 0x32	; 50
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <LCD_setPinValue+0x1bc>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <LCD_setPinValue+0x1b8>
    1940:	80 95       	com	r24
    1942:	84 23       	and	r24, r20
    1944:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <LCD_getPinValue+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <LCD_getPinValue+0x8>
    195e:	0f 92       	push	r0
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	8a 83       	std	Y+2, r24	; 0x02
    1966:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1968:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	88 30       	cpi	r24, 0x08	; 8
    196e:	08 f0       	brcs	.+2      	; 0x1972 <LCD_getPinValue+0x1c>
    1970:	84 c0       	rjmp	.+264    	; 0x1a7a <LCD_getPinValue+0x124>
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	84 30       	cpi	r24, 0x04	; 4
    1976:	08 f0       	brcs	.+2      	; 0x197a <LCD_getPinValue+0x24>
    1978:	80 c0       	rjmp	.+256    	; 0x1a7a <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3d 83       	std	Y+5, r19	; 0x05
    1982:	2c 83       	std	Y+4, r18	; 0x04
    1984:	4c 81       	ldd	r20, Y+4	; 0x04
    1986:	5d 81       	ldd	r21, Y+5	; 0x05
    1988:	41 30       	cpi	r20, 0x01	; 1
    198a:	51 05       	cpc	r21, r1
    198c:	79 f1       	breq	.+94     	; 0x19ec <LCD_getPinValue+0x96>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	91 05       	cpc	r25, r1
    1996:	34 f4       	brge	.+12     	; 0x19a4 <LCD_getPinValue+0x4e>
    1998:	2c 81       	ldd	r18, Y+4	; 0x04
    199a:	3d 81       	ldd	r19, Y+5	; 0x05
    199c:	21 15       	cp	r18, r1
    199e:	31 05       	cpc	r19, r1
    19a0:	69 f0       	breq	.+26     	; 0x19bc <LCD_getPinValue+0x66>
    19a2:	6b c0       	rjmp	.+214    	; 0x1a7a <LCD_getPinValue+0x124>
    19a4:	4c 81       	ldd	r20, Y+4	; 0x04
    19a6:	5d 81       	ldd	r21, Y+5	; 0x05
    19a8:	42 30       	cpi	r20, 0x02	; 2
    19aa:	51 05       	cpc	r21, r1
    19ac:	b9 f1       	breq	.+110    	; 0x1a1c <LCD_getPinValue+0xc6>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <LCD_getPinValue+0x64>
    19b8:	49 c0       	rjmp	.+146    	; 0x1a4c <LCD_getPinValue+0xf6>
    19ba:	5f c0       	rjmp	.+190    	; 0x1a7a <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19bc:	e9 e3       	ldi	r30, 0x39	; 57
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <LCD_getPinValue+0x7e>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <LCD_getPinValue+0x7a>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	49 c0       	rjmp	.+146    	; 0x1a7a <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e8:	19 82       	std	Y+1, r1	; 0x01
    19ea:	47 c0       	rjmp	.+142    	; 0x1a7a <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19ec:	e6 e3       	ldi	r30, 0x36	; 54
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <LCD_getPinValue+0xae>
    1a00:	55 95       	asr	r21
    1a02:	47 95       	ror	r20
    1a04:	8a 95       	dec	r24
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <LCD_getPinValue+0xaa>
    1a08:	ca 01       	movw	r24, r20
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	88 23       	and	r24, r24
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	31 c0       	rjmp	.+98     	; 0x1a7a <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a18:	19 82       	std	Y+1, r1	; 0x01
    1a1a:	2f c0       	rjmp	.+94     	; 0x1a7a <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a1c:	e3 e3       	ldi	r30, 0x33	; 51
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <LCD_getPinValue+0xde>
    1a30:	55 95       	asr	r21
    1a32:	47 95       	ror	r20
    1a34:	8a 95       	dec	r24
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <LCD_getPinValue+0xda>
    1a38:	ca 01       	movw	r24, r20
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	88 23       	and	r24, r24
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	19 c0       	rjmp	.+50     	; 0x1a7a <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	17 c0       	rjmp	.+46     	; 0x1a7a <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a4c:	e0 e3       	ldi	r30, 0x30	; 48
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <LCD_getPinValue+0x10e>
    1a60:	55 95       	asr	r21
    1a62:	47 95       	ror	r20
    1a64:	8a 95       	dec	r24
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <LCD_getPinValue+0x10a>
    1a68:	ca 01       	movw	r24, r20
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	88 23       	and	r24, r24
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a78:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <LCD_setPortDirection+0x6>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <LCD_setPortDirection+0x8>
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	90 f5       	brcc	.+100    	; 0x1b06 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3c 83       	std	Y+4, r19	; 0x04
    1aaa:	2b 83       	std	Y+3, r18	; 0x03
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	d1 f0       	breq	.+52     	; 0x1aea <LCD_setPortDirection+0x5e>
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_setPortDirection+0x3e>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <LCD_setPortDirection+0x54>
    1ac8:	1e c0       	rjmp	.+60     	; 0x1b06 <LCD_setPortDirection+0x7a>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	81 f0       	breq	.+32     	; 0x1af4 <LCD_setPortDirection+0x68>
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <LCD_setPortDirection+0x72>
    1ade:	13 c0       	rjmp	.+38     	; 0x1b06 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ae0:	ea e3       	ldi	r30, 0x3A	; 58
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	80 83       	st	Z, r24
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1aea:	e7 e3       	ldi	r30, 0x37	; 55
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1af4:	e4 e3       	ldi	r30, 0x34	; 52
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	80 83       	st	Z, r24
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <LCD_setPortValue+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <LCD_setPortValue+0x8>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	90 f5       	brcc	.+100    	; 0x1b8e <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	3c 83       	std	Y+4, r19	; 0x04
    1b32:	2b 83       	std	Y+3, r18	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	d1 f0       	breq	.+52     	; 0x1b72 <LCD_setPortValue+0x5e>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_setPortValue+0x3e>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	61 f0       	breq	.+24     	; 0x1b68 <LCD_setPortValue+0x54>
    1b50:	1e c0       	rjmp	.+60     	; 0x1b8e <LCD_setPortValue+0x7a>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	3c 81       	ldd	r19, Y+4	; 0x04
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	81 f0       	breq	.+32     	; 0x1b7c <LCD_setPortValue+0x68>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	83 30       	cpi	r24, 0x03	; 3
    1b62:	91 05       	cpc	r25, r1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <LCD_setPortValue+0x72>
    1b66:	13 c0       	rjmp	.+38     	; 0x1b8e <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b68:	eb e3       	ldi	r30, 0x3B	; 59
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
    1b70:	0e c0       	rjmp	.+28     	; 0x1b8e <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b72:	e8 e3       	ldi	r30, 0x38	; 56
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <LCD_getPortValue+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <LCD_getPortValue+0x8>
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1baa:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	90 f5       	brcc	.+100    	; 0x1c16 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3c 83       	std	Y+4, r19	; 0x04
    1bba:	2b 83       	std	Y+3, r18	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	d1 f0       	breq	.+52     	; 0x1bfa <LCD_getPortValue+0x5e>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_getPortValue+0x3e>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <LCD_getPortValue+0x54>
    1bd8:	1e c0       	rjmp	.+60     	; 0x1c16 <LCD_getPortValue+0x7a>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <LCD_getPortValue+0x68>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <LCD_getPortValue+0x72>
    1bee:	13 c0       	rjmp	.+38     	; 0x1c16 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bf0:	e9 e3       	ldi	r30, 0x39	; 57
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bfa:	e6 e3       	ldi	r30, 0x36	; 54
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c04:	e3 e3       	ldi	r30, 0x33	; 51
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c0e:	e0 e3       	ldi	r30, 0x30	; 48
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1c2e:	af e5       	ldi	r26, 0x5F	; 95
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ef e5       	ldi	r30, 0x5F	; 95
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 68       	ori	r24, 0x80	; 128
    1c3a:	8c 93       	st	X, r24
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1c4a:	af e5       	ldi	r26, 0x5F	; 95
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ef e5       	ldi	r30, 0x5F	; 95
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 77       	andi	r24, 0x7F	; 127
    1c56:	8c 93       	st	X, r24
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <setCallBack+0x6>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	e8 56       	subi	r30, 0x68	; 104
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8e 7f       	andi	r24, 0xFE	; 254
    1ca8:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1caa:	a5 e5       	ldi	r26, 0x55	; 85
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e5 e5       	ldi	r30, 0x55	; 85
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8d 7f       	andi	r24, 0xFD	; 253
    1cb6:	8c 93       	st	X, r24
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1cc6:	a5 e5       	ldi	r26, 0x55	; 85
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e5 e5       	ldi	r30, 0x55	; 85
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	82 60       	ori	r24, 0x02	; 2
    1cd2:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1cd4:	a5 e5       	ldi	r26, 0x55	; 85
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e5 e5       	ldi	r30, 0x55	; 85
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8e 7f       	andi	r24, 0xFE	; 254
    1ce0:	8c 93       	st	X, r24
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1cf0:	a5 e5       	ldi	r26, 0x55	; 85
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e5       	ldi	r30, 0x55	; 85
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8d 7f       	andi	r24, 0xFD	; 253
    1cfc:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1cfe:	a5 e5       	ldi	r26, 0x55	; 85
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e5       	ldi	r30, 0x55	; 85
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	81 60       	ori	r24, 0x01	; 1
    1d0a:	8c 93       	st	X, r24
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1d1a:	a5 e5       	ldi	r26, 0x55	; 85
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e5 e5       	ldi	r30, 0x55	; 85
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	82 60       	ori	r24, 0x02	; 2
    1d26:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1d28:	a5 e5       	ldi	r26, 0x55	; 85
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e5 e5       	ldi	r30, 0x55	; 85
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	81 60       	ori	r24, 0x01	; 1
    1d34:	8c 93       	st	X, r24
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1d44:	a5 e5       	ldi	r26, 0x55	; 85
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e5 e5       	ldi	r30, 0x55	; 85
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8b 7f       	andi	r24, 0xFB	; 251
    1d50:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1d52:	a5 e5       	ldi	r26, 0x55	; 85
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e5 e5       	ldi	r30, 0x55	; 85
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	87 7f       	andi	r24, 0xF7	; 247
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1d6e:	a5 e5       	ldi	r26, 0x55	; 85
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e5       	ldi	r30, 0x55	; 85
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	88 60       	ori	r24, 0x08	; 8
    1d7a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1d7c:	a5 e5       	ldi	r26, 0x55	; 85
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e5 e5       	ldi	r30, 0x55	; 85
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8b 7f       	andi	r24, 0xFB	; 251
    1d88:	8c 93       	st	X, r24
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1d98:	a5 e5       	ldi	r26, 0x55	; 85
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e5       	ldi	r30, 0x55	; 85
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	87 7f       	andi	r24, 0xF7	; 247
    1da4:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1da6:	a5 e5       	ldi	r26, 0x55	; 85
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e5       	ldi	r30, 0x55	; 85
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	84 60       	ori	r24, 0x04	; 4
    1db2:	8c 93       	st	X, r24
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1dc2:	a5 e5       	ldi	r26, 0x55	; 85
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e5       	ldi	r30, 0x55	; 85
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	88 60       	ori	r24, 0x08	; 8
    1dce:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1dd0:	a5 e5       	ldi	r26, 0x55	; 85
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e5       	ldi	r30, 0x55	; 85
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	84 60       	ori	r24, 0x04	; 4
    1ddc:	8c 93       	st	X, r24
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1dec:	a4 e5       	ldi	r26, 0x54	; 84
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e4 e5       	ldi	r30, 0x54	; 84
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 64       	ori	r24, 0x40	; 64
    1df8:	8c 93       	st	X, r24
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1e08:	a4 e5       	ldi	r26, 0x54	; 84
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e4 e5       	ldi	r30, 0x54	; 84
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8f 7b       	andi	r24, 0xBF	; 191
    1e14:	8c 93       	st	X, r24
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    1e24:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1e28:	ab e5       	ldi	r26, 0x5B	; 91
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	eb e5       	ldi	r30, 0x5B	; 91
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 64       	ori	r24, 0x40	; 64
    1e34:	8c 93       	st	X, r24
}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1e44:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1e48:	ab e5       	ldi	r26, 0x5B	; 91
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	eb e5       	ldi	r30, 0x5B	; 91
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 68       	ori	r24, 0x80	; 128
    1e54:	8c 93       	st	X, r24
}
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	2a 97       	sbiw	r28, 0x0a	; 10
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3a 87       	std	Y+10, r19	; 0x0a
    1e7c:	29 87       	std	Y+9, r18	; 0x09
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	e9 f1       	breq	.+122    	; 0x1f02 <EXTI_INTEnable+0xa6>
    1e88:	29 85       	ldd	r18, Y+9	; 0x09
    1e8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <EXTI_INTEnable+0x38>
    1e92:	69 c0       	rjmp	.+210    	; 0x1f66 <EXTI_INTEnable+0x10a>
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <EXTI_INTEnable+0x42>
    1e9c:	7f c0       	rjmp	.+254    	; 0x1f9c <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1e9e:	ab e5       	ldi	r26, 0x5B	; 91
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	eb e5       	ldi	r30, 0x5B	; 91
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 64       	ori	r24, 0x40	; 64
    1eaa:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	38 87       	std	Y+8, r19	; 0x08
    1eb4:	2f 83       	std	Y+7, r18	; 0x07
    1eb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb8:	98 85       	ldd	r25, Y+8	; 0x08
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	c1 f0       	breq	.+48     	; 0x1ef0 <EXTI_INTEnable+0x94>
    1ec0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ec2:	38 85       	ldd	r19, Y+8	; 0x08
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <EXTI_INTEnable+0x78>
    1eca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ecc:	98 85       	ldd	r25, Y+8	; 0x08
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	61 f0       	breq	.+24     	; 0x1eea <EXTI_INTEnable+0x8e>
    1ed2:	64 c0       	rjmp	.+200    	; 0x1f9c <EXTI_INTEnable+0x140>
    1ed4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed6:	38 85       	ldd	r19, Y+8	; 0x08
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	61 f0       	breq	.+24     	; 0x1ef6 <EXTI_INTEnable+0x9a>
    1ede:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee0:	98 85       	ldd	r25, Y+8	; 0x08
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	51 f0       	breq	.+20     	; 0x1efc <EXTI_INTEnable+0xa0>
    1ee8:	59 c0       	rjmp	.+178    	; 0x1f9c <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1eea:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <EXTI0_LowLevel_MODE>
    1eee:	56 c0       	rjmp	.+172    	; 0x1f9c <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1ef0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <EXTI0_FALLING_MODE>
    1ef4:	53 c0       	rjmp	.+166    	; 0x1f9c <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1ef6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <EXTI0_AnyLogicalChange_MODE>
    1efa:	50 c0       	rjmp	.+160    	; 0x1f9c <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    1efc:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <EXTI0_RISING_MODE>
    1f00:	4d c0       	rjmp	.+154    	; 0x1f9c <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1f02:	ab e5       	ldi	r26, 0x5B	; 91
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	eb e5       	ldi	r30, 0x5B	; 91
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 68       	ori	r24, 0x80	; 128
    1f0e:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3e 83       	std	Y+6, r19	; 0x06
    1f18:	2d 83       	std	Y+5, r18	; 0x05
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	c1 f0       	breq	.+48     	; 0x1f54 <EXTI_INTEnable+0xf8>
    1f24:	2d 81       	ldd	r18, Y+5	; 0x05
    1f26:	3e 81       	ldd	r19, Y+6	; 0x06
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <EXTI_INTEnable+0xdc>
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <EXTI_INTEnable+0xf2>
    1f36:	32 c0       	rjmp	.+100    	; 0x1f9c <EXTI_INTEnable+0x140>
    1f38:	2d 81       	ldd	r18, Y+5	; 0x05
    1f3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3c:	22 30       	cpi	r18, 0x02	; 2
    1f3e:	31 05       	cpc	r19, r1
    1f40:	61 f0       	breq	.+24     	; 0x1f5a <EXTI_INTEnable+0xfe>
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	91 05       	cpc	r25, r1
    1f4a:	51 f0       	breq	.+20     	; 0x1f60 <EXTI_INTEnable+0x104>
    1f4c:	27 c0       	rjmp	.+78     	; 0x1f9c <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1f4e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <EXTI1_LowLevel_MODE>
    1f52:	24 c0       	rjmp	.+72     	; 0x1f9c <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1f54:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <EXTI1_FALLING_MODE>
    1f58:	21 c0       	rjmp	.+66     	; 0x1f9c <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    1f5a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <EXTI1_AnyLogicalChange_MODE>
    1f5e:	1e c0       	rjmp	.+60     	; 0x1f9c <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1f60:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <EXTI1_RISING_MODE>
    1f64:	1b c0       	rjmp	.+54     	; 0x1f9c <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1f66:	ab e5       	ldi	r26, 0x5B	; 91
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	eb e5       	ldi	r30, 0x5B	; 91
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 62       	ori	r24, 0x20	; 32
    1f72:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3c 83       	std	Y+4, r19	; 0x04
    1f7c:	2b 83       	std	Y+3, r18	; 0x03
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	41 f0       	breq	.+16     	; 0x1f98 <EXTI_INTEnable+0x13c>
    1f88:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8c:	23 30       	cpi	r18, 0x03	; 3
    1f8e:	31 05       	cpc	r19, r1
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1f92:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <EXTI2_RISING_MODE>
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1f98:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1f9c:	2a 96       	adiw	r28, 0x0a	; 10
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <EXTI_voidINTDisable+0x6>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3b 83       	std	Y+3, r19	; 0x03
    1fc4:	2a 83       	std	Y+2, r18	; 0x02
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	89 f0       	breq	.+34     	; 0x1ff2 <EXTI_voidINTDisable+0x44>
    1fd0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fd2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	a1 f0       	breq	.+40     	; 0x2002 <EXTI_voidINTDisable+0x54>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	b9 f4       	brne	.+46     	; 0x2010 <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1fe2:	ab e5       	ldi	r26, 0x5B	; 91
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	eb e5       	ldi	r30, 0x5B	; 91
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7b       	andi	r24, 0xBF	; 191
    1fee:	8c 93       	st	X, r24
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1ff2:	ab e5       	ldi	r26, 0x5B	; 91
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	eb e5       	ldi	r30, 0x5B	; 91
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8f 77       	andi	r24, 0x7F	; 127
    1ffe:	8c 93       	st	X, r24
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    2002:	ab e5       	ldi	r26, 0x5B	; 91
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb e5       	ldi	r30, 0x5B	; 91
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8f 7d       	andi	r24, 0xDF	; 223
    200e:	8c 93       	st	X, r24
			break;
	}
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    201c:	1f 92       	push	r1
    201e:	0f 92       	push	r0
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	0f 92       	push	r0
    2024:	11 24       	eor	r1, r1
    2026:	2f 93       	push	r18
    2028:	3f 93       	push	r19
    202a:	4f 93       	push	r20
    202c:	5f 93       	push	r21
    202e:	6f 93       	push	r22
    2030:	7f 93       	push	r23
    2032:	8f 93       	push	r24
    2034:	9f 93       	push	r25
    2036:	af 93       	push	r26
    2038:	bf 93       	push	r27
    203a:	ef 93       	push	r30
    203c:	ff 93       	push	r31
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    2046:	80 91 98 01 	lds	r24, 0x0198
    204a:	90 91 99 01 	lds	r25, 0x0199
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	29 f0       	breq	.+10     	; 0x205c <__vector_1+0x40>
		EXTI[0]();
    2052:	e0 91 98 01 	lds	r30, 0x0198
    2056:	f0 91 99 01 	lds	r31, 0x0199
    205a:	09 95       	icall
	}

}
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	ff 91       	pop	r31
    2062:	ef 91       	pop	r30
    2064:	bf 91       	pop	r27
    2066:	af 91       	pop	r26
    2068:	9f 91       	pop	r25
    206a:	8f 91       	pop	r24
    206c:	7f 91       	pop	r23
    206e:	6f 91       	pop	r22
    2070:	5f 91       	pop	r21
    2072:	4f 91       	pop	r20
    2074:	3f 91       	pop	r19
    2076:	2f 91       	pop	r18
    2078:	0f 90       	pop	r0
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	0f 90       	pop	r0
    207e:	1f 90       	pop	r1
    2080:	18 95       	reti

00002082 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    2082:	1f 92       	push	r1
    2084:	0f 92       	push	r0
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	0f 92       	push	r0
    208a:	11 24       	eor	r1, r1
    208c:	2f 93       	push	r18
    208e:	3f 93       	push	r19
    2090:	4f 93       	push	r20
    2092:	5f 93       	push	r21
    2094:	6f 93       	push	r22
    2096:	7f 93       	push	r23
    2098:	8f 93       	push	r24
    209a:	9f 93       	push	r25
    209c:	af 93       	push	r26
    209e:	bf 93       	push	r27
    20a0:	ef 93       	push	r30
    20a2:	ff 93       	push	r31
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    20ac:	80 91 9a 01 	lds	r24, 0x019A
    20b0:	90 91 9b 01 	lds	r25, 0x019B
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	29 f0       	breq	.+10     	; 0x20c2 <__vector_2+0x40>
			EXTI[1]();
    20b8:	e0 91 9a 01 	lds	r30, 0x019A
    20bc:	f0 91 9b 01 	lds	r31, 0x019B
    20c0:	09 95       	icall
	}

}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    20e8:	1f 92       	push	r1
    20ea:	0f 92       	push	r0
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	0f 92       	push	r0
    20f0:	11 24       	eor	r1, r1
    20f2:	2f 93       	push	r18
    20f4:	3f 93       	push	r19
    20f6:	4f 93       	push	r20
    20f8:	5f 93       	push	r21
    20fa:	6f 93       	push	r22
    20fc:	7f 93       	push	r23
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    2112:	80 91 9c 01 	lds	r24, 0x019C
    2116:	90 91 9d 01 	lds	r25, 0x019D
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	29 f0       	breq	.+10     	; 0x2128 <__vector_3+0x40>
			EXTI[2]();
    211e:	e0 91 9c 01 	lds	r30, 0x019C
    2122:	f0 91 9d 01 	lds	r31, 0x019D
    2126:	09 95       	icall
	}

}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	ff 91       	pop	r31
    212e:	ef 91       	pop	r30
    2130:	bf 91       	pop	r27
    2132:	af 91       	pop	r26
    2134:	9f 91       	pop	r25
    2136:	8f 91       	pop	r24
    2138:	7f 91       	pop	r23
    213a:	6f 91       	pop	r22
    213c:	5f 91       	pop	r21
    213e:	4f 91       	pop	r20
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    2156:	ea e3       	ldi	r30, 0x3A	; 58
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    215c:	e7 e3       	ldi	r30, 0x37	; 55
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    2162:	e4 e3       	ldi	r30, 0x34	; 52
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    216a:	e1 e3       	ldi	r30, 0x31	; 49
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	82 e3       	ldi	r24, 0x32	; 50
    2170:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    2172:	eb e3       	ldi	r30, 0x3B	; 59
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    2178:	e8 e3       	ldi	r30, 0x38	; 56
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    217e:	e5 e3       	ldi	r30, 0x35	; 53
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    2184:	e2 e3       	ldi	r30, 0x32	; 50
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1

}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	2e 97       	sbiw	r28, 0x0e	; 14
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	6b 83       	std	Y+3, r22	; 0x03
    21a8:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	84 30       	cpi	r24, 0x04	; 4
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <DIO_u8SetPinDirection+0x26>
    21b4:	0c c1       	rjmp	.+536    	; 0x23ce <DIO_u8SetPinDirection+0x23e>
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	88 30       	cpi	r24, 0x08	; 8
    21ba:	08 f0       	brcs	.+2      	; 0x21be <DIO_u8SetPinDirection+0x2e>
    21bc:	08 c1       	rjmp	.+528    	; 0x23ce <DIO_u8SetPinDirection+0x23e>
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	21 f0       	breq	.+8      	; 0x21cc <DIO_u8SetPinDirection+0x3c>
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	88 23       	and	r24, r24
    21c8:	09 f0       	breq	.+2      	; 0x21cc <DIO_u8SetPinDirection+0x3c>
    21ca:	01 c1       	rjmp	.+514    	; 0x23ce <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	3e 87       	std	Y+14, r19	; 0x0e
    21d4:	2d 87       	std	Y+13, r18	; 0x0d
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <DIO_u8SetPinDirection+0x52>
    21e0:	4f c0       	rjmp	.+158    	; 0x2280 <DIO_u8SetPinDirection+0xf0>
    21e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    21e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    21e6:	22 30       	cpi	r18, 0x02	; 2
    21e8:	31 05       	cpc	r19, r1
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <DIO_u8SetPinDirection+0x66>
    21ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	71 f0       	breq	.+28     	; 0x2210 <DIO_u8SetPinDirection+0x80>
    21f4:	ed c0       	rjmp	.+474    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
    21f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    21f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    21fa:	22 30       	cpi	r18, 0x02	; 2
    21fc:	31 05       	cpc	r19, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <DIO_u8SetPinDirection+0x72>
    2200:	77 c0       	rjmp	.+238    	; 0x22f0 <DIO_u8SetPinDirection+0x160>
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	91 05       	cpc	r25, r1
    220a:	09 f4       	brne	.+2      	; 0x220e <DIO_u8SetPinDirection+0x7e>
    220c:	a9 c0       	rjmp	.+338    	; 0x2360 <DIO_u8SetPinDirection+0x1d0>
    220e:	e0 c0       	rjmp	.+448    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3c 87       	std	Y+12, r19	; 0x0c
    2218:	2b 87       	std	Y+11, r18	; 0x0b
    221a:	8b 85       	ldd	r24, Y+11	; 0x0b
    221c:	9c 85       	ldd	r25, Y+12	; 0x0c
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	d1 f0       	breq	.+52     	; 0x2256 <DIO_u8SetPinDirection+0xc6>
    2222:	2b 85       	ldd	r18, Y+11	; 0x0b
    2224:	3c 85       	ldd	r19, Y+12	; 0x0c
    2226:	21 30       	cpi	r18, 0x01	; 1
    2228:	31 05       	cpc	r19, r1
    222a:	09 f0       	breq	.+2      	; 0x222e <DIO_u8SetPinDirection+0x9e>
    222c:	d1 c0       	rjmp	.+418    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    222e:	aa e3       	ldi	r26, 0x3A	; 58
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ea e3       	ldi	r30, 0x3A	; 58
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	48 2f       	mov	r20, r24
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	02 2e       	mov	r0, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <DIO_u8SetPinDirection+0xbc>
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	0a 94       	dec	r0
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <DIO_u8SetPinDirection+0xb8>
    2250:	84 2b       	or	r24, r20
    2252:	8c 93       	st	X, r24
    2254:	bd c0       	rjmp	.+378    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2256:	aa e3       	ldi	r26, 0x3A	; 58
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	ea e3       	ldi	r30, 0x3A	; 58
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	48 2f       	mov	r20, r24
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	02 2e       	mov	r0, r18
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <DIO_u8SetPinDirection+0xe4>
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	0a 94       	dec	r0
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <DIO_u8SetPinDirection+0xe0>
    2278:	80 95       	com	r24
    227a:	84 23       	and	r24, r20
    227c:	8c 93       	st	X, r24
    227e:	a8 c0       	rjmp	.+336    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	3a 87       	std	Y+10, r19	; 0x0a
    2288:	29 87       	std	Y+9, r18	; 0x09
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	d1 f0       	breq	.+52     	; 0x22c6 <DIO_u8SetPinDirection+0x136>
    2292:	29 85       	ldd	r18, Y+9	; 0x09
    2294:	3a 85       	ldd	r19, Y+10	; 0x0a
    2296:	21 30       	cpi	r18, 0x01	; 1
    2298:	31 05       	cpc	r19, r1
    229a:	09 f0       	breq	.+2      	; 0x229e <DIO_u8SetPinDirection+0x10e>
    229c:	99 c0       	rjmp	.+306    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    229e:	a7 e3       	ldi	r26, 0x37	; 55
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e7 e3       	ldi	r30, 0x37	; 55
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 2e       	mov	r0, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_u8SetPinDirection+0x12c>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <DIO_u8SetPinDirection+0x128>
    22c0:	84 2b       	or	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	85 c0       	rjmp	.+266    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    22c6:	a7 e3       	ldi	r26, 0x37	; 55
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e7 e3       	ldi	r30, 0x37	; 55
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	48 2f       	mov	r20, r24
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_u8SetPinDirection+0x154>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_u8SetPinDirection+0x150>
    22e8:	80 95       	com	r24
    22ea:	84 23       	and	r24, r20
    22ec:	8c 93       	st	X, r24
    22ee:	70 c0       	rjmp	.+224    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	38 87       	std	Y+8, r19	; 0x08
    22f8:	2f 83       	std	Y+7, r18	; 0x07
    22fa:	8f 81       	ldd	r24, Y+7	; 0x07
    22fc:	98 85       	ldd	r25, Y+8	; 0x08
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	d1 f0       	breq	.+52     	; 0x2336 <DIO_u8SetPinDirection+0x1a6>
    2302:	2f 81       	ldd	r18, Y+7	; 0x07
    2304:	38 85       	ldd	r19, Y+8	; 0x08
    2306:	21 30       	cpi	r18, 0x01	; 1
    2308:	31 05       	cpc	r19, r1
    230a:	09 f0       	breq	.+2      	; 0x230e <DIO_u8SetPinDirection+0x17e>
    230c:	61 c0       	rjmp	.+194    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    230e:	a4 e3       	ldi	r26, 0x34	; 52
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e4 e3       	ldi	r30, 0x34	; 52
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	48 2f       	mov	r20, r24
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	02 2e       	mov	r0, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <DIO_u8SetPinDirection+0x19c>
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	0a 94       	dec	r0
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <DIO_u8SetPinDirection+0x198>
    2330:	84 2b       	or	r24, r20
    2332:	8c 93       	st	X, r24
    2334:	4d c0       	rjmp	.+154    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2336:	a4 e3       	ldi	r26, 0x34	; 52
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e4 e3       	ldi	r30, 0x34	; 52
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	48 2f       	mov	r20, r24
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	02 2e       	mov	r0, r18
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <DIO_u8SetPinDirection+0x1c4>
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	0a 94       	dec	r0
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <DIO_u8SetPinDirection+0x1c0>
    2358:	80 95       	com	r24
    235a:	84 23       	and	r24, r20
    235c:	8c 93       	st	X, r24
    235e:	38 c0       	rjmp	.+112    	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3e 83       	std	Y+6, r19	; 0x06
    2368:	2d 83       	std	Y+5, r18	; 0x05
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	c9 f0       	breq	.+50     	; 0x23a4 <DIO_u8SetPinDirection+0x214>
    2372:	2d 81       	ldd	r18, Y+5	; 0x05
    2374:	3e 81       	ldd	r19, Y+6	; 0x06
    2376:	21 30       	cpi	r18, 0x01	; 1
    2378:	31 05       	cpc	r19, r1
    237a:	51 f5       	brne	.+84     	; 0x23d0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    237c:	a1 e3       	ldi	r26, 0x31	; 49
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e1 e3       	ldi	r30, 0x31	; 49
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	48 2f       	mov	r20, r24
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 2e       	mov	r0, r18
    2394:	02 c0       	rjmp	.+4      	; 0x239a <DIO_u8SetPinDirection+0x20a>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	0a 94       	dec	r0
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <DIO_u8SetPinDirection+0x206>
    239e:	84 2b       	or	r24, r20
    23a0:	8c 93       	st	X, r24
    23a2:	16 c0       	rjmp	.+44     	; 0x23d0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    23a4:	a1 e3       	ldi	r26, 0x31	; 49
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e1 e3       	ldi	r30, 0x31	; 49
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 2e       	mov	r0, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <DIO_u8SetPinDirection+0x232>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <DIO_u8SetPinDirection+0x22e>
    23c6:	80 95       	com	r24
    23c8:	84 23       	and	r24, r20
    23ca:	8c 93       	st	X, r24
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    23ce:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d2:	2e 96       	adiw	r28, 0x0e	; 14
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	2f 97       	sbiw	r28, 0x0f	; 15
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	6c 83       	std	Y+4, r22	; 0x04
    23fc:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	84 30       	cpi	r24, 0x04	; 4
    2406:	08 f0       	brcs	.+2      	; 0x240a <DIO_u8SetPinValue+0x26>
    2408:	13 c1       	rjmp	.+550    	; 0x2630 <DIO_u8SetPinValue+0x24c>
    240a:	8c 81       	ldd	r24, Y+4	; 0x04
    240c:	88 30       	cpi	r24, 0x08	; 8
    240e:	08 f0       	brcs	.+2      	; 0x2412 <DIO_u8SetPinValue+0x2e>
    2410:	0f c1       	rjmp	.+542    	; 0x2630 <DIO_u8SetPinValue+0x24c>
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	88 23       	and	r24, r24
    2416:	21 f0       	breq	.+8      	; 0x2420 <DIO_u8SetPinValue+0x3c>
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	09 f0       	breq	.+2      	; 0x2420 <DIO_u8SetPinValue+0x3c>
    241e:	08 c1       	rjmp	.+528    	; 0x2630 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3f 87       	std	Y+15, r19	; 0x0f
    2428:	2e 87       	std	Y+14, r18	; 0x0e
    242a:	8e 85       	ldd	r24, Y+14	; 0x0e
    242c:	9f 85       	ldd	r25, Y+15	; 0x0f
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 05       	cpc	r25, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <DIO_u8SetPinValue+0x52>
    2434:	50 c0       	rjmp	.+160    	; 0x24d6 <DIO_u8SetPinValue+0xf2>
    2436:	2e 85       	ldd	r18, Y+14	; 0x0e
    2438:	3f 85       	ldd	r19, Y+15	; 0x0f
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	2c f4       	brge	.+10     	; 0x244a <DIO_u8SetPinValue+0x66>
    2440:	8e 85       	ldd	r24, Y+14	; 0x0e
    2442:	9f 85       	ldd	r25, Y+15	; 0x0f
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	71 f0       	breq	.+28     	; 0x2464 <DIO_u8SetPinValue+0x80>
    2448:	f4 c0       	rjmp	.+488    	; 0x2632 <DIO_u8SetPinValue+0x24e>
    244a:	2e 85       	ldd	r18, Y+14	; 0x0e
    244c:	3f 85       	ldd	r19, Y+15	; 0x0f
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	09 f4       	brne	.+2      	; 0x2456 <DIO_u8SetPinValue+0x72>
    2454:	79 c0       	rjmp	.+242    	; 0x2548 <DIO_u8SetPinValue+0x164>
    2456:	8e 85       	ldd	r24, Y+14	; 0x0e
    2458:	9f 85       	ldd	r25, Y+15	; 0x0f
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	91 05       	cpc	r25, r1
    245e:	09 f4       	brne	.+2      	; 0x2462 <DIO_u8SetPinValue+0x7e>
    2460:	ad c0       	rjmp	.+346    	; 0x25bc <DIO_u8SetPinValue+0x1d8>
    2462:	e7 c0       	rjmp	.+462    	; 0x2632 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3d 87       	std	Y+13, r19	; 0x0d
    246c:	2c 87       	std	Y+12, r18	; 0x0c
    246e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2470:	9d 85       	ldd	r25, Y+13	; 0x0d
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	c9 f0       	breq	.+50     	; 0x24a8 <DIO_u8SetPinValue+0xc4>
    2476:	2c 85       	ldd	r18, Y+12	; 0x0c
    2478:	3d 85       	ldd	r19, Y+13	; 0x0d
    247a:	21 30       	cpi	r18, 0x01	; 1
    247c:	31 05       	cpc	r19, r1
    247e:	49 f5       	brne	.+82     	; 0x24d2 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2480:	ab e3       	ldi	r26, 0x3B	; 59
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	eb e3       	ldi	r30, 0x3B	; 59
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	48 2f       	mov	r20, r24
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	02 2e       	mov	r0, r18
    2498:	02 c0       	rjmp	.+4      	; 0x249e <DIO_u8SetPinValue+0xba>
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	0a 94       	dec	r0
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <DIO_u8SetPinValue+0xb6>
    24a2:	84 2b       	or	r24, r20
    24a4:	8c 93       	st	X, r24
    24a6:	c5 c0       	rjmp	.+394    	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    24a8:	ab e3       	ldi	r26, 0x3B	; 59
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	eb e3       	ldi	r30, 0x3B	; 59
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	48 2f       	mov	r20, r24
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <DIO_u8SetPinValue+0xe2>
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <DIO_u8SetPinValue+0xde>
    24ca:	80 95       	com	r24
    24cc:	84 23       	and	r24, r20
    24ce:	8c 93       	st	X, r24
    24d0:	b0 c0       	rjmp	.+352    	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    24d2:	1a 82       	std	Y+2, r1	; 0x02
    24d4:	ae c0       	rjmp	.+348    	; 0x2632 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	3b 87       	std	Y+11, r19	; 0x0b
    24de:	2a 87       	std	Y+10, r18	; 0x0a
    24e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	c9 f0       	breq	.+50     	; 0x251a <DIO_u8SetPinValue+0x136>
    24e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    24ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    24ec:	21 30       	cpi	r18, 0x01	; 1
    24ee:	31 05       	cpc	r19, r1
    24f0:	49 f5       	brne	.+82     	; 0x2544 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    24f2:	a8 e3       	ldi	r26, 0x38	; 56
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e8 e3       	ldi	r30, 0x38	; 56
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <DIO_u8SetPinValue+0x12c>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <DIO_u8SetPinValue+0x128>
    2514:	84 2b       	or	r24, r20
    2516:	8c 93       	st	X, r24
    2518:	8c c0       	rjmp	.+280    	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    251a:	a8 e3       	ldi	r26, 0x38	; 56
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e8 e3       	ldi	r30, 0x38	; 56
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	48 2f       	mov	r20, r24
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 2e       	mov	r0, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <DIO_u8SetPinValue+0x154>
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	0a 94       	dec	r0
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <DIO_u8SetPinValue+0x150>
    253c:	80 95       	com	r24
    253e:	84 23       	and	r24, r20
    2540:	8c 93       	st	X, r24
    2542:	77 c0       	rjmp	.+238    	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2544:	1a 82       	std	Y+2, r1	; 0x02
    2546:	75 c0       	rjmp	.+234    	; 0x2632 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	39 87       	std	Y+9, r19	; 0x09
    2550:	28 87       	std	Y+8, r18	; 0x08
    2552:	88 85       	ldd	r24, Y+8	; 0x08
    2554:	99 85       	ldd	r25, Y+9	; 0x09
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	31 f0       	breq	.+12     	; 0x2566 <DIO_u8SetPinValue+0x182>
    255a:	28 85       	ldd	r18, Y+8	; 0x08
    255c:	39 85       	ldd	r19, Y+9	; 0x09
    255e:	21 30       	cpi	r18, 0x01	; 1
    2560:	31 05       	cpc	r19, r1
    2562:	b1 f0       	breq	.+44     	; 0x2590 <DIO_u8SetPinValue+0x1ac>
    2564:	29 c0       	rjmp	.+82     	; 0x25b8 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2566:	a5 e3       	ldi	r26, 0x35	; 53
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e5 e3       	ldi	r30, 0x35	; 53
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_u8SetPinValue+0x1a0>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <DIO_u8SetPinValue+0x19c>
    2588:	80 95       	com	r24
    258a:	84 23       	and	r24, r20
    258c:	8c 93       	st	X, r24
    258e:	51 c0       	rjmp	.+162    	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2590:	a5 e3       	ldi	r26, 0x35	; 53
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e5 e3       	ldi	r30, 0x35	; 53
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	48 2f       	mov	r20, r24
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 2e       	mov	r0, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <DIO_u8SetPinValue+0x1ca>
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	0a 94       	dec	r0
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <DIO_u8SetPinValue+0x1c6>
    25b2:	84 2b       	or	r24, r20
    25b4:	8c 93       	st	X, r24
    25b6:	3d c0       	rjmp	.+122    	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    25b8:	1a 82       	std	Y+2, r1	; 0x02
    25ba:	3b c0       	rjmp	.+118    	; 0x2632 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	3f 83       	std	Y+7, r19	; 0x07
    25c4:	2e 83       	std	Y+6, r18	; 0x06
    25c6:	8e 81       	ldd	r24, Y+6	; 0x06
    25c8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	31 f0       	breq	.+12     	; 0x25da <DIO_u8SetPinValue+0x1f6>
    25ce:	2e 81       	ldd	r18, Y+6	; 0x06
    25d0:	3f 81       	ldd	r19, Y+7	; 0x07
    25d2:	21 30       	cpi	r18, 0x01	; 1
    25d4:	31 05       	cpc	r19, r1
    25d6:	b1 f0       	breq	.+44     	; 0x2604 <DIO_u8SetPinValue+0x220>
    25d8:	29 c0       	rjmp	.+82     	; 0x262c <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    25da:	a5 e3       	ldi	r26, 0x35	; 53
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e5 e3       	ldi	r30, 0x35	; 53
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	48 2f       	mov	r20, r24
    25e6:	8c 81       	ldd	r24, Y+4	; 0x04
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 2e       	mov	r0, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <DIO_u8SetPinValue+0x214>
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <DIO_u8SetPinValue+0x210>
    25fc:	80 95       	com	r24
    25fe:	84 23       	and	r24, r20
    2600:	8c 93       	st	X, r24
    2602:	17 c0       	rjmp	.+46     	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    2604:	a2 e3       	ldi	r26, 0x32	; 50
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e2 e3       	ldi	r30, 0x32	; 50
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	48 2f       	mov	r20, r24
    2610:	8c 81       	ldd	r24, Y+4	; 0x04
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	02 2e       	mov	r0, r18
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_u8SetPinValue+0x23e>
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	0a 94       	dec	r0
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_u8SetPinValue+0x23a>
    2626:	84 2b       	or	r24, r20
    2628:	8c 93       	st	X, r24
    262a:	03 c0       	rjmp	.+6      	; 0x2632 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    262c:	1a 82       	std	Y+2, r1	; 0x02
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2630:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2634:	2f 96       	adiw	r28, 0x0f	; 15
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	28 97       	sbiw	r28, 0x08	; 8
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	8b 83       	std	Y+3, r24	; 0x03
    265c:	6c 83       	std	Y+4, r22	; 0x04
    265e:	5e 83       	std	Y+6, r21	; 0x06
    2660:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	84 30       	cpi	r24, 0x04	; 4
    266a:	08 f0       	brcs	.+2      	; 0x266e <DIO_u8GetPinValue+0x28>
    266c:	9f c0       	rjmp	.+318    	; 0x27ac <DIO_u8GetPinValue+0x166>
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	88 30       	cpi	r24, 0x08	; 8
    2672:	08 f0       	brcs	.+2      	; 0x2676 <DIO_u8GetPinValue+0x30>
    2674:	9b c0       	rjmp	.+310    	; 0x27ac <DIO_u8GetPinValue+0x166>
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	09 f4       	brne	.+2      	; 0x2680 <DIO_u8GetPinValue+0x3a>
    267e:	96 c0       	rjmp	.+300    	; 0x27ac <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	38 87       	std	Y+8, r19	; 0x08
    2688:	2f 83       	std	Y+7, r18	; 0x07
    268a:	4f 81       	ldd	r20, Y+7	; 0x07
    268c:	58 85       	ldd	r21, Y+8	; 0x08
    268e:	41 30       	cpi	r20, 0x01	; 1
    2690:	51 05       	cpc	r21, r1
    2692:	a9 f1       	breq	.+106    	; 0x26fe <DIO_u8GetPinValue+0xb8>
    2694:	8f 81       	ldd	r24, Y+7	; 0x07
    2696:	98 85       	ldd	r25, Y+8	; 0x08
    2698:	82 30       	cpi	r24, 0x02	; 2
    269a:	91 05       	cpc	r25, r1
    269c:	34 f4       	brge	.+12     	; 0x26aa <DIO_u8GetPinValue+0x64>
    269e:	2f 81       	ldd	r18, Y+7	; 0x07
    26a0:	38 85       	ldd	r19, Y+8	; 0x08
    26a2:	21 15       	cp	r18, r1
    26a4:	31 05       	cpc	r19, r1
    26a6:	71 f0       	breq	.+28     	; 0x26c4 <DIO_u8GetPinValue+0x7e>
    26a8:	82 c0       	rjmp	.+260    	; 0x27ae <DIO_u8GetPinValue+0x168>
    26aa:	4f 81       	ldd	r20, Y+7	; 0x07
    26ac:	58 85       	ldd	r21, Y+8	; 0x08
    26ae:	42 30       	cpi	r20, 0x02	; 2
    26b0:	51 05       	cpc	r21, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <DIO_u8GetPinValue+0x70>
    26b4:	41 c0       	rjmp	.+130    	; 0x2738 <DIO_u8GetPinValue+0xf2>
    26b6:	8f 81       	ldd	r24, Y+7	; 0x07
    26b8:	98 85       	ldd	r25, Y+8	; 0x08
    26ba:	83 30       	cpi	r24, 0x03	; 3
    26bc:	91 05       	cpc	r25, r1
    26be:	09 f4       	brne	.+2      	; 0x26c2 <DIO_u8GetPinValue+0x7c>
    26c0:	58 c0       	rjmp	.+176    	; 0x2772 <DIO_u8GetPinValue+0x12c>
    26c2:	75 c0       	rjmp	.+234    	; 0x27ae <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    26c4:	e9 e3       	ldi	r30, 0x39	; 57
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <DIO_u8GetPinValue+0x96>
    26d8:	55 95       	asr	r21
    26da:	47 95       	ror	r20
    26dc:	8a 95       	dec	r24
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <DIO_u8GetPinValue+0x92>
    26e0:	ca 01       	movw	r24, r20
    26e2:	81 70       	andi	r24, 0x01	; 1
    26e4:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	88 23       	and	r24, r24
    26ea:	21 f4       	brne	.+8      	; 0x26f4 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    26ec:	ed 81       	ldd	r30, Y+5	; 0x05
    26ee:	fe 81       	ldd	r31, Y+6	; 0x06
    26f0:	10 82       	st	Z, r1
    26f2:	5d c0       	rjmp	.+186    	; 0x27ae <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    26f4:	ed 81       	ldd	r30, Y+5	; 0x05
    26f6:	fe 81       	ldd	r31, Y+6	; 0x06
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 83       	st	Z, r24
    26fc:	58 c0       	rjmp	.+176    	; 0x27ae <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    26fe:	e6 e3       	ldi	r30, 0x36	; 54
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	8c 81       	ldd	r24, Y+4	; 0x04
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a9 01       	movw	r20, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_u8GetPinValue+0xd0>
    2712:	55 95       	asr	r21
    2714:	47 95       	ror	r20
    2716:	8a 95       	dec	r24
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_u8GetPinValue+0xcc>
    271a:	ca 01       	movw	r24, r20
    271c:	81 70       	andi	r24, 0x01	; 1
    271e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 23       	and	r24, r24
    2724:	21 f4       	brne	.+8      	; 0x272e <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2726:	ed 81       	ldd	r30, Y+5	; 0x05
    2728:	fe 81       	ldd	r31, Y+6	; 0x06
    272a:	10 82       	st	Z, r1
    272c:	40 c0       	rjmp	.+128    	; 0x27ae <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    272e:	ed 81       	ldd	r30, Y+5	; 0x05
    2730:	fe 81       	ldd	r31, Y+6	; 0x06
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	80 83       	st	Z, r24
    2736:	3b c0       	rjmp	.+118    	; 0x27ae <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    2738:	e3 e3       	ldi	r30, 0x33	; 51
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8c 81       	ldd	r24, Y+4	; 0x04
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a9 01       	movw	r20, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <DIO_u8GetPinValue+0x10a>
    274c:	55 95       	asr	r21
    274e:	47 95       	ror	r20
    2750:	8a 95       	dec	r24
    2752:	e2 f7       	brpl	.-8      	; 0x274c <DIO_u8GetPinValue+0x106>
    2754:	ca 01       	movw	r24, r20
    2756:	81 70       	andi	r24, 0x01	; 1
    2758:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	88 23       	and	r24, r24
    275e:	21 f4       	brne	.+8      	; 0x2768 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2760:	ed 81       	ldd	r30, Y+5	; 0x05
    2762:	fe 81       	ldd	r31, Y+6	; 0x06
    2764:	10 82       	st	Z, r1
    2766:	23 c0       	rjmp	.+70     	; 0x27ae <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2768:	ed 81       	ldd	r30, Y+5	; 0x05
    276a:	fe 81       	ldd	r31, Y+6	; 0x06
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	80 83       	st	Z, r24
    2770:	1e c0       	rjmp	.+60     	; 0x27ae <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    2772:	e0 e3       	ldi	r30, 0x30	; 48
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	a9 01       	movw	r20, r18
    2784:	02 c0       	rjmp	.+4      	; 0x278a <DIO_u8GetPinValue+0x144>
    2786:	55 95       	asr	r21
    2788:	47 95       	ror	r20
    278a:	8a 95       	dec	r24
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <DIO_u8GetPinValue+0x140>
    278e:	ca 01       	movw	r24, r20
    2790:	81 70       	andi	r24, 0x01	; 1
    2792:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	88 23       	and	r24, r24
    2798:	21 f4       	brne	.+8      	; 0x27a2 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    279a:	ed 81       	ldd	r30, Y+5	; 0x05
    279c:	fe 81       	ldd	r31, Y+6	; 0x06
    279e:	10 82       	st	Z, r1
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    27a2:	ed 81       	ldd	r30, Y+5	; 0x05
    27a4:	fe 81       	ldd	r31, Y+6	; 0x06
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 83       	st	Z, r24
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    27ac:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    27b0:	28 96       	adiw	r28, 0x08	; 8
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <DIO_getPinValueWithoutPointer+0x6>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <DIO_getPinValueWithoutPointer+0x8>
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	8a 83       	std	Y+2, r24	; 0x02
    27d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    27d4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	88 30       	cpi	r24, 0x08	; 8
    27da:	08 f0       	brcs	.+2      	; 0x27de <DIO_getPinValueWithoutPointer+0x1c>
    27dc:	6b c0       	rjmp	.+214    	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	84 30       	cpi	r24, 0x04	; 4
    27e2:	08 f0       	brcs	.+2      	; 0x27e6 <DIO_getPinValueWithoutPointer+0x24>
    27e4:	67 c0       	rjmp	.+206    	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	3d 83       	std	Y+5, r19	; 0x05
    27ee:	2c 83       	std	Y+4, r18	; 0x04
    27f0:	4c 81       	ldd	r20, Y+4	; 0x04
    27f2:	5d 81       	ldd	r21, Y+5	; 0x05
    27f4:	41 30       	cpi	r20, 0x01	; 1
    27f6:	51 05       	cpc	r21, r1
    27f8:	41 f1       	breq	.+80     	; 0x284a <DIO_getPinValueWithoutPointer+0x88>
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	9d 81       	ldd	r25, Y+5	; 0x05
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	91 05       	cpc	r25, r1
    2802:	34 f4       	brge	.+12     	; 0x2810 <DIO_getPinValueWithoutPointer+0x4e>
    2804:	2c 81       	ldd	r18, Y+4	; 0x04
    2806:	3d 81       	ldd	r19, Y+5	; 0x05
    2808:	21 15       	cp	r18, r1
    280a:	31 05       	cpc	r19, r1
    280c:	61 f0       	breq	.+24     	; 0x2826 <DIO_getPinValueWithoutPointer+0x64>
    280e:	52 c0       	rjmp	.+164    	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
    2810:	4c 81       	ldd	r20, Y+4	; 0x04
    2812:	5d 81       	ldd	r21, Y+5	; 0x05
    2814:	42 30       	cpi	r20, 0x02	; 2
    2816:	51 05       	cpc	r21, r1
    2818:	51 f1       	breq	.+84     	; 0x286e <DIO_getPinValueWithoutPointer+0xac>
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	9d 81       	ldd	r25, Y+5	; 0x05
    281e:	83 30       	cpi	r24, 0x03	; 3
    2820:	91 05       	cpc	r25, r1
    2822:	b9 f1       	breq	.+110    	; 0x2892 <DIO_getPinValueWithoutPointer+0xd0>
    2824:	47 c0       	rjmp	.+142    	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    2826:	e9 e3       	ldi	r30, 0x39	; 57
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a9 01       	movw	r20, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_getPinValueWithoutPointer+0x7c>
    283a:	55 95       	asr	r21
    283c:	47 95       	ror	r20
    283e:	8a 95       	dec	r24
    2840:	e2 f7       	brpl	.-8      	; 0x283a <DIO_getPinValueWithoutPointer+0x78>
    2842:	ca 01       	movw	r24, r20
    2844:	81 70       	andi	r24, 0x01	; 1
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	35 c0       	rjmp	.+106    	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    284a:	e6 e3       	ldi	r30, 0x36	; 54
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a9 01       	movw	r20, r18
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <DIO_getPinValueWithoutPointer+0xa0>
    285e:	55 95       	asr	r21
    2860:	47 95       	ror	r20
    2862:	8a 95       	dec	r24
    2864:	e2 f7       	brpl	.-8      	; 0x285e <DIO_getPinValueWithoutPointer+0x9c>
    2866:	ca 01       	movw	r24, r20
    2868:	81 70       	andi	r24, 0x01	; 1
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	23 c0       	rjmp	.+70     	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    286e:	e3 e3       	ldi	r30, 0x33	; 51
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a9 01       	movw	r20, r18
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <DIO_getPinValueWithoutPointer+0xc4>
    2882:	55 95       	asr	r21
    2884:	47 95       	ror	r20
    2886:	8a 95       	dec	r24
    2888:	e2 f7       	brpl	.-8      	; 0x2882 <DIO_getPinValueWithoutPointer+0xc0>
    288a:	ca 01       	movw	r24, r20
    288c:	81 70       	andi	r24, 0x01	; 1
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	11 c0       	rjmp	.+34     	; 0x28b4 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    2892:	e0 e3       	ldi	r30, 0x30	; 48
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	28 2f       	mov	r18, r24
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a9 01       	movw	r20, r18
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <DIO_getPinValueWithoutPointer+0xe8>
    28a6:	55 95       	asr	r21
    28a8:	47 95       	ror	r20
    28aa:	8a 95       	dec	r24
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <DIO_getPinValueWithoutPointer+0xe4>
    28ae:	ca 01       	movw	r24, r20
    28b0:	81 70       	andi	r24, 0x01	; 1
    28b2:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	2d 97       	sbiw	r28, 0x0d	; 13
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	3c 87       	std	Y+12, r19	; 0x0c
    28e6:	2b 87       	std	Y+11, r18	; 0x0b
    28e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	71 f1       	breq	.+92     	; 0x294e <DIO_u8SetPortDirection+0x88>
    28f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    28f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	2c f4       	brge	.+10     	; 0x2906 <DIO_u8SetPortDirection+0x40>
    28fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    28fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f0       	breq	.+26     	; 0x291e <DIO_u8SetPortDirection+0x58>
    2904:	6b c0       	rjmp	.+214    	; 0x29dc <DIO_u8SetPortDirection+0x116>
    2906:	2b 85       	ldd	r18, Y+11	; 0x0b
    2908:	3c 85       	ldd	r19, Y+12	; 0x0c
    290a:	22 30       	cpi	r18, 0x02	; 2
    290c:	31 05       	cpc	r19, r1
    290e:	b9 f1       	breq	.+110    	; 0x297e <DIO_u8SetPortDirection+0xb8>
    2910:	8b 85       	ldd	r24, Y+11	; 0x0b
    2912:	9c 85       	ldd	r25, Y+12	; 0x0c
    2914:	83 30       	cpi	r24, 0x03	; 3
    2916:	91 05       	cpc	r25, r1
    2918:	09 f4       	brne	.+2      	; 0x291c <DIO_u8SetPortDirection+0x56>
    291a:	49 c0       	rjmp	.+146    	; 0x29ae <DIO_u8SetPortDirection+0xe8>
    291c:	5f c0       	rjmp	.+190    	; 0x29dc <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	3a 87       	std	Y+10, r19	; 0x0a
    2926:	29 87       	std	Y+9, r18	; 0x09
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	31 f0       	breq	.+12     	; 0x293c <DIO_u8SetPortDirection+0x76>
    2930:	29 85       	ldd	r18, Y+9	; 0x09
    2932:	3a 85       	ldd	r19, Y+10	; 0x0a
    2934:	21 30       	cpi	r18, 0x01	; 1
    2936:	31 05       	cpc	r19, r1
    2938:	29 f0       	breq	.+10     	; 0x2944 <DIO_u8SetPortDirection+0x7e>
    293a:	50 c0       	rjmp	.+160    	; 0x29dc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    293c:	ea e3       	ldi	r30, 0x3A	; 58
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	10 82       	st	Z, r1
    2942:	4c c0       	rjmp	.+152    	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    2944:	ea e3       	ldi	r30, 0x3A	; 58
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	80 83       	st	Z, r24
    294c:	47 c0       	rjmp	.+142    	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	38 87       	std	Y+8, r19	; 0x08
    2956:	2f 83       	std	Y+7, r18	; 0x07
    2958:	8f 81       	ldd	r24, Y+7	; 0x07
    295a:	98 85       	ldd	r25, Y+8	; 0x08
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	31 f0       	breq	.+12     	; 0x296c <DIO_u8SetPortDirection+0xa6>
    2960:	2f 81       	ldd	r18, Y+7	; 0x07
    2962:	38 85       	ldd	r19, Y+8	; 0x08
    2964:	21 30       	cpi	r18, 0x01	; 1
    2966:	31 05       	cpc	r19, r1
    2968:	29 f0       	breq	.+10     	; 0x2974 <DIO_u8SetPortDirection+0xae>
    296a:	38 c0       	rjmp	.+112    	; 0x29dc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    296c:	e7 e3       	ldi	r30, 0x37	; 55
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	10 82       	st	Z, r1
    2972:	34 c0       	rjmp	.+104    	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    2974:	e7 e3       	ldi	r30, 0x37	; 55
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	80 83       	st	Z, r24
    297c:	2f c0       	rjmp	.+94     	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	28 2f       	mov	r18, r24
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	3e 83       	std	Y+6, r19	; 0x06
    2986:	2d 83       	std	Y+5, r18	; 0x05
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	31 f0       	breq	.+12     	; 0x299c <DIO_u8SetPortDirection+0xd6>
    2990:	2d 81       	ldd	r18, Y+5	; 0x05
    2992:	3e 81       	ldd	r19, Y+6	; 0x06
    2994:	21 30       	cpi	r18, 0x01	; 1
    2996:	31 05       	cpc	r19, r1
    2998:	29 f0       	breq	.+10     	; 0x29a4 <DIO_u8SetPortDirection+0xde>
    299a:	20 c0       	rjmp	.+64     	; 0x29dc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    299c:	e4 e3       	ldi	r30, 0x34	; 52
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	10 82       	st	Z, r1
    29a2:	1c c0       	rjmp	.+56     	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    29a4:	e4 e3       	ldi	r30, 0x34	; 52
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	8f ef       	ldi	r24, 0xFF	; 255
    29aa:	80 83       	st	Z, r24
    29ac:	17 c0       	rjmp	.+46     	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	3c 83       	std	Y+4, r19	; 0x04
    29b6:	2b 83       	std	Y+3, r18	; 0x03
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	31 f0       	breq	.+12     	; 0x29cc <DIO_u8SetPortDirection+0x106>
    29c0:	2b 81       	ldd	r18, Y+3	; 0x03
    29c2:	3c 81       	ldd	r19, Y+4	; 0x04
    29c4:	21 30       	cpi	r18, 0x01	; 1
    29c6:	31 05       	cpc	r19, r1
    29c8:	29 f0       	breq	.+10     	; 0x29d4 <DIO_u8SetPortDirection+0x10e>
    29ca:	08 c0       	rjmp	.+16     	; 0x29dc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    29cc:	e1 e3       	ldi	r30, 0x31	; 49
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	10 82       	st	Z, r1
    29d2:	04 c0       	rjmp	.+8      	; 0x29dc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    29d4:	e1 e3       	ldi	r30, 0x31	; 49
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    29dc:	2d 96       	adiw	r28, 0x0d	; 13
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	2d 97       	sbiw	r28, 0x0d	; 13
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    2a04:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	08 f0       	brcs	.+2      	; 0x2a12 <DIO_u8SetPortValue+0x24>
    2a10:	80 c0       	rjmp	.+256    	; 0x2b12 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	3d 87       	std	Y+13, r19	; 0x0d
    2a1a:	2c 87       	std	Y+12, r18	; 0x0c
    2a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	91 05       	cpc	r25, r1
    2a24:	71 f1       	breq	.+92     	; 0x2a82 <DIO_u8SetPortValue+0x94>
    2a26:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a28:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a2a:	22 30       	cpi	r18, 0x02	; 2
    2a2c:	31 05       	cpc	r19, r1
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <DIO_u8SetPortValue+0x4c>
    2a30:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a32:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f0       	breq	.+26     	; 0x2a52 <DIO_u8SetPortValue+0x64>
    2a38:	6d c0       	rjmp	.+218    	; 0x2b14 <DIO_u8SetPortValue+0x126>
    2a3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a3c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a3e:	22 30       	cpi	r18, 0x02	; 2
    2a40:	31 05       	cpc	r19, r1
    2a42:	b9 f1       	breq	.+110    	; 0x2ab2 <DIO_u8SetPortValue+0xc4>
    2a44:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a46:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a48:	83 30       	cpi	r24, 0x03	; 3
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <DIO_u8SetPortValue+0x62>
    2a4e:	49 c0       	rjmp	.+146    	; 0x2ae2 <DIO_u8SetPortValue+0xf4>
    2a50:	61 c0       	rjmp	.+194    	; 0x2b14 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	3b 87       	std	Y+11, r19	; 0x0b
    2a5a:	2a 87       	std	Y+10, r18	; 0x0a
    2a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	31 f0       	breq	.+12     	; 0x2a70 <DIO_u8SetPortValue+0x82>
    2a64:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a66:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a68:	21 30       	cpi	r18, 0x01	; 1
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <DIO_u8SetPortValue+0x8a>
    2a6e:	52 c0       	rjmp	.+164    	; 0x2b14 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    2a70:	eb e3       	ldi	r30, 0x3B	; 59
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	10 82       	st	Z, r1
    2a76:	4e c0       	rjmp	.+156    	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2a78:	eb e3       	ldi	r30, 0x3B	; 59
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	80 83       	st	Z, r24
    2a80:	49 c0       	rjmp	.+146    	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	39 87       	std	Y+9, r19	; 0x09
    2a8a:	28 87       	std	Y+8, r18	; 0x08
    2a8c:	88 85       	ldd	r24, Y+8	; 0x08
    2a8e:	99 85       	ldd	r25, Y+9	; 0x09
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <DIO_u8SetPortValue+0xb2>
    2a94:	28 85       	ldd	r18, Y+8	; 0x08
    2a96:	39 85       	ldd	r19, Y+9	; 0x09
    2a98:	21 30       	cpi	r18, 0x01	; 1
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <DIO_u8SetPortValue+0xba>
    2a9e:	3a c0       	rjmp	.+116    	; 0x2b14 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    2aa0:	e8 e3       	ldi	r30, 0x38	; 56
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	10 82       	st	Z, r1
    2aa6:	36 c0       	rjmp	.+108    	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2aa8:	e8 e3       	ldi	r30, 0x38	; 56
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	80 83       	st	Z, r24
    2ab0:	31 c0       	rjmp	.+98     	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	3f 83       	std	Y+7, r19	; 0x07
    2aba:	2e 83       	std	Y+6, r18	; 0x06
    2abc:	8e 81       	ldd	r24, Y+6	; 0x06
    2abe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	31 f0       	breq	.+12     	; 0x2ad0 <DIO_u8SetPortValue+0xe2>
    2ac4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ac6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ac8:	21 30       	cpi	r18, 0x01	; 1
    2aca:	31 05       	cpc	r19, r1
    2acc:	29 f0       	breq	.+10     	; 0x2ad8 <DIO_u8SetPortValue+0xea>
    2ace:	22 c0       	rjmp	.+68     	; 0x2b14 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    2ad0:	e5 e3       	ldi	r30, 0x35	; 53
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	10 82       	st	Z, r1
    2ad6:	1e c0       	rjmp	.+60     	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2ad8:	e5 e3       	ldi	r30, 0x35	; 53
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	8f ef       	ldi	r24, 0xFF	; 255
    2ade:	80 83       	st	Z, r24
    2ae0:	19 c0       	rjmp	.+50     	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	3d 83       	std	Y+5, r19	; 0x05
    2aea:	2c 83       	std	Y+4, r18	; 0x04
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	31 f0       	breq	.+12     	; 0x2b00 <DIO_u8SetPortValue+0x112>
    2af4:	2c 81       	ldd	r18, Y+4	; 0x04
    2af6:	3d 81       	ldd	r19, Y+5	; 0x05
    2af8:	21 30       	cpi	r18, 0x01	; 1
    2afa:	31 05       	cpc	r19, r1
    2afc:	29 f0       	breq	.+10     	; 0x2b08 <DIO_u8SetPortValue+0x11a>
    2afe:	0a c0       	rjmp	.+20     	; 0x2b14 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    2b00:	e2 e3       	ldi	r30, 0x32	; 50
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	10 82       	st	Z, r1
    2b06:	06 c0       	rjmp	.+12     	; 0x2b14 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    2b08:	e2 e3       	ldi	r30, 0x32	; 50
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	80 83       	st	Z, r24
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2b12:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b16:	2d 96       	adiw	r28, 0x0d	; 13
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <DIO_u8GetPortValue+0x6>
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <DIO_u8GetPortValue+0x8>
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <DIO_u8GetPortValue+0xa>
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	8a 83       	std	Y+2, r24	; 0x02
    2b38:	7c 83       	std	Y+4, r23	; 0x04
    2b3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	84 30       	cpi	r24, 0x04	; 4
    2b44:	08 f0       	brcs	.+2      	; 0x2b48 <DIO_u8GetPortValue+0x20>
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <DIO_u8GetPortValue+0x9e>
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	d9 f1       	breq	.+118    	; 0x2bc6 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	3e 83       	std	Y+6, r19	; 0x06
    2b58:	2d 83       	std	Y+5, r18	; 0x05
    2b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	91 05       	cpc	r25, r1
    2b62:	e1 f0       	breq	.+56     	; 0x2b9c <DIO_u8GetPortValue+0x74>
    2b64:	2d 81       	ldd	r18, Y+5	; 0x05
    2b66:	3e 81       	ldd	r19, Y+6	; 0x06
    2b68:	22 30       	cpi	r18, 0x02	; 2
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	2c f4       	brge	.+10     	; 0x2b78 <DIO_u8GetPortValue+0x50>
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	61 f0       	breq	.+24     	; 0x2b8e <DIO_u8GetPortValue+0x66>
    2b76:	28 c0       	rjmp	.+80     	; 0x2bc8 <DIO_u8GetPortValue+0xa0>
    2b78:	2d 81       	ldd	r18, Y+5	; 0x05
    2b7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b7c:	22 30       	cpi	r18, 0x02	; 2
    2b7e:	31 05       	cpc	r19, r1
    2b80:	a1 f0       	breq	.+40     	; 0x2baa <DIO_u8GetPortValue+0x82>
    2b82:	8d 81       	ldd	r24, Y+5	; 0x05
    2b84:	9e 81       	ldd	r25, Y+6	; 0x06
    2b86:	83 30       	cpi	r24, 0x03	; 3
    2b88:	91 05       	cpc	r25, r1
    2b8a:	b1 f0       	breq	.+44     	; 0x2bb8 <DIO_u8GetPortValue+0x90>
    2b8c:	1d c0       	rjmp	.+58     	; 0x2bc8 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2b8e:	e9 e3       	ldi	r30, 0x39	; 57
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	eb 81       	ldd	r30, Y+3	; 0x03
    2b96:	fc 81       	ldd	r31, Y+4	; 0x04
    2b98:	80 83       	st	Z, r24
    2b9a:	16 c0       	rjmp	.+44     	; 0x2bc8 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2b9c:	e6 e3       	ldi	r30, 0x36	; 54
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba6:	80 83       	st	Z, r24
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2baa:	e3 e3       	ldi	r30, 0x33	; 51
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb4:	80 83       	st	Z, r24
    2bb6:	08 c0       	rjmp	.+16     	; 0x2bc8 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2bb8:	e0 e3       	ldi	r30, 0x30	; 48
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc2:	80 83       	st	Z, r24
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2bc6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bca:	26 96       	adiw	r28, 0x06	; 6
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2be4:	a7 e2       	ldi	r26, 0x27	; 39
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e7 e2       	ldi	r30, 0x27	; 39
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	8f 77       	andi	r24, 0x7F	; 127
    2bf0:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2bf2:	a7 e2       	ldi	r26, 0x27	; 39
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e7 e2       	ldi	r30, 0x27	; 39
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	80 64       	ori	r24, 0x40	; 64
    2bfe:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2c00:	a7 e2       	ldi	r26, 0x27	; 39
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e7 e2       	ldi	r30, 0x27	; 39
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	8f 7d       	andi	r24, 0xDF	; 223
    2c0c:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2c0e:	a6 e2       	ldi	r26, 0x26	; 38
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e6 e2       	ldi	r30, 0x26	; 38
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	8f 7d       	andi	r24, 0xDF	; 223
    2c1a:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2c1c:	a6 e2       	ldi	r26, 0x26	; 38
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e6 e2       	ldi	r30, 0x26	; 38
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	84 60       	ori	r24, 0x04	; 4
    2c28:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2c2a:	a6 e2       	ldi	r26, 0x26	; 38
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e6 e2       	ldi	r30, 0x26	; 38
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	82 60       	ori	r24, 0x02	; 2
    2c36:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2c38:	a6 e2       	ldi	r26, 0x26	; 38
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e6 e2       	ldi	r30, 0x26	; 38
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	8e 7f       	andi	r24, 0xFE	; 254
    2c44:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2c46:	a6 e2       	ldi	r26, 0x26	; 38
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e6 e2       	ldi	r30, 0x26	; 38
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	80 68       	ori	r24, 0x80	; 128
    2c52:	8c 93       	st	X, r24

}
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	28 97       	sbiw	r28, 0x08	; 8
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	8e 83       	std	Y+6, r24	; 0x06
    2c70:	78 87       	std	Y+8, r23	; 0x08
    2c72:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2c78:	19 82       	std	Y+1, r1	; 0x01
    2c7a:	1a 82       	std	Y+2, r1	; 0x02
    2c7c:	1b 82       	std	Y+3, r1	; 0x03
    2c7e:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	80 32       	cpi	r24, 0x20	; 32
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2c86:	5b c0       	rjmp	.+182    	; 0x2d3e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2c88:	8f 81       	ldd	r24, Y+7	; 0x07
    2c8a:	98 85       	ldd	r25, Y+8	; 0x08
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2c90:	56 c0       	rjmp	.+172    	; 0x2d3e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2c92:	a7 e2       	ldi	r26, 0x27	; 39
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e7 e2       	ldi	r30, 0x27	; 39
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	80 7e       	andi	r24, 0xE0	; 224
    2c9e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2ca0:	a7 e2       	ldi	r26, 0x27	; 39
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e7 e2       	ldi	r30, 0x27	; 39
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	90 81       	ld	r25, Z
    2caa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cac:	89 2b       	or	r24, r25
    2cae:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2cb0:	a6 e2       	ldi	r26, 0x26	; 38
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e6 e2       	ldi	r30, 0x26	; 38
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	80 64       	ori	r24, 0x40	; 64
    2cbc:	8c 93       	st	X, r24
    2cbe:	0b c0       	rjmp	.+22     	; 0x2cd6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	ab 81       	ldd	r26, Y+3	; 0x03
    2cc6:	bc 81       	ldd	r27, Y+4	; 0x04
    2cc8:	01 96       	adiw	r24, 0x01	; 1
    2cca:	a1 1d       	adc	r26, r1
    2ccc:	b1 1d       	adc	r27, r1
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	ab 83       	std	Y+3, r26	; 0x03
    2cd4:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2cd6:	e6 e2       	ldi	r30, 0x26	; 38
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	82 95       	swap	r24
    2cde:	8f 70       	andi	r24, 0x0F	; 15
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	81 70       	andi	r24, 0x01	; 1
    2ce6:	90 70       	andi	r25, 0x00	; 0
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	61 f4       	brne	.+24     	; 0x2d04 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	ab 81       	ldd	r26, Y+3	; 0x03
    2cf2:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf4:	80 35       	cpi	r24, 0x50	; 80
    2cf6:	23 ec       	ldi	r18, 0xC3	; 195
    2cf8:	92 07       	cpc	r25, r18
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	a2 07       	cpc	r26, r18
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	b2 07       	cpc	r27, r18
    2d02:	f0 f2       	brcs	.-68     	; 0x2cc0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2d04:	e6 e2       	ldi	r30, 0x26	; 38
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	82 95       	swap	r24
    2d0c:	8f 70       	andi	r24, 0x0F	; 15
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	81 70       	andi	r24, 0x01	; 1
    2d14:	90 70       	andi	r25, 0x00	; 0
    2d16:	88 23       	and	r24, r24
    2d18:	81 f0       	breq	.+32     	; 0x2d3a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2d1a:	a6 e2       	ldi	r26, 0x26	; 38
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e6 e2       	ldi	r30, 0x26	; 38
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	80 61       	ori	r24, 0x10	; 16
    2d26:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2d28:	e4 e2       	ldi	r30, 0x24	; 36
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	ef 81       	ldd	r30, Y+7	; 0x07
    2d32:	f8 85       	ldd	r31, Y+8	; 0x08
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	03 c0       	rjmp	.+6      	; 0x2d40 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2d3a:	1d 82       	std	Y+5, r1	; 0x05
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2d3e:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d42:	28 96       	adiw	r28, 0x08	; 8
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	8a 83       	std	Y+2, r24	; 0x02
    2d62:	7c 83       	std	Y+4, r23	; 0x04
    2d64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	80 32       	cpi	r24, 0x20	; 32
    2d6e:	78 f5       	brcc	.+94     	; 0x2dce <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	59 f1       	breq	.+86     	; 0x2dce <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2d78:	80 91 a0 01 	lds	r24, 0x01A0
    2d7c:	88 23       	and	r24, r24
    2d7e:	39 f5       	brne	.+78     	; 0x2dce <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	80 93 a0 01 	sts	0x01A0, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8a:	90 93 9f 01 	sts	0x019F, r25
    2d8e:	80 93 9e 01 	sts	0x019E, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2d92:	a6 e2       	ldi	r26, 0x26	; 38
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e6 e2       	ldi	r30, 0x26	; 38
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 60       	ori	r24, 0x08	; 8
    2d9e:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2da0:	a7 e2       	ldi	r26, 0x27	; 39
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e7 e2       	ldi	r30, 0x27	; 39
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	80 7e       	andi	r24, 0xE0	; 224
    2dac:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2dae:	a7 e2       	ldi	r26, 0x27	; 39
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e7 e2       	ldi	r30, 0x27	; 39
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	90 81       	ld	r25, Z
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	89 2b       	or	r24, r25
    2dbc:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2dbe:	a6 e2       	ldi	r26, 0x26	; 38
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e6 e2       	ldi	r30, 0x26	; 38
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 64       	ori	r24, 0x40	; 64
    2dca:	8c 93       	st	X, r24
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2dce:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <ADC_u8GetADCRegValue+0x6>
    2de6:	0f 92       	push	r0
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	9b 83       	std	Y+3, r25	; 0x03
    2dee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	9b 81       	ldd	r25, Y+3	; 0x03
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	39 f0       	breq	.+14     	; 0x2e0a <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2dfc:	e4 e2       	ldi	r30, 0x24	; 36
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	9b 83       	std	Y+3, r25	; 0x03
    2e06:	8a 83       	std	Y+2, r24	; 0x02
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e0a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2e1a:	1f 92       	push	r1
    2e1c:	0f 92       	push	r0
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	0f 92       	push	r0
    2e22:	11 24       	eor	r1, r1
    2e24:	2f 93       	push	r18
    2e26:	3f 93       	push	r19
    2e28:	4f 93       	push	r20
    2e2a:	5f 93       	push	r21
    2e2c:	6f 93       	push	r22
    2e2e:	7f 93       	push	r23
    2e30:	8f 93       	push	r24
    2e32:	9f 93       	push	r25
    2e34:	af 93       	push	r26
    2e36:	bf 93       	push	r27
    2e38:	ef 93       	push	r30
    2e3a:	ff 93       	push	r31
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2e44:	80 91 9e 01 	lds	r24, 0x019E
    2e48:	90 91 9f 01 	lds	r25, 0x019F
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	99 f0       	breq	.+38     	; 0x2e76 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2e50:	10 92 a0 01 	sts	0x01A0, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2e54:	a6 e2       	ldi	r26, 0x26	; 38
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e6 e2       	ldi	r30, 0x26	; 38
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	87 7f       	andi	r24, 0xF7	; 247
    2e60:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2e62:	20 91 9e 01 	lds	r18, 0x019E
    2e66:	30 91 9f 01 	lds	r19, 0x019F
    2e6a:	e4 e2       	ldi	r30, 0x24	; 36
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	f9 01       	movw	r30, r18
    2e74:	09 95       	icall
	}
}
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	ff 91       	pop	r31
    2e7c:	ef 91       	pop	r30
    2e7e:	bf 91       	pop	r27
    2e80:	af 91       	pop	r26
    2e82:	9f 91       	pop	r25
    2e84:	8f 91       	pop	r24
    2e86:	7f 91       	pop	r23
    2e88:	6f 91       	pop	r22
    2e8a:	5f 91       	pop	r21
    2e8c:	4f 91       	pop	r20
    2e8e:	3f 91       	pop	r19
    2e90:	2f 91       	pop	r18
    2e92:	0f 90       	pop	r0
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	0f 90       	pop	r0
    2e98:	1f 90       	pop	r1
    2e9a:	18 95       	reti

00002e9c <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2ea4:	82 e0       	ldi	r24, 0x02	; 2
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2eae:	82 e0       	ldi	r24, 0x02	; 2
    2eb0:	61 e0       	ldi	r22, 0x01	; 1
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	62 e0       	ldi	r22, 0x02	; 2
    2ebc:	41 e0       	ldi	r20, 0x01	; 1
    2ebe:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	63 e0       	ldi	r22, 0x03	; 3
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
}
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <ActivatePins1+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <ActivatePins1+0x8>
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	6a 83       	std	Y+2, r22	; 0x02
    2ee2:	4b 83       	std	Y+3, r20	; 0x03
    2ee4:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	49 81       	ldd	r20, Y+1	; 0x01
    2eec:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ef6:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	62 e0       	ldi	r22, 0x02	; 2
    2efe:	4b 81       	ldd	r20, Y+3	; 0x03
    2f00:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	63 e0       	ldi	r22, 0x03	; 3
    2f08:	4c 81       	ldd	r20, Y+4	; 0x04
    2f0a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
}
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <ActivatePins2+0x6>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <ActivatePins2+0x8>
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	6a 83       	std	Y+2, r22	; 0x02
    2f2c:	4b 83       	std	Y+3, r20	; 0x03
    2f2e:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	63 e0       	ldi	r22, 0x03	; 3
    2f34:	4c 81       	ldd	r20, Y+4	; 0x04
    2f36:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	62 e0       	ldi	r22, 0x02	; 2
    2f3e:	4b 81       	ldd	r20, Y+3	; 0x03
    2f40:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	61 e0       	ldi	r22, 0x01	; 1
    2f48:	4a 81       	ldd	r20, Y+2	; 0x02
    2f4a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	49 81       	ldd	r20, Y+1	; 0x01
    2f54:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
}
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	29 97       	sbiw	r28, 0x09	; 9
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2f80:	29 81       	ldd	r18, Y+1	; 0x01
    2f82:	3a 81       	ldd	r19, Y+2	; 0x02
    2f84:	39 87       	std	Y+9, r19	; 0x09
    2f86:	28 87       	std	Y+8, r18	; 0x08
    2f88:	88 85       	ldd	r24, Y+8	; 0x08
    2f8a:	99 85       	ldd	r25, Y+9	; 0x09
    2f8c:	8a 35       	cpi	r24, 0x5A	; 90
    2f8e:	91 05       	cpc	r25, r1
    2f90:	31 f0       	breq	.+12     	; 0x2f9e <SelectStepAngle+0x38>
    2f92:	28 85       	ldd	r18, Y+8	; 0x08
    2f94:	39 85       	ldd	r19, Y+9	; 0x09
    2f96:	24 3b       	cpi	r18, 0xB4	; 180
    2f98:	31 05       	cpc	r19, r1
    2f9a:	f1 f0       	breq	.+60     	; 0x2fd8 <SelectStepAngle+0x72>
    2f9c:	39 c0       	rjmp	.+114    	; 0x3010 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	3f 83       	std	Y+7, r19	; 0x07
    2fa6:	2e 83       	std	Y+6, r18	; 0x06
    2fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    2faa:	9f 81       	ldd	r25, Y+7	; 0x07
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	31 f0       	breq	.+12     	; 0x2fbc <SelectStepAngle+0x56>
    2fb0:	2e 81       	ldd	r18, Y+6	; 0x06
    2fb2:	3f 81       	ldd	r19, Y+7	; 0x07
    2fb4:	21 30       	cpi	r18, 0x01	; 1
    2fb6:	31 05       	cpc	r19, r1
    2fb8:	41 f0       	breq	.+16     	; 0x2fca <SelectStepAngle+0x64>
    2fba:	2a c0       	rjmp	.+84     	; 0x3010 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	21 e0       	ldi	r18, 0x01	; 1
    2fc4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <ActivatePins1>
    2fc8:	23 c0       	rjmp	.+70     	; 0x3010 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	61 e0       	ldi	r22, 0x01	; 1
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ActivatePins2>
    2fd6:	1c c0       	rjmp	.+56     	; 0x3010 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	3d 83       	std	Y+5, r19	; 0x05
    2fe0:	2c 83       	std	Y+4, r18	; 0x04
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	31 f0       	breq	.+12     	; 0x2ff6 <SelectStepAngle+0x90>
    2fea:	2c 81       	ldd	r18, Y+4	; 0x04
    2fec:	3d 81       	ldd	r19, Y+5	; 0x05
    2fee:	21 30       	cpi	r18, 0x01	; 1
    2ff0:	31 05       	cpc	r19, r1
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <SelectStepAngle+0x9e>
    2ff4:	0d c0       	rjmp	.+26     	; 0x3010 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ActivatePins2>
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	61 e0       	ldi	r22, 0x01	; 1
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <ActivatePins1>
						break;
				}
				break;
	}
}
    3010:	29 96       	adiw	r28, 0x09	; 9
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"

#define TIMERS_u16_OCR1A_REG			*((volatile u16 *)0x4A)

void Servo_Init(){
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    302a:	0e 94 df 08 	call	0x11be	; 0x11be <TIMERS_voidTimer1Init>
}
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	00 d0       	rcall	.+0      	; 0x303a <Servo_SetAngle+0x6>
    303a:	00 d0       	rcall	.+0      	; 0x303c <Servo_SetAngle+0x8>
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCR1AValue = (Servo_Angle * 11) + 3005;
    3044:	4b 81       	ldd	r20, Y+3	; 0x03
    3046:	5c 81       	ldd	r21, Y+4	; 0x04
    3048:	ca 01       	movw	r24, r20
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	9c 01       	movw	r18, r24
    3050:	22 0f       	add	r18, r18
    3052:	33 1f       	adc	r19, r19
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	82 0f       	add	r24, r18
    305a:	93 1f       	adc	r25, r19
    305c:	84 0f       	add	r24, r20
    305e:	95 1f       	adc	r25, r21
    3060:	83 54       	subi	r24, 0x43	; 67
    3062:	94 4f       	sbci	r25, 0xF4	; 244
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Local_u16OCR1AValue);
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	0e 94 87 09 	call	0x130e	; 0x130e <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	e9 97       	sbiw	r28, 0x39	; 57
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	64 e0       	ldi	r22, 0x04	; 4
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_setPinValue>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	a0 e8       	ldi	r26, 0x80	; 128
    30aa:	bf e3       	ldi	r27, 0x3F	; 63
    30ac:	8d ab       	std	Y+53, r24	; 0x35
    30ae:	9e ab       	std	Y+54, r25	; 0x36
    30b0:	af ab       	std	Y+55, r26	; 0x37
    30b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b4:	6d a9       	ldd	r22, Y+53	; 0x35
    30b6:	7e a9       	ldd	r23, Y+54	; 0x36
    30b8:	8f a9       	ldd	r24, Y+55	; 0x37
    30ba:	98 ad       	ldd	r25, Y+56	; 0x38
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	4a e7       	ldi	r20, 0x7A	; 122
    30c2:	55 e4       	ldi	r21, 0x45	; 69
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	89 ab       	std	Y+49, r24	; 0x31
    30ce:	9a ab       	std	Y+50, r25	; 0x32
    30d0:	ab ab       	std	Y+51, r26	; 0x33
    30d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30d4:	69 a9       	ldd	r22, Y+49	; 0x31
    30d6:	7a a9       	ldd	r23, Y+50	; 0x32
    30d8:	8b a9       	ldd	r24, Y+51	; 0x33
    30da:	9c a9       	ldd	r25, Y+52	; 0x34
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e8       	ldi	r20, 0x80	; 128
    30e2:	5f e3       	ldi	r21, 0x3F	; 63
    30e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e8:	88 23       	and	r24, r24
    30ea:	2c f4       	brge	.+10     	; 0x30f6 <LCD_sendCommand+0x78>
		__ticks = 1;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	98 ab       	std	Y+48, r25	; 0x30
    30f2:	8f a7       	std	Y+47, r24	; 0x2f
    30f4:	3f c0       	rjmp	.+126    	; 0x3174 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    30f6:	69 a9       	ldd	r22, Y+49	; 0x31
    30f8:	7a a9       	ldd	r23, Y+50	; 0x32
    30fa:	8b a9       	ldd	r24, Y+51	; 0x33
    30fc:	9c a9       	ldd	r25, Y+52	; 0x34
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	3f ef       	ldi	r19, 0xFF	; 255
    3102:	4f e7       	ldi	r20, 0x7F	; 127
    3104:	57 e4       	ldi	r21, 0x47	; 71
    3106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    310a:	18 16       	cp	r1, r24
    310c:	4c f5       	brge	.+82     	; 0x3160 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310e:	6d a9       	ldd	r22, Y+53	; 0x35
    3110:	7e a9       	ldd	r23, Y+54	; 0x36
    3112:	8f a9       	ldd	r24, Y+55	; 0x37
    3114:	98 ad       	ldd	r25, Y+56	; 0x38
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e2       	ldi	r20, 0x20	; 32
    311c:	51 e4       	ldi	r21, 0x41	; 65
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	98 ab       	std	Y+48, r25	; 0x30
    3134:	8f a7       	std	Y+47, r24	; 0x2f
    3136:	0f c0       	rjmp	.+30     	; 0x3156 <LCD_sendCommand+0xd8>
    3138:	80 e9       	ldi	r24, 0x90	; 144
    313a:	91 e0       	ldi	r25, 0x01	; 1
    313c:	9e a7       	std	Y+46, r25	; 0x2e
    313e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3140:	8d a5       	ldd	r24, Y+45	; 0x2d
    3142:	9e a5       	ldd	r25, Y+46	; 0x2e
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <LCD_sendCommand+0xc6>
    3148:	9e a7       	std	Y+46, r25	; 0x2e
    314a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314c:	8f a5       	ldd	r24, Y+47	; 0x2f
    314e:	98 a9       	ldd	r25, Y+48	; 0x30
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	98 ab       	std	Y+48, r25	; 0x30
    3154:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3156:	8f a5       	ldd	r24, Y+47	; 0x2f
    3158:	98 a9       	ldd	r25, Y+48	; 0x30
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	69 f7       	brne	.-38     	; 0x3138 <LCD_sendCommand+0xba>
    315e:	14 c0       	rjmp	.+40     	; 0x3188 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3160:	69 a9       	ldd	r22, Y+49	; 0x31
    3162:	7a a9       	ldd	r23, Y+50	; 0x32
    3164:	8b a9       	ldd	r24, Y+51	; 0x33
    3166:	9c a9       	ldd	r25, Y+52	; 0x34
    3168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	98 ab       	std	Y+48, r25	; 0x30
    3172:	8f a7       	std	Y+47, r24	; 0x2f
    3174:	8f a5       	ldd	r24, Y+47	; 0x2f
    3176:	98 a9       	ldd	r25, Y+48	; 0x30
    3178:	9c a7       	std	Y+44, r25	; 0x2c
    317a:	8b a7       	std	Y+43, r24	; 0x2b
    317c:	8b a5       	ldd	r24, Y+43	; 0x2b
    317e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <LCD_sendCommand+0x102>
    3184:	9c a7       	std	Y+44, r25	; 0x2c
    3186:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3188:	83 e0       	ldi	r24, 0x03	; 3
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	65 e0       	ldi	r22, 0x05	; 5
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	41 e0       	ldi	r20, 0x01	; 1
    3192:	50 e0       	ldi	r21, 0x00	; 0
    3194:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_setPinValue>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 e8       	ldi	r26, 0x80	; 128
    319e:	bf e3       	ldi	r27, 0x3F	; 63
    31a0:	8f a3       	std	Y+39, r24	; 0x27
    31a2:	98 a7       	std	Y+40, r25	; 0x28
    31a4:	a9 a7       	std	Y+41, r26	; 0x29
    31a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a8:	6f a1       	ldd	r22, Y+39	; 0x27
    31aa:	78 a5       	ldd	r23, Y+40	; 0x28
    31ac:	89 a5       	ldd	r24, Y+41	; 0x29
    31ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	4a e7       	ldi	r20, 0x7A	; 122
    31b6:	55 e4       	ldi	r21, 0x45	; 69
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	8b a3       	std	Y+35, r24	; 0x23
    31c2:	9c a3       	std	Y+36, r25	; 0x24
    31c4:	ad a3       	std	Y+37, r26	; 0x25
    31c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31c8:	6b a1       	ldd	r22, Y+35	; 0x23
    31ca:	7c a1       	ldd	r23, Y+36	; 0x24
    31cc:	8d a1       	ldd	r24, Y+37	; 0x25
    31ce:	9e a1       	ldd	r25, Y+38	; 0x26
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31dc:	88 23       	and	r24, r24
    31de:	2c f4       	brge	.+10     	; 0x31ea <LCD_sendCommand+0x16c>
		__ticks = 1;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9a a3       	std	Y+34, r25	; 0x22
    31e6:	89 a3       	std	Y+33, r24	; 0x21
    31e8:	3f c0       	rjmp	.+126    	; 0x3268 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    31ea:	6b a1       	ldd	r22, Y+35	; 0x23
    31ec:	7c a1       	ldd	r23, Y+36	; 0x24
    31ee:	8d a1       	ldd	r24, Y+37	; 0x25
    31f0:	9e a1       	ldd	r25, Y+38	; 0x26
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	3f ef       	ldi	r19, 0xFF	; 255
    31f6:	4f e7       	ldi	r20, 0x7F	; 127
    31f8:	57 e4       	ldi	r21, 0x47	; 71
    31fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	4c f5       	brge	.+82     	; 0x3254 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3202:	6f a1       	ldd	r22, Y+39	; 0x27
    3204:	78 a5       	ldd	r23, Y+40	; 0x28
    3206:	89 a5       	ldd	r24, Y+41	; 0x29
    3208:	9a a5       	ldd	r25, Y+42	; 0x2a
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	9a a3       	std	Y+34, r25	; 0x22
    3228:	89 a3       	std	Y+33, r24	; 0x21
    322a:	0f c0       	rjmp	.+30     	; 0x324a <LCD_sendCommand+0x1cc>
    322c:	80 e9       	ldi	r24, 0x90	; 144
    322e:	91 e0       	ldi	r25, 0x01	; 1
    3230:	98 a3       	std	Y+32, r25	; 0x20
    3232:	8f 8f       	std	Y+31, r24	; 0x1f
    3234:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3236:	98 a1       	ldd	r25, Y+32	; 0x20
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <LCD_sendCommand+0x1ba>
    323c:	98 a3       	std	Y+32, r25	; 0x20
    323e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3240:	89 a1       	ldd	r24, Y+33	; 0x21
    3242:	9a a1       	ldd	r25, Y+34	; 0x22
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	9a a3       	std	Y+34, r25	; 0x22
    3248:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324a:	89 a1       	ldd	r24, Y+33	; 0x21
    324c:	9a a1       	ldd	r25, Y+34	; 0x22
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	69 f7       	brne	.-38     	; 0x322c <LCD_sendCommand+0x1ae>
    3252:	14 c0       	rjmp	.+40     	; 0x327c <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	6b a1       	ldd	r22, Y+35	; 0x23
    3256:	7c a1       	ldd	r23, Y+36	; 0x24
    3258:	8d a1       	ldd	r24, Y+37	; 0x25
    325a:	9e a1       	ldd	r25, Y+38	; 0x26
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9a a3       	std	Y+34, r25	; 0x22
    3266:	89 a3       	std	Y+33, r24	; 0x21
    3268:	89 a1       	ldd	r24, Y+33	; 0x21
    326a:	9a a1       	ldd	r25, Y+34	; 0x22
    326c:	9e 8f       	std	Y+30, r25	; 0x1e
    326e:	8d 8f       	std	Y+29, r24	; 0x1d
    3270:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3272:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <LCD_sendCommand+0x1f6>
    3278:	9e 8f       	std	Y+30, r25	; 0x1e
    327a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    327c:	89 ad       	ldd	r24, Y+57	; 0x39
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	82 e0       	ldi	r24, 0x02	; 2
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	b9 01       	movw	r22, r18
    3288:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_setPortValue>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	a0 e8       	ldi	r26, 0x80	; 128
    3292:	bf e3       	ldi	r27, 0x3F	; 63
    3294:	89 8f       	std	Y+25, r24	; 0x19
    3296:	9a 8f       	std	Y+26, r25	; 0x1a
    3298:	ab 8f       	std	Y+27, r26	; 0x1b
    329a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329c:	69 8d       	ldd	r22, Y+25	; 0x19
    329e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a e7       	ldi	r20, 0x7A	; 122
    32aa:	55 e4       	ldi	r21, 0x45	; 69
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	8d 8b       	std	Y+21, r24	; 0x15
    32b6:	9e 8b       	std	Y+22, r25	; 0x16
    32b8:	af 8b       	std	Y+23, r26	; 0x17
    32ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32bc:	6d 89       	ldd	r22, Y+21	; 0x15
    32be:	7e 89       	ldd	r23, Y+22	; 0x16
    32c0:	8f 89       	ldd	r24, Y+23	; 0x17
    32c2:	98 8d       	ldd	r25, Y+24	; 0x18
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e8       	ldi	r20, 0x80	; 128
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d0:	88 23       	and	r24, r24
    32d2:	2c f4       	brge	.+10     	; 0x32de <LCD_sendCommand+0x260>
		__ticks = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9c 8b       	std	Y+20, r25	; 0x14
    32da:	8b 8b       	std	Y+19, r24	; 0x13
    32dc:	3f c0       	rjmp	.+126    	; 0x335c <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    32de:	6d 89       	ldd	r22, Y+21	; 0x15
    32e0:	7e 89       	ldd	r23, Y+22	; 0x16
    32e2:	8f 89       	ldd	r24, Y+23	; 0x17
    32e4:	98 8d       	ldd	r25, Y+24	; 0x18
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	3f ef       	ldi	r19, 0xFF	; 255
    32ea:	4f e7       	ldi	r20, 0x7F	; 127
    32ec:	57 e4       	ldi	r21, 0x47	; 71
    32ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f2:	18 16       	cp	r1, r24
    32f4:	4c f5       	brge	.+82     	; 0x3348 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f6:	69 8d       	ldd	r22, Y+25	; 0x19
    32f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e2       	ldi	r20, 0x20	; 32
    3304:	51 e4       	ldi	r21, 0x41	; 65
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9c 8b       	std	Y+20, r25	; 0x14
    331c:	8b 8b       	std	Y+19, r24	; 0x13
    331e:	0f c0       	rjmp	.+30     	; 0x333e <LCD_sendCommand+0x2c0>
    3320:	80 e9       	ldi	r24, 0x90	; 144
    3322:	91 e0       	ldi	r25, 0x01	; 1
    3324:	9a 8b       	std	Y+18, r25	; 0x12
    3326:	89 8b       	std	Y+17, r24	; 0x11
    3328:	89 89       	ldd	r24, Y+17	; 0x11
    332a:	9a 89       	ldd	r25, Y+18	; 0x12
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <LCD_sendCommand+0x2ae>
    3330:	9a 8b       	std	Y+18, r25	; 0x12
    3332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3334:	8b 89       	ldd	r24, Y+19	; 0x13
    3336:	9c 89       	ldd	r25, Y+20	; 0x14
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	9c 8b       	std	Y+20, r25	; 0x14
    333c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333e:	8b 89       	ldd	r24, Y+19	; 0x13
    3340:	9c 89       	ldd	r25, Y+20	; 0x14
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	69 f7       	brne	.-38     	; 0x3320 <LCD_sendCommand+0x2a2>
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3348:	6d 89       	ldd	r22, Y+21	; 0x15
    334a:	7e 89       	ldd	r23, Y+22	; 0x16
    334c:	8f 89       	ldd	r24, Y+23	; 0x17
    334e:	98 8d       	ldd	r25, Y+24	; 0x18
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9c 8b       	std	Y+20, r25	; 0x14
    335a:	8b 8b       	std	Y+19, r24	; 0x13
    335c:	8b 89       	ldd	r24, Y+19	; 0x13
    335e:	9c 89       	ldd	r25, Y+20	; 0x14
    3360:	98 8b       	std	Y+16, r25	; 0x10
    3362:	8f 87       	std	Y+15, r24	; 0x0f
    3364:	8f 85       	ldd	r24, Y+15	; 0x0f
    3366:	98 89       	ldd	r25, Y+16	; 0x10
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <LCD_sendCommand+0x2ea>
    336c:	98 8b       	std	Y+16, r25	; 0x10
    336e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3370:	83 e0       	ldi	r24, 0x03	; 3
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	65 e0       	ldi	r22, 0x05	; 5
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	40 e0       	ldi	r20, 0x00	; 0
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_setPinValue>
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a0 e8       	ldi	r26, 0x80	; 128
    3386:	bf e3       	ldi	r27, 0x3F	; 63
    3388:	8b 87       	std	Y+11, r24	; 0x0b
    338a:	9c 87       	std	Y+12, r25	; 0x0c
    338c:	ad 87       	std	Y+13, r26	; 0x0d
    338e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3390:	6b 85       	ldd	r22, Y+11	; 0x0b
    3392:	7c 85       	ldd	r23, Y+12	; 0x0c
    3394:	8d 85       	ldd	r24, Y+13	; 0x0d
    3396:	9e 85       	ldd	r25, Y+14	; 0x0e
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	4a e7       	ldi	r20, 0x7A	; 122
    339e:	55 e4       	ldi	r21, 0x45	; 69
    33a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	8f 83       	std	Y+7, r24	; 0x07
    33aa:	98 87       	std	Y+8, r25	; 0x08
    33ac:	a9 87       	std	Y+9, r26	; 0x09
    33ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b0:	6f 81       	ldd	r22, Y+7	; 0x07
    33b2:	78 85       	ldd	r23, Y+8	; 0x08
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e8       	ldi	r20, 0x80	; 128
    33be:	5f e3       	ldi	r21, 0x3F	; 63
    33c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	2c f4       	brge	.+10     	; 0x33d2 <LCD_sendCommand+0x354>
		__ticks = 1;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
    33d0:	3f c0       	rjmp	.+126    	; 0x3450 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	3f ef       	ldi	r19, 0xFF	; 255
    33de:	4f e7       	ldi	r20, 0x7F	; 127
    33e0:	57 e4       	ldi	r21, 0x47	; 71
    33e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e6:	18 16       	cp	r1, r24
    33e8:	4c f5       	brge	.+82     	; 0x343c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e2       	ldi	r20, 0x20	; 32
    33f8:	51 e4       	ldi	r21, 0x41	; 65
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	0f c0       	rjmp	.+30     	; 0x3432 <LCD_sendCommand+0x3b4>
    3414:	80 e9       	ldi	r24, 0x90	; 144
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	9c 83       	std	Y+4, r25	; 0x04
    341a:	8b 83       	std	Y+3, r24	; 0x03
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <LCD_sendCommand+0x3a2>
    3424:	9c 83       	std	Y+4, r25	; 0x04
    3426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	69 f7       	brne	.-38     	; 0x3414 <LCD_sendCommand+0x396>
    343a:	14 c0       	rjmp	.+40     	; 0x3464 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	9e 81       	ldd	r25, Y+6	; 0x06
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <LCD_sendCommand+0x3de>
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3464:	e9 96       	adiw	r28, 0x39	; 57
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data)
{
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	e9 97       	sbiw	r28, 0x39	; 57
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	64 e0       	ldi	r22, 0x04	; 4
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_setPinValue>
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	a0 e8       	ldi	r26, 0x80	; 128
    34a2:	bf e3       	ldi	r27, 0x3F	; 63
    34a4:	8d ab       	std	Y+53, r24	; 0x35
    34a6:	9e ab       	std	Y+54, r25	; 0x36
    34a8:	af ab       	std	Y+55, r26	; 0x37
    34aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ac:	6d a9       	ldd	r22, Y+53	; 0x35
    34ae:	7e a9       	ldd	r23, Y+54	; 0x36
    34b0:	8f a9       	ldd	r24, Y+55	; 0x37
    34b2:	98 ad       	ldd	r25, Y+56	; 0x38
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	4a e7       	ldi	r20, 0x7A	; 122
    34ba:	55 e4       	ldi	r21, 0x45	; 69
    34bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	89 ab       	std	Y+49, r24	; 0x31
    34c6:	9a ab       	std	Y+50, r25	; 0x32
    34c8:	ab ab       	std	Y+51, r26	; 0x33
    34ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34cc:	69 a9       	ldd	r22, Y+49	; 0x31
    34ce:	7a a9       	ldd	r23, Y+50	; 0x32
    34d0:	8b a9       	ldd	r24, Y+51	; 0x33
    34d2:	9c a9       	ldd	r25, Y+52	; 0x34
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e8       	ldi	r20, 0x80	; 128
    34da:	5f e3       	ldi	r21, 0x3F	; 63
    34dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34e0:	88 23       	and	r24, r24
    34e2:	2c f4       	brge	.+10     	; 0x34ee <LCD_displayCharacter+0x78>
		__ticks = 1;
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	98 ab       	std	Y+48, r25	; 0x30
    34ea:	8f a7       	std	Y+47, r24	; 0x2f
    34ec:	3f c0       	rjmp	.+126    	; 0x356c <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    34ee:	69 a9       	ldd	r22, Y+49	; 0x31
    34f0:	7a a9       	ldd	r23, Y+50	; 0x32
    34f2:	8b a9       	ldd	r24, Y+51	; 0x33
    34f4:	9c a9       	ldd	r25, Y+52	; 0x34
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	3f ef       	ldi	r19, 0xFF	; 255
    34fa:	4f e7       	ldi	r20, 0x7F	; 127
    34fc:	57 e4       	ldi	r21, 0x47	; 71
    34fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3502:	18 16       	cp	r1, r24
    3504:	4c f5       	brge	.+82     	; 0x3558 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3506:	6d a9       	ldd	r22, Y+53	; 0x35
    3508:	7e a9       	ldd	r23, Y+54	; 0x36
    350a:	8f a9       	ldd	r24, Y+55	; 0x37
    350c:	98 ad       	ldd	r25, Y+56	; 0x38
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e2       	ldi	r20, 0x20	; 32
    3514:	51 e4       	ldi	r21, 0x41	; 65
    3516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	bc 01       	movw	r22, r24
    3520:	cd 01       	movw	r24, r26
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	98 ab       	std	Y+48, r25	; 0x30
    352c:	8f a7       	std	Y+47, r24	; 0x2f
    352e:	0f c0       	rjmp	.+30     	; 0x354e <LCD_displayCharacter+0xd8>
    3530:	80 e9       	ldi	r24, 0x90	; 144
    3532:	91 e0       	ldi	r25, 0x01	; 1
    3534:	9e a7       	std	Y+46, r25	; 0x2e
    3536:	8d a7       	std	Y+45, r24	; 0x2d
    3538:	8d a5       	ldd	r24, Y+45	; 0x2d
    353a:	9e a5       	ldd	r25, Y+46	; 0x2e
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <LCD_displayCharacter+0xc6>
    3540:	9e a7       	std	Y+46, r25	; 0x2e
    3542:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3544:	8f a5       	ldd	r24, Y+47	; 0x2f
    3546:	98 a9       	ldd	r25, Y+48	; 0x30
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	98 ab       	std	Y+48, r25	; 0x30
    354c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3550:	98 a9       	ldd	r25, Y+48	; 0x30
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	69 f7       	brne	.-38     	; 0x3530 <LCD_displayCharacter+0xba>
    3556:	14 c0       	rjmp	.+40     	; 0x3580 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3558:	69 a9       	ldd	r22, Y+49	; 0x31
    355a:	7a a9       	ldd	r23, Y+50	; 0x32
    355c:	8b a9       	ldd	r24, Y+51	; 0x33
    355e:	9c a9       	ldd	r25, Y+52	; 0x34
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	98 ab       	std	Y+48, r25	; 0x30
    356a:	8f a7       	std	Y+47, r24	; 0x2f
    356c:	8f a5       	ldd	r24, Y+47	; 0x2f
    356e:	98 a9       	ldd	r25, Y+48	; 0x30
    3570:	9c a7       	std	Y+44, r25	; 0x2c
    3572:	8b a7       	std	Y+43, r24	; 0x2b
    3574:	8b a5       	ldd	r24, Y+43	; 0x2b
    3576:	9c a5       	ldd	r25, Y+44	; 0x2c
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	f1 f7       	brne	.-4      	; 0x3578 <LCD_displayCharacter+0x102>
    357c:	9c a7       	std	Y+44, r25	; 0x2c
    357e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	65 e0       	ldi	r22, 0x05	; 5
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	41 e0       	ldi	r20, 0x01	; 1
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_setPinValue>
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	a0 e8       	ldi	r26, 0x80	; 128
    3596:	bf e3       	ldi	r27, 0x3F	; 63
    3598:	8f a3       	std	Y+39, r24	; 0x27
    359a:	98 a7       	std	Y+40, r25	; 0x28
    359c:	a9 a7       	std	Y+41, r26	; 0x29
    359e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a0:	6f a1       	ldd	r22, Y+39	; 0x27
    35a2:	78 a5       	ldd	r23, Y+40	; 0x28
    35a4:	89 a5       	ldd	r24, Y+41	; 0x29
    35a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	4a e7       	ldi	r20, 0x7A	; 122
    35ae:	55 e4       	ldi	r21, 0x45	; 69
    35b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	8b a3       	std	Y+35, r24	; 0x23
    35ba:	9c a3       	std	Y+36, r25	; 0x24
    35bc:	ad a3       	std	Y+37, r26	; 0x25
    35be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35c0:	6b a1       	ldd	r22, Y+35	; 0x23
    35c2:	7c a1       	ldd	r23, Y+36	; 0x24
    35c4:	8d a1       	ldd	r24, Y+37	; 0x25
    35c6:	9e a1       	ldd	r25, Y+38	; 0x26
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e8       	ldi	r20, 0x80	; 128
    35ce:	5f e3       	ldi	r21, 0x3F	; 63
    35d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35d4:	88 23       	and	r24, r24
    35d6:	2c f4       	brge	.+10     	; 0x35e2 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	9a a3       	std	Y+34, r25	; 0x22
    35de:	89 a3       	std	Y+33, r24	; 0x21
    35e0:	3f c0       	rjmp	.+126    	; 0x3660 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    35e2:	6b a1       	ldd	r22, Y+35	; 0x23
    35e4:	7c a1       	ldd	r23, Y+36	; 0x24
    35e6:	8d a1       	ldd	r24, Y+37	; 0x25
    35e8:	9e a1       	ldd	r25, Y+38	; 0x26
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	3f ef       	ldi	r19, 0xFF	; 255
    35ee:	4f e7       	ldi	r20, 0x7F	; 127
    35f0:	57 e4       	ldi	r21, 0x47	; 71
    35f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35f6:	18 16       	cp	r1, r24
    35f8:	4c f5       	brge	.+82     	; 0x364c <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fa:	6f a1       	ldd	r22, Y+39	; 0x27
    35fc:	78 a5       	ldd	r23, Y+40	; 0x28
    35fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3600:	9a a5       	ldd	r25, Y+42	; 0x2a
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e2       	ldi	r20, 0x20	; 32
    3608:	51 e4       	ldi	r21, 0x41	; 65
    360a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	bc 01       	movw	r22, r24
    3614:	cd 01       	movw	r24, r26
    3616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	9a a3       	std	Y+34, r25	; 0x22
    3620:	89 a3       	std	Y+33, r24	; 0x21
    3622:	0f c0       	rjmp	.+30     	; 0x3642 <LCD_displayCharacter+0x1cc>
    3624:	80 e9       	ldi	r24, 0x90	; 144
    3626:	91 e0       	ldi	r25, 0x01	; 1
    3628:	98 a3       	std	Y+32, r25	; 0x20
    362a:	8f 8f       	std	Y+31, r24	; 0x1f
    362c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    362e:	98 a1       	ldd	r25, Y+32	; 0x20
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <LCD_displayCharacter+0x1ba>
    3634:	98 a3       	std	Y+32, r25	; 0x20
    3636:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3638:	89 a1       	ldd	r24, Y+33	; 0x21
    363a:	9a a1       	ldd	r25, Y+34	; 0x22
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	9a a3       	std	Y+34, r25	; 0x22
    3640:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3642:	89 a1       	ldd	r24, Y+33	; 0x21
    3644:	9a a1       	ldd	r25, Y+34	; 0x22
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	69 f7       	brne	.-38     	; 0x3624 <LCD_displayCharacter+0x1ae>
    364a:	14 c0       	rjmp	.+40     	; 0x3674 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    364c:	6b a1       	ldd	r22, Y+35	; 0x23
    364e:	7c a1       	ldd	r23, Y+36	; 0x24
    3650:	8d a1       	ldd	r24, Y+37	; 0x25
    3652:	9e a1       	ldd	r25, Y+38	; 0x26
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	9a a3       	std	Y+34, r25	; 0x22
    365e:	89 a3       	std	Y+33, r24	; 0x21
    3660:	89 a1       	ldd	r24, Y+33	; 0x21
    3662:	9a a1       	ldd	r25, Y+34	; 0x22
    3664:	9e 8f       	std	Y+30, r25	; 0x1e
    3666:	8d 8f       	std	Y+29, r24	; 0x1d
    3668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    366a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    366c:	01 97       	sbiw	r24, 0x01	; 1
    366e:	f1 f7       	brne	.-4      	; 0x366c <LCD_displayCharacter+0x1f6>
    3670:	9e 8f       	std	Y+30, r25	; 0x1e
    3672:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    3674:	89 ad       	ldd	r24, Y+57	; 0x39
    3676:	28 2f       	mov	r18, r24
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	82 e0       	ldi	r24, 0x02	; 2
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	b9 01       	movw	r22, r18
    3680:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_setPortValue>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	a0 e8       	ldi	r26, 0x80	; 128
    368a:	bf e3       	ldi	r27, 0x3F	; 63
    368c:	89 8f       	std	Y+25, r24	; 0x19
    368e:	9a 8f       	std	Y+26, r25	; 0x1a
    3690:	ab 8f       	std	Y+27, r26	; 0x1b
    3692:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3694:	69 8d       	ldd	r22, Y+25	; 0x19
    3696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    369a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	4a e7       	ldi	r20, 0x7A	; 122
    36a2:	55 e4       	ldi	r21, 0x45	; 69
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	8d 8b       	std	Y+21, r24	; 0x15
    36ae:	9e 8b       	std	Y+22, r25	; 0x16
    36b0:	af 8b       	std	Y+23, r26	; 0x17
    36b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36b4:	6d 89       	ldd	r22, Y+21	; 0x15
    36b6:	7e 89       	ldd	r23, Y+22	; 0x16
    36b8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ba:	98 8d       	ldd	r25, Y+24	; 0x18
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e8       	ldi	r20, 0x80	; 128
    36c2:	5f e3       	ldi	r21, 0x3F	; 63
    36c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c8:	88 23       	and	r24, r24
    36ca:	2c f4       	brge	.+10     	; 0x36d6 <LCD_displayCharacter+0x260>
		__ticks = 1;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9c 8b       	std	Y+20, r25	; 0x14
    36d2:	8b 8b       	std	Y+19, r24	; 0x13
    36d4:	3f c0       	rjmp	.+126    	; 0x3754 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    36d6:	6d 89       	ldd	r22, Y+21	; 0x15
    36d8:	7e 89       	ldd	r23, Y+22	; 0x16
    36da:	8f 89       	ldd	r24, Y+23	; 0x17
    36dc:	98 8d       	ldd	r25, Y+24	; 0x18
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	3f ef       	ldi	r19, 0xFF	; 255
    36e2:	4f e7       	ldi	r20, 0x7F	; 127
    36e4:	57 e4       	ldi	r21, 0x47	; 71
    36e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ea:	18 16       	cp	r1, r24
    36ec:	4c f5       	brge	.+82     	; 0x3740 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ee:	69 8d       	ldd	r22, Y+25	; 0x19
    36f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e2       	ldi	r20, 0x20	; 32
    36fc:	51 e4       	ldi	r21, 0x41	; 65
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	9c 8b       	std	Y+20, r25	; 0x14
    3714:	8b 8b       	std	Y+19, r24	; 0x13
    3716:	0f c0       	rjmp	.+30     	; 0x3736 <LCD_displayCharacter+0x2c0>
    3718:	80 e9       	ldi	r24, 0x90	; 144
    371a:	91 e0       	ldi	r25, 0x01	; 1
    371c:	9a 8b       	std	Y+18, r25	; 0x12
    371e:	89 8b       	std	Y+17, r24	; 0x11
    3720:	89 89       	ldd	r24, Y+17	; 0x11
    3722:	9a 89       	ldd	r25, Y+18	; 0x12
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <LCD_displayCharacter+0x2ae>
    3728:	9a 8b       	std	Y+18, r25	; 0x12
    372a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372c:	8b 89       	ldd	r24, Y+19	; 0x13
    372e:	9c 89       	ldd	r25, Y+20	; 0x14
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	9c 8b       	std	Y+20, r25	; 0x14
    3734:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3736:	8b 89       	ldd	r24, Y+19	; 0x13
    3738:	9c 89       	ldd	r25, Y+20	; 0x14
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	69 f7       	brne	.-38     	; 0x3718 <LCD_displayCharacter+0x2a2>
    373e:	14 c0       	rjmp	.+40     	; 0x3768 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	6d 89       	ldd	r22, Y+21	; 0x15
    3742:	7e 89       	ldd	r23, Y+22	; 0x16
    3744:	8f 89       	ldd	r24, Y+23	; 0x17
    3746:	98 8d       	ldd	r25, Y+24	; 0x18
    3748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9c 8b       	std	Y+20, r25	; 0x14
    3752:	8b 8b       	std	Y+19, r24	; 0x13
    3754:	8b 89       	ldd	r24, Y+19	; 0x13
    3756:	9c 89       	ldd	r25, Y+20	; 0x14
    3758:	98 8b       	std	Y+16, r25	; 0x10
    375a:	8f 87       	std	Y+15, r24	; 0x0f
    375c:	8f 85       	ldd	r24, Y+15	; 0x0f
    375e:	98 89       	ldd	r25, Y+16	; 0x10
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <LCD_displayCharacter+0x2ea>
    3764:	98 8b       	std	Y+16, r25	; 0x10
    3766:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	65 e0       	ldi	r22, 0x05	; 5
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	50 e0       	ldi	r21, 0x00	; 0
    3774:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_setPinValue>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a0 e8       	ldi	r26, 0x80	; 128
    377e:	bf e3       	ldi	r27, 0x3F	; 63
    3780:	8b 87       	std	Y+11, r24	; 0x0b
    3782:	9c 87       	std	Y+12, r25	; 0x0c
    3784:	ad 87       	std	Y+13, r26	; 0x0d
    3786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3788:	6b 85       	ldd	r22, Y+11	; 0x0b
    378a:	7c 85       	ldd	r23, Y+12	; 0x0c
    378c:	8d 85       	ldd	r24, Y+13	; 0x0d
    378e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4a e7       	ldi	r20, 0x7A	; 122
    3796:	55 e4       	ldi	r21, 0x45	; 69
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	8f 83       	std	Y+7, r24	; 0x07
    37a2:	98 87       	std	Y+8, r25	; 0x08
    37a4:	a9 87       	std	Y+9, r26	; 0x09
    37a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37bc:	88 23       	and	r24, r24
    37be:	2c f4       	brge	.+10     	; 0x37ca <LCD_displayCharacter+0x354>
		__ticks = 1;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9e 83       	std	Y+6, r25	; 0x06
    37c6:	8d 83       	std	Y+5, r24	; 0x05
    37c8:	3f c0       	rjmp	.+126    	; 0x3848 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    37ca:	6f 81       	ldd	r22, Y+7	; 0x07
    37cc:	78 85       	ldd	r23, Y+8	; 0x08
    37ce:	89 85       	ldd	r24, Y+9	; 0x09
    37d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	3f ef       	ldi	r19, 0xFF	; 255
    37d6:	4f e7       	ldi	r20, 0x7F	; 127
    37d8:	57 e4       	ldi	r21, 0x47	; 71
    37da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37de:	18 16       	cp	r1, r24
    37e0:	4c f5       	brge	.+82     	; 0x3834 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e2       	ldi	r20, 0x20	; 32
    37f0:	51 e4       	ldi	r21, 0x41	; 65
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	bc 01       	movw	r22, r24
    37fc:	cd 01       	movw	r24, r26
    37fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
    380a:	0f c0       	rjmp	.+30     	; 0x382a <LCD_displayCharacter+0x3b4>
    380c:	80 e9       	ldi	r24, 0x90	; 144
    380e:	91 e0       	ldi	r25, 0x01	; 1
    3810:	9c 83       	std	Y+4, r25	; 0x04
    3812:	8b 83       	std	Y+3, r24	; 0x03
    3814:	8b 81       	ldd	r24, Y+3	; 0x03
    3816:	9c 81       	ldd	r25, Y+4	; 0x04
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <LCD_displayCharacter+0x3a2>
    381c:	9c 83       	std	Y+4, r25	; 0x04
    381e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3820:	8d 81       	ldd	r24, Y+5	; 0x05
    3822:	9e 81       	ldd	r25, Y+6	; 0x06
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	69 f7       	brne	.-38     	; 0x380c <LCD_displayCharacter+0x396>
    3832:	14 c0       	rjmp	.+40     	; 0x385c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3834:	6f 81       	ldd	r22, Y+7	; 0x07
    3836:	78 85       	ldd	r23, Y+8	; 0x08
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	9e 83       	std	Y+6, r25	; 0x06
    3846:	8d 83       	std	Y+5, r24	; 0x05
    3848:	8d 81       	ldd	r24, Y+5	; 0x05
    384a:	9e 81       	ldd	r25, Y+6	; 0x06
    384c:	9a 83       	std	Y+2, r25	; 0x02
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <LCD_displayCharacter+0x3de>
    3858:	9a 83       	std	Y+2, r25	; 0x02
    385a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    385c:	e9 96       	adiw	r28, 0x39	; 57
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <LCD_DisplayInteger>:

void LCD_DisplayInteger(u32 num) {
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	68 97       	sbiw	r28, 0x18	; 24
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	6d 8b       	std	Y+21, r22	; 0x15
    3888:	7e 8b       	std	Y+22, r23	; 0x16
    388a:	8f 8b       	std	Y+23, r24	; 0x17
    388c:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
    388e:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
    3890:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
    3892:	8c 81       	ldd	r24, Y+4	; 0x04
    3894:	08 2f       	mov	r16, r24
    3896:	10 e0       	ldi	r17, 0x00	; 0
    3898:	8d 89       	ldd	r24, Y+21	; 0x15
    389a:	9e 89       	ldd	r25, Y+22	; 0x16
    389c:	af 89       	ldd	r26, Y+23	; 0x17
    389e:	b8 8d       	ldd	r27, Y+24	; 0x18
    38a0:	2a e0       	ldi	r18, 0x0A	; 10
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 3b 32 	call	0x6476	; 0x6476 <__udivmodsi4>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	28 2f       	mov	r18, r24
    38b6:	20 5d       	subi	r18, 0xD0	; 208
    38b8:	ce 01       	movw	r24, r28
    38ba:	05 96       	adiw	r24, 0x05	; 5
    38bc:	fc 01       	movw	r30, r24
    38be:	e0 0f       	add	r30, r16
    38c0:	f1 1f       	adc	r31, r17
    38c2:	20 83       	st	Z, r18
    38c4:	8c 81       	ldd	r24, Y+4	; 0x04
    38c6:	8f 5f       	subi	r24, 0xFF	; 255
    38c8:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
    38ca:	8d 89       	ldd	r24, Y+21	; 0x15
    38cc:	9e 89       	ldd	r25, Y+22	; 0x16
    38ce:	af 89       	ldd	r26, Y+23	; 0x17
    38d0:	b8 8d       	ldd	r27, Y+24	; 0x18
    38d2:	2a e0       	ldi	r18, 0x0A	; 10
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 3b 32 	call	0x6476	; 0x6476 <__udivmodsi4>
    38e2:	da 01       	movw	r26, r20
    38e4:	c9 01       	movw	r24, r18
    38e6:	8d 8b       	std	Y+21, r24	; 0x15
    38e8:	9e 8b       	std	Y+22, r25	; 0x16
    38ea:	af 8b       	std	Y+23, r26	; 0x17
    38ec:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
    38ee:	8d 89       	ldd	r24, Y+21	; 0x15
    38f0:	9e 89       	ldd	r25, Y+22	; 0x16
    38f2:	af 89       	ldd	r26, Y+23	; 0x17
    38f4:	b8 8d       	ldd	r27, Y+24	; 0x18
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	a1 05       	cpc	r26, r1
    38fa:	b1 05       	cpc	r27, r1
    38fc:	51 f6       	brne	.-108    	; 0x3892 <LCD_DisplayInteger+0x24>

    if (isNegative) {
    38fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3900:	88 23       	and	r24, r24
    3902:	69 f0       	breq	.+26     	; 0x391e <LCD_DisplayInteger+0xb0>
        buffer[i++] = '-';
    3904:	8c 81       	ldd	r24, Y+4	; 0x04
    3906:	28 2f       	mov	r18, r24
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	ce 01       	movw	r24, r28
    390c:	05 96       	adiw	r24, 0x05	; 5
    390e:	fc 01       	movw	r30, r24
    3910:	e2 0f       	add	r30, r18
    3912:	f3 1f       	adc	r31, r19
    3914:	8d e2       	ldi	r24, 0x2D	; 45
    3916:	80 83       	st	Z, r24
    3918:	8c 81       	ldd	r24, Y+4	; 0x04
    391a:	8f 5f       	subi	r24, 0xFF	; 255
    391c:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    391e:	1a 82       	std	Y+2, r1	; 0x02
    3920:	3d c0       	rjmp	.+122    	; 0x399c <LCD_DisplayInteger+0x12e>
        char temp = buffer[j];
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	28 2f       	mov	r18, r24
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	ce 01       	movw	r24, r28
    392a:	05 96       	adiw	r24, 0x05	; 5
    392c:	fc 01       	movw	r30, r24
    392e:	e2 0f       	add	r30, r18
    3930:	f3 1f       	adc	r31, r19
    3932:	80 81       	ld	r24, Z
    3934:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    3936:	8a 81       	ldd	r24, Y+2	; 0x02
    3938:	48 2f       	mov	r20, r24
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	8c 81       	ldd	r24, Y+4	; 0x04
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	8a 81       	ldd	r24, Y+2	; 0x02
    3944:	88 2f       	mov	r24, r24
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	b9 01       	movw	r22, r18
    394a:	68 1b       	sub	r22, r24
    394c:	79 0b       	sbc	r23, r25
    394e:	cb 01       	movw	r24, r22
    3950:	9c 01       	movw	r18, r24
    3952:	21 50       	subi	r18, 0x01	; 1
    3954:	30 40       	sbci	r19, 0x00	; 0
    3956:	ce 01       	movw	r24, r28
    3958:	05 96       	adiw	r24, 0x05	; 5
    395a:	fc 01       	movw	r30, r24
    395c:	e2 0f       	add	r30, r18
    395e:	f3 1f       	adc	r31, r19
    3960:	20 81       	ld	r18, Z
    3962:	ce 01       	movw	r24, r28
    3964:	05 96       	adiw	r24, 0x05	; 5
    3966:	fc 01       	movw	r30, r24
    3968:	e4 0f       	add	r30, r20
    396a:	f5 1f       	adc	r31, r21
    396c:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    396e:	8c 81       	ldd	r24, Y+4	; 0x04
    3970:	28 2f       	mov	r18, r24
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	8a 81       	ldd	r24, Y+2	; 0x02
    3976:	88 2f       	mov	r24, r24
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	a9 01       	movw	r20, r18
    397c:	48 1b       	sub	r20, r24
    397e:	59 0b       	sbc	r21, r25
    3980:	ca 01       	movw	r24, r20
    3982:	9c 01       	movw	r18, r24
    3984:	21 50       	subi	r18, 0x01	; 1
    3986:	30 40       	sbci	r19, 0x00	; 0
    3988:	ce 01       	movw	r24, r28
    398a:	05 96       	adiw	r24, 0x05	; 5
    398c:	fc 01       	movw	r30, r24
    398e:	e2 0f       	add	r30, r18
    3990:	f3 1f       	adc	r31, r19
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	8f 5f       	subi	r24, 0xFF	; 255
    399a:	8a 83       	std	Y+2, r24	; 0x02
    399c:	8c 81       	ldd	r24, Y+4	; 0x04
    399e:	98 2f       	mov	r25, r24
    39a0:	96 95       	lsr	r25
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	89 17       	cp	r24, r25
    39a6:	08 f4       	brcc	.+2      	; 0x39aa <LCD_DisplayInteger+0x13c>
    39a8:	bc cf       	rjmp	.-136    	; 0x3922 <LCD_DisplayInteger+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    39aa:	8c 81       	ldd	r24, Y+4	; 0x04
    39ac:	28 2f       	mov	r18, r24
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	ce 01       	movw	r24, r28
    39b2:	05 96       	adiw	r24, 0x05	; 5
    39b4:	fc 01       	movw	r30, r24
    39b6:	e2 0f       	add	r30, r18
    39b8:	f3 1f       	adc	r31, r19
    39ba:	10 82       	st	Z, r1

    // Write the string to LCD
    LCD_displayString(buffer);
    39bc:	ce 01       	movw	r24, r28
    39be:	05 96       	adiw	r24, 0x05	; 5
    39c0:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
}
    39c4:	68 96       	adiw	r28, 0x18	; 24
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	08 95       	ret

000039da <LCD_init>:


void LCD_init(void)
{
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
    39e2:	2e 97       	sbiw	r28, 0x0e	; 14
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    39ee:	83 e0       	ldi	r24, 0x03	; 3
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	64 e0       	ldi	r22, 0x04	; 4
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    39fe:	83 e0       	ldi	r24, 0x03	; 3
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	65 e0       	ldi	r22, 0x05	; 5
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	41 e0       	ldi	r20, 0x01	; 1
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	6f ef       	ldi	r22, 0xFF	; 255
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <LCD_setPortDirection>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 ea       	ldi	r26, 0xA0	; 160
    3a20:	b1 e4       	ldi	r27, 0x41	; 65
    3a22:	8b 87       	std	Y+11, r24	; 0x0b
    3a24:	9c 87       	std	Y+12, r25	; 0x0c
    3a26:	ad 87       	std	Y+13, r26	; 0x0d
    3a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a e7       	ldi	r20, 0x7A	; 122
    3a38:	55 e4       	ldi	r21, 0x45	; 69
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8f 83       	std	Y+7, r24	; 0x07
    3a44:	98 87       	std	Y+8, r25	; 0x08
    3a46:	a9 87       	std	Y+9, r26	; 0x09
    3a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4c:	78 85       	ldd	r23, Y+8	; 0x08
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <LCD_init+0x92>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9e 83       	std	Y+6, r25	; 0x06
    3a68:	8d 83       	std	Y+5, r24	; 0x05
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <LCD_init+0x110>
	else if (__tmp > 65535)
    3a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6e:	78 85       	ldd	r23, Y+8	; 0x08
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <LCD_init+0xf2>
    3aae:	80 e9       	ldi	r24, 0x90	; 144
    3ab0:	91 e0       	ldi	r25, 0x01	; 1
    3ab2:	9c 83       	std	Y+4, r25	; 0x04
    3ab4:	8b 83       	std	Y+3, r24	; 0x03
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <LCD_init+0xe0>
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9e 83       	std	Y+6, r25	; 0x06
    3aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <LCD_init+0xd4>
    3ad4:	14 c0       	rjmp	.+40     	; 0x3afe <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad8:	78 85       	ldd	r23, Y+8	; 0x08
    3ada:	89 85       	ldd	r24, Y+9	; 0x09
    3adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <LCD_init+0x11c>
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3afe:	88 e3       	ldi	r24, 0x38	; 56
    3b00:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3b04:	8c e0       	ldi	r24, 0x0C	; 12
    3b06:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
}
    3b10:	2e 96       	adiw	r28, 0x0e	; 14
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <LCD_GoToXY+0x6>
    3b28:	00 d0       	rcall	.+0      	; 0x3b2a <LCD_GoToXY+0x8>
    3b2a:	cd b7       	in	r28, 0x3d	; 61
    3b2c:	de b7       	in	r29, 0x3e	; 62
    3b2e:	89 83       	std	Y+1, r24	; 0x01
    3b30:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	88 32       	cpi	r24, 0x28	; 40
    3b36:	c0 f4       	brcc	.+48     	; 0x3b68 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	3c 83       	std	Y+4, r19	; 0x04
    3b40:	2b 83       	std	Y+3, r18	; 0x03
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	9c 81       	ldd	r25, Y+4	; 0x04
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	31 f0       	breq	.+12     	; 0x3b56 <LCD_GoToXY+0x34>
    3b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b4e:	21 30       	cpi	r18, 0x01	; 1
    3b50:	31 05       	cpc	r19, r1
    3b52:	31 f0       	breq	.+12     	; 0x3b60 <LCD_GoToXY+0x3e>
    3b54:	09 c0       	rjmp	.+18     	; 0x3b68 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3b56:	8a 81       	ldd	r24, Y+2	; 0x02
    3b58:	80 58       	subi	r24, 0x80	; 128
    3b5a:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	80 54       	subi	r24, 0x40	; 64
    3b64:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
			break;
		}
	}
}
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	08 95       	ret

00003b76 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3b76:	df 93       	push	r29
    3b78:	cf 93       	push	r28
    3b7a:	00 d0       	rcall	.+0      	; 0x3b7c <LCD_displayString+0x6>
    3b7c:	0f 92       	push	r0
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	9b 83       	std	Y+3, r25	; 0x03
    3b84:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3b86:	19 82       	std	Y+1, r1	; 0x01
    3b88:	0e c0       	rjmp	.+28     	; 0x3ba6 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	28 2f       	mov	r18, r24
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	9b 81       	ldd	r25, Y+3	; 0x03
    3b94:	fc 01       	movw	r30, r24
    3b96:	e2 0f       	add	r30, r18
    3b98:	f3 1f       	adc	r31, r19
    3b9a:	80 81       	ld	r24, Z
    3b9c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
		i++;
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	8f 5f       	subi	r24, 0xFF	; 255
    3ba4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	28 2f       	mov	r18, r24
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	e2 0f       	add	r30, r18
    3bb4:	f3 1f       	adc	r31, r19
    3bb6:	80 81       	ld	r24, Z
    3bb8:	88 23       	and	r24, r24
    3bba:	39 f7       	brne	.-50     	; 0x3b8a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3bc8:	df 93       	push	r29
    3bca:	cf 93       	push	r28
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	28 97       	sbiw	r28, 0x08	; 8
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	cd bf       	out	0x3d, r28	; 61
    3bdc:	8b 83       	std	Y+3, r24	; 0x03
    3bde:	6c 83       	std	Y+4, r22	; 0x04
    3be0:	5e 83       	std	Y+6, r21	; 0x06
    3be2:	4d 83       	std	Y+5, r20	; 0x05
    3be4:	38 87       	std	Y+8, r19	; 0x08
    3be6:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3be8:	1a 82       	std	Y+2, r1	; 0x02
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	88 23       	and	r24, r24
    3bf2:	49 f4       	brne	.+18     	; 0x3c06 <LCD_String_xy+0x3e>
    3bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf6:	80 31       	cpi	r24, 0x10	; 16
    3bf8:	30 f4       	brcc	.+12     	; 0x3c06 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfc:	8f 70       	andi	r24, 0x0F	; 15
    3bfe:	80 68       	ori	r24, 0x80	; 128
    3c00:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
    3c04:	3a c0       	rjmp	.+116    	; 0x3c7a <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	81 30       	cpi	r24, 0x01	; 1
    3c0a:	b9 f5       	brne	.+110    	; 0x3c7a <LCD_String_xy+0xb2>
    3c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0e:	80 31       	cpi	r24, 0x10	; 16
    3c10:	a0 f5       	brcc	.+104    	; 0x3c7a <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    3c12:	8c 81       	ldd	r24, Y+4	; 0x04
    3c14:	8f 70       	andi	r24, 0x0F	; 15
    3c16:	80 6c       	ori	r24, 0xC0	; 192
    3c18:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
    3c1c:	2e c0       	rjmp	.+92     	; 0x3c7a <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	28 2f       	mov	r18, r24
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	8d 81       	ldd	r24, Y+5	; 0x05
    3c26:	9e 81       	ldd	r25, Y+6	; 0x06
    3c28:	fc 01       	movw	r30, r24
    3c2a:	e2 0f       	add	r30, r18
    3c2c:	f3 1f       	adc	r31, r19
    3c2e:	80 81       	ld	r24, Z
    3c30:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
		i++;
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3c:	88 23       	and	r24, r24
    3c3e:	71 f4       	brne	.+28     	; 0x3c5c <LCD_String_xy+0x94>
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	83 30       	cpi	r24, 0x03	; 3
    3c44:	58 f0       	brcs	.+22     	; 0x3c5c <LCD_String_xy+0x94>
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	8b 30       	cpi	r24, 0x0B	; 11
    3c4a:	41 f4       	brne	.+16     	; 0x3c5c <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			c++;
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	89 83       	std	Y+1, r24	; 0x01
    3c5a:	0b c0       	rjmp	.+22     	; 0x3c72 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	81 30       	cpi	r24, 0x01	; 1
    3c60:	41 f4       	brne	.+16     	; 0x3c72 <LCD_String_xy+0xaa>
    3c62:	8c 81       	ldd	r24, Y+4	; 0x04
    3c64:	83 30       	cpi	r24, 0x03	; 3
    3c66:	28 f0       	brcs	.+10     	; 0x3c72 <LCD_String_xy+0xaa>
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	8b 30       	cpi	r24, 0x0B	; 11
    3c6c:	11 f4       	brne	.+4      	; 0x3c72 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3c6e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_ClearScreen>
		}

		*count = c;
    3c72:	ef 81       	ldd	r30, Y+7	; 0x07
    3c74:	f8 85       	ldd	r31, Y+8	; 0x08
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	28 2f       	mov	r18, r24
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	8d 81       	ldd	r24, Y+5	; 0x05
    3c82:	9e 81       	ldd	r25, Y+6	; 0x06
    3c84:	fc 01       	movw	r30, r24
    3c86:	e2 0f       	add	r30, r18
    3c88:	f3 1f       	adc	r31, r19
    3c8a:	80 81       	ld	r24, Z
    3c8c:	88 23       	and	r24, r24
    3c8e:	39 f6       	brne	.-114    	; 0x3c1e <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3c90:	28 96       	adiw	r28, 0x08	; 8
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	2e 97       	sbiw	r28, 0x0e	; 14
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	f8 94       	cli
    3cb0:	de bf       	out	0x3e, r29	; 62
    3cb2:	0f be       	out	0x3f, r0	; 63
    3cb4:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	a0 e0       	ldi	r26, 0x00	; 0
    3cc2:	b0 e4       	ldi	r27, 0x40	; 64
    3cc4:	8b 87       	std	Y+11, r24	; 0x0b
    3cc6:	9c 87       	std	Y+12, r25	; 0x0c
    3cc8:	ad 87       	std	Y+13, r26	; 0x0d
    3cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	4a e7       	ldi	r20, 0x7A	; 122
    3cda:	55 e4       	ldi	r21, 0x45	; 69
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	8f 83       	std	Y+7, r24	; 0x07
    3ce6:	98 87       	std	Y+8, r25	; 0x08
    3ce8:	a9 87       	std	Y+9, r26	; 0x09
    3cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cec:	6f 81       	ldd	r22, Y+7	; 0x07
    3cee:	78 85       	ldd	r23, Y+8	; 0x08
    3cf0:	89 85       	ldd	r24, Y+9	; 0x09
    3cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e8       	ldi	r20, 0x80	; 128
    3cfa:	5f e3       	ldi	r21, 0x3F	; 63
    3cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d00:	88 23       	and	r24, r24
    3d02:	2c f4       	brge	.+10     	; 0x3d0e <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
    3d0c:	3f c0       	rjmp	.+126    	; 0x3d8c <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	3f ef       	ldi	r19, 0xFF	; 255
    3d1a:	4f e7       	ldi	r20, 0x7F	; 127
    3d1c:	57 e4       	ldi	r21, 0x47	; 71
    3d1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d22:	18 16       	cp	r1, r24
    3d24:	4c f5       	brge	.+82     	; 0x3d78 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	40 e2       	ldi	r20, 0x20	; 32
    3d34:	51 e4       	ldi	r21, 0x41	; 65
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	bc 01       	movw	r22, r24
    3d40:	cd 01       	movw	r24, r26
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	9e 83       	std	Y+6, r25	; 0x06
    3d4c:	8d 83       	std	Y+5, r24	; 0x05
    3d4e:	0f c0       	rjmp	.+30     	; 0x3d6e <LCD_ClearScreen+0xcc>
    3d50:	80 e9       	ldi	r24, 0x90	; 144
    3d52:	91 e0       	ldi	r25, 0x01	; 1
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
    3d58:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <LCD_ClearScreen+0xba>
    3d60:	9c 83       	std	Y+4, r25	; 0x04
    3d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	9e 83       	std	Y+6, r25	; 0x06
    3d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	69 f7       	brne	.-38     	; 0x3d50 <LCD_ClearScreen+0xae>
    3d76:	14 c0       	rjmp	.+40     	; 0x3da0 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
    3d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <LCD_ClearScreen+0xf6>
    3d9c:	9a 83       	std	Y+2, r25	; 0x02
    3d9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3da0:	2e 96       	adiw	r28, 0x0e	; 14
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	2e 97       	sbiw	r28, 0x0e	; 14
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3dc6:	88 e1       	ldi	r24, 0x18	; 24
    3dc8:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	a0 ea       	ldi	r26, 0xA0	; 160
    3dd2:	b1 e4       	ldi	r27, 0x41	; 65
    3dd4:	8b 87       	std	Y+11, r24	; 0x0b
    3dd6:	9c 87       	std	Y+12, r25	; 0x0c
    3dd8:	ad 87       	std	Y+13, r26	; 0x0d
    3dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	4a e7       	ldi	r20, 0x7A	; 122
    3dea:	55 e4       	ldi	r21, 0x45	; 69
    3dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	8f 83       	std	Y+7, r24	; 0x07
    3df6:	98 87       	std	Y+8, r25	; 0x08
    3df8:	a9 87       	std	Y+9, r26	; 0x09
    3dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfe:	78 85       	ldd	r23, Y+8	; 0x08
    3e00:	89 85       	ldd	r24, Y+9	; 0x09
    3e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	40 e8       	ldi	r20, 0x80	; 128
    3e0a:	5f e3       	ldi	r21, 0x3F	; 63
    3e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e10:	88 23       	and	r24, r24
    3e12:	2c f4       	brge	.+10     	; 0x3e1e <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	9e 83       	std	Y+6, r25	; 0x06
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
    3e1c:	3f c0       	rjmp	.+126    	; 0x3e9c <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e20:	78 85       	ldd	r23, Y+8	; 0x08
    3e22:	89 85       	ldd	r24, Y+9	; 0x09
    3e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	57 e4       	ldi	r21, 0x47	; 71
    3e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e32:	18 16       	cp	r1, r24
    3e34:	4c f5       	brge	.+82     	; 0x3e88 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e2       	ldi	r20, 0x20	; 32
    3e44:	51 e4       	ldi	r21, 0x41	; 65
    3e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	bc 01       	movw	r22, r24
    3e50:	cd 01       	movw	r24, r26
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
    3e5e:	0f c0       	rjmp	.+30     	; 0x3e7e <LCD_ShiftingLeft+0xcc>
    3e60:	80 e9       	ldi	r24, 0x90	; 144
    3e62:	91 e0       	ldi	r25, 0x01	; 1
    3e64:	9c 83       	std	Y+4, r25	; 0x04
    3e66:	8b 83       	std	Y+3, r24	; 0x03
    3e68:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	f1 f7       	brne	.-4      	; 0x3e6c <LCD_ShiftingLeft+0xba>
    3e70:	9c 83       	std	Y+4, r25	; 0x04
    3e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e74:	8d 81       	ldd	r24, Y+5	; 0x05
    3e76:	9e 81       	ldd	r25, Y+6	; 0x06
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	9e 83       	std	Y+6, r25	; 0x06
    3e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e80:	9e 81       	ldd	r25, Y+6	; 0x06
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	69 f7       	brne	.-38     	; 0x3e60 <LCD_ShiftingLeft+0xae>
    3e86:	14 c0       	rjmp	.+40     	; 0x3eb0 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e88:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8a:	78 85       	ldd	r23, Y+8	; 0x08
    3e8c:	89 85       	ldd	r24, Y+9	; 0x09
    3e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	9e 83       	std	Y+6, r25	; 0x06
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
    3e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea0:	9a 83       	std	Y+2, r25	; 0x02
    3ea2:	89 83       	std	Y+1, r24	; 0x01
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <LCD_ShiftingLeft+0xf6>
    3eac:	9a 83       	std	Y+2, r25	; 0x02
    3eae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3eb0:	2e 96       	adiw	r28, 0x0e	; 14
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	08 95       	ret

00003ec2 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3ec2:	df 93       	push	r29
    3ec4:	cf 93       	push	r28
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62
    3eca:	2e 97       	sbiw	r28, 0x0e	; 14
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3ed6:	8c e1       	ldi	r24, 0x1C	; 28
    3ed8:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a0 ea       	ldi	r26, 0xA0	; 160
    3ee2:	b1 e4       	ldi	r27, 0x41	; 65
    3ee4:	8b 87       	std	Y+11, r24	; 0x0b
    3ee6:	9c 87       	std	Y+12, r25	; 0x0c
    3ee8:	ad 87       	std	Y+13, r26	; 0x0d
    3eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	4a e7       	ldi	r20, 0x7A	; 122
    3efa:	55 e4       	ldi	r21, 0x45	; 69
    3efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	8f 83       	std	Y+7, r24	; 0x07
    3f06:	98 87       	std	Y+8, r25	; 0x08
    3f08:	a9 87       	std	Y+9, r26	; 0x09
    3f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0e:	78 85       	ldd	r23, Y+8	; 0x08
    3f10:	89 85       	ldd	r24, Y+9	; 0x09
    3f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e8       	ldi	r20, 0x80	; 128
    3f1a:	5f e3       	ldi	r21, 0x3F	; 63
    3f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f20:	88 23       	and	r24, r24
    3f22:	2c f4       	brge	.+10     	; 0x3f2e <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	9e 83       	std	Y+6, r25	; 0x06
    3f2a:	8d 83       	std	Y+5, r24	; 0x05
    3f2c:	3f c0       	rjmp	.+126    	; 0x3fac <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f30:	78 85       	ldd	r23, Y+8	; 0x08
    3f32:	89 85       	ldd	r24, Y+9	; 0x09
    3f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	3f ef       	ldi	r19, 0xFF	; 255
    3f3a:	4f e7       	ldi	r20, 0x7F	; 127
    3f3c:	57 e4       	ldi	r21, 0x47	; 71
    3f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f42:	18 16       	cp	r1, r24
    3f44:	4c f5       	brge	.+82     	; 0x3f98 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e2       	ldi	r20, 0x20	; 32
    3f54:	51 e4       	ldi	r21, 0x41	; 65
    3f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
    3f6e:	0f c0       	rjmp	.+30     	; 0x3f8e <LCD_ShiftingRight+0xcc>
    3f70:	80 e9       	ldi	r24, 0x90	; 144
    3f72:	91 e0       	ldi	r25, 0x01	; 1
    3f74:	9c 83       	std	Y+4, r25	; 0x04
    3f76:	8b 83       	std	Y+3, r24	; 0x03
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <LCD_ShiftingRight+0xba>
    3f80:	9c 83       	std	Y+4, r25	; 0x04
    3f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	9e 81       	ldd	r25, Y+6	; 0x06
    3f92:	00 97       	sbiw	r24, 0x00	; 0
    3f94:	69 f7       	brne	.-38     	; 0x3f70 <LCD_ShiftingRight+0xae>
    3f96:	14 c0       	rjmp	.+40     	; 0x3fc0 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f98:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9a:	78 85       	ldd	r23, Y+8	; 0x08
    3f9c:	89 85       	ldd	r24, Y+9	; 0x09
    3f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	9e 83       	std	Y+6, r25	; 0x06
    3faa:	8d 83       	std	Y+5, r24	; 0x05
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb0:	9a 83       	std	Y+2, r25	; 0x02
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <LCD_ShiftingRight+0xf6>
    3fbc:	9a 83       	std	Y+2, r25	; 0x02
    3fbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3fc0:	2e 96       	adiw	r28, 0x0e	; 14
    3fc2:	0f b6       	in	r0, 0x3f	; 63
    3fc4:	f8 94       	cli
    3fc6:	de bf       	out	0x3e, r29	; 62
    3fc8:	0f be       	out	0x3f, r0	; 63
    3fca:	cd bf       	out	0x3d, r28	; 61
    3fcc:	cf 91       	pop	r28
    3fce:	df 91       	pop	r29
    3fd0:	08 95       	ret

00003fd2 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3fd2:	0f 93       	push	r16
    3fd4:	df 93       	push	r29
    3fd6:	cf 93       	push	r28
    3fd8:	cd b7       	in	r28, 0x3d	; 61
    3fda:	de b7       	in	r29, 0x3e	; 62
    3fdc:	28 97       	sbiw	r28, 0x08	; 8
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	8b 83       	std	Y+3, r24	; 0x03
    3fea:	7d 83       	std	Y+5, r23	; 0x05
    3fec:	6c 83       	std	Y+4, r22	; 0x04
    3fee:	4e 83       	std	Y+6, r20	; 0x06
    3ff0:	2f 83       	std	Y+7, r18	; 0x07
    3ff2:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3ff4:	88 85       	ldd	r24, Y+8	; 0x08
    3ff6:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3ffa:	1a 82       	std	Y+2, r1	; 0x02
    3ffc:	19 82       	std	Y+1, r1	; 0x01
    3ffe:	0f c0       	rjmp	.+30     	; 0x401e <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    4000:	29 81       	ldd	r18, Y+1	; 0x01
    4002:	3a 81       	ldd	r19, Y+2	; 0x02
    4004:	8c 81       	ldd	r24, Y+4	; 0x04
    4006:	9d 81       	ldd	r25, Y+5	; 0x05
    4008:	fc 01       	movw	r30, r24
    400a:	e2 0f       	add	r30, r18
    400c:	f3 1f       	adc	r31, r19
    400e:	80 81       	ld	r24, Z
    4010:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	01 96       	adiw	r24, 0x01	; 1
    401a:	9a 83       	std	Y+2, r25	; 0x02
    401c:	89 83       	std	Y+1, r24	; 0x01
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	88 30       	cpi	r24, 0x08	; 8
    4024:	91 05       	cpc	r25, r1
    4026:	64 f3       	brlt	.-40     	; 0x4000 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    4028:	8e 81       	ldd	r24, Y+6	; 0x06
    402a:	6f 81       	ldd	r22, Y+7	; 0x07
    402c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    4036:	8f 81       	ldd	r24, Y+7	; 0x07
    4038:	80 31       	cpi	r24, 0x10	; 16
    403a:	48 f0       	brcs	.+18     	; 0x404e <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    403c:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    4048:	8b 81       	ldd	r24, Y+3	; 0x03
    404a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
	}
}
    404e:	28 96       	adiw	r28, 0x08	; 8
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	cf 91       	pop	r28
    405c:	df 91       	pop	r29
    405e:	0f 91       	pop	r16
    4060:	08 95       	ret

00004062 <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    4062:	df 93       	push	r29
    4064:	cf 93       	push	r28
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	28 97       	sbiw	r28, 0x08	; 8
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
    4076:	6d 83       	std	Y+5, r22	; 0x05
    4078:	7e 83       	std	Y+6, r23	; 0x06
    407a:	8f 83       	std	Y+7, r24	; 0x07
    407c:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    407e:	6d 81       	ldd	r22, Y+5	; 0x05
    4080:	7e 81       	ldd	r23, Y+6	; 0x06
    4082:	8f 81       	ldd	r24, Y+7	; 0x07
    4084:	98 85       	ldd	r25, Y+8	; 0x08
    4086:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    408a:	dc 01       	movw	r26, r24
    408c:	cb 01       	movw	r24, r22
    408e:	9c 83       	std	Y+4, r25	; 0x04
    4090:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	9c 81       	ldd	r25, Y+4	; 0x04
    4096:	aa 27       	eor	r26, r26
    4098:	97 fd       	sbrc	r25, 7
    409a:	a0 95       	com	r26
    409c:	ba 2f       	mov	r27, r26
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    40a6:	9b 01       	movw	r18, r22
    40a8:	ac 01       	movw	r20, r24
    40aa:	6d 81       	ldd	r22, Y+5	; 0x05
    40ac:	7e 81       	ldd	r23, Y+6	; 0x06
    40ae:	8f 81       	ldd	r24, Y+7	; 0x07
    40b0:	98 85       	ldd	r25, Y+8	; 0x08
    40b2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	4a e7       	ldi	r20, 0x7A	; 122
    40c4:	54 e4       	ldi	r21, 0x44	; 68
    40c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	bc 01       	movw	r22, r24
    40d0:	cd 01       	movw	r24, r26
    40d2:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	9a 83       	std	Y+2, r25	; 0x02
    40dc:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	9c 81       	ldd	r25, Y+4	; 0x04
    40e2:	84 36       	cpi	r24, 0x64	; 100
    40e4:	91 05       	cpc	r25, r1
    40e6:	54 f0       	brlt	.+20     	; 0x40fc <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    40e8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ea:	9c 81       	ldd	r25, Y+4	; 0x04
    40ec:	2a e0       	ldi	r18, 0x0A	; 10
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	b9 01       	movw	r22, r18
    40f2:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodhi4>
    40f6:	cb 01       	movw	r24, r22
    40f8:	9c 83       	std	Y+4, r25	; 0x04
    40fa:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_DisplayInteger(integerPart);
    40fc:	8b 81       	ldd	r24, Y+3	; 0x03
    40fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4100:	aa 27       	eor	r26, r26
    4102:	97 fd       	sbrc	r25, 7
    4104:	a0 95       	com	r26
    4106:	ba 2f       	mov	r27, r26
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
    LCD_displayCharacter('.');
    4110:	8e e2       	ldi	r24, 0x2E	; 46
    4112:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
    LCD_DisplayInteger(decimalPart);
    4116:	89 81       	ldd	r24, Y+1	; 0x01
    4118:	9a 81       	ldd	r25, Y+2	; 0x02
    411a:	aa 27       	eor	r26, r26
    411c:	97 fd       	sbrc	r25, 7
    411e:	a0 95       	com	r26
    4120:	ba 2f       	mov	r27, r26
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
    
}
    412a:	28 96       	adiw	r28, 0x08	; 8
    412c:	0f b6       	in	r0, 0x3f	; 63
    412e:	f8 94       	cli
    4130:	de bf       	out	0x3e, r29	; 62
    4132:	0f be       	out	0x3f, r0	; 63
    4134:	cd bf       	out	0x3d, r28	; 61
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	08 95       	ret

0000413c <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	00 d0       	rcall	.+0      	; 0x4142 <displayMinusNumbers+0x6>
    4142:	00 d0       	rcall	.+0      	; 0x4144 <displayMinusNumbers+0x8>
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	69 83       	std	Y+1, r22	; 0x01
    414a:	7a 83       	std	Y+2, r23	; 0x02
    414c:	8b 83       	std	Y+3, r24	; 0x03
    414e:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    4150:	8d e2       	ldi	r24, 0x2D	; 45
    4152:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
	number = -number;
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	9a 81       	ldd	r25, Y+2	; 0x02
    415a:	ab 81       	ldd	r26, Y+3	; 0x03
    415c:	bc 81       	ldd	r27, Y+4	; 0x04
    415e:	b0 58       	subi	r27, 0x80	; 128
    4160:	89 83       	std	Y+1, r24	; 0x01
    4162:	9a 83       	std	Y+2, r25	; 0x02
    4164:	ab 83       	std	Y+3, r26	; 0x03
    4166:	bc 83       	std	Y+4, r27	; 0x04
	LCD_DisplayInteger(number);   
    4168:	69 81       	ldd	r22, Y+1	; 0x01
    416a:	7a 81       	ldd	r23, Y+2	; 0x02
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	bc 01       	movw	r22, r24
    417a:	cd 01       	movw	r24, r26
    417c:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
}
    4180:	0f 90       	pop	r0
    4182:	0f 90       	pop	r0
    4184:	0f 90       	pop	r0
    4186:	0f 90       	pop	r0
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	08 95       	ret

0000418e <KPD_voidInit>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
    418e:	df 93       	push	r29
    4190:	cf 93       	push	r28
    4192:	00 d0       	rcall	.+0      	; 0x4194 <KPD_voidInit+0x6>
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    4198:	1a 82       	std	Y+2, r1	; 0x02
    419a:	19 82       	std	Y+1, r1	; 0x01
    419c:	31 c0       	rjmp	.+98     	; 0x4200 <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	9a 81       	ldd	r25, Y+2	; 0x02
    41a2:	fc 01       	movw	r30, r24
    41a4:	e9 57       	subi	r30, 0x79	; 121
    41a6:	fe 4f       	sbci	r31, 0xFE	; 254
    41a8:	90 81       	ld	r25, Z
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	69 2f       	mov	r22, r25
    41ae:	41 e0       	ldi	r20, 0x01	; 1
    41b0:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	9a 81       	ldd	r25, Y+2	; 0x02
    41b8:	fc 01       	movw	r30, r24
    41ba:	e9 57       	subi	r30, 0x79	; 121
    41bc:	fe 4f       	sbci	r31, 0xFE	; 254
    41be:	90 81       	ld	r25, Z
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	69 2f       	mov	r22, r25
    41c4:	41 e0       	ldi	r20, 0x01	; 1
    41c6:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    41ca:	89 81       	ldd	r24, Y+1	; 0x01
    41cc:	9a 81       	ldd	r25, Y+2	; 0x02
    41ce:	fc 01       	movw	r30, r24
    41d0:	e5 57       	subi	r30, 0x75	; 117
    41d2:	fe 4f       	sbci	r31, 0xFE	; 254
    41d4:	90 81       	ld	r25, Z
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	69 2f       	mov	r22, r25
    41da:	40 e0       	ldi	r20, 0x00	; 0
    41dc:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
    41e4:	fc 01       	movw	r30, r24
    41e6:	e5 57       	subi	r30, 0x75	; 117
    41e8:	fe 4f       	sbci	r31, 0xFE	; 254
    41ea:	90 81       	ld	r25, Z
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	69 2f       	mov	r22, r25
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	9a 81       	ldd	r25, Y+2	; 0x02
    41fa:	01 96       	adiw	r24, 0x01	; 1
    41fc:	9a 83       	std	Y+2, r25	; 0x02
    41fe:	89 83       	std	Y+1, r24	; 0x01
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	84 30       	cpi	r24, 0x04	; 4
    4206:	91 05       	cpc	r25, r1
    4208:	54 f2       	brlt	.-108    	; 0x419e <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <KPD_u8GetKeyState>:



u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	cd b7       	in	r28, 0x3d	; 61
    421a:	de b7       	in	r29, 0x3e	; 62
    421c:	65 97       	sbiw	r28, 0x15	; 21
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	9d 8b       	std	Y+21, r25	; 0x15
    422a:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    4230:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    4232:	8c 89       	ldd	r24, Y+20	; 0x14
    4234:	9d 89       	ldd	r25, Y+21	; 0x15
    4236:	00 97       	sbiw	r24, 0x00	; 0
    4238:	09 f4       	brne	.+2      	; 0x423c <KPD_u8GetKeyState+0x28>
    423a:	f0 c0       	rjmp	.+480    	; 0x441c <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    423c:	ec 89       	ldd	r30, Y+20	; 0x14
    423e:	fd 89       	ldd	r31, Y+21	; 0x15
    4240:	8f ef       	ldi	r24, 0xFF	; 255
    4242:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    4244:	19 8a       	std	Y+17, r1	; 0x11
    4246:	e5 c0       	rjmp	.+458    	; 0x4412 <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    4248:	89 89       	ldd	r24, Y+17	; 0x11
    424a:	88 2f       	mov	r24, r24
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	fc 01       	movw	r30, r24
    4250:	e9 57       	subi	r30, 0x79	; 121
    4252:	fe 4f       	sbci	r31, 0xFE	; 254
    4254:	90 81       	ld	r25, Z
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	69 2f       	mov	r22, r25
    425a:	40 e0       	ldi	r20, 0x00	; 0
    425c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    4260:	18 8a       	std	Y+16, r1	; 0x10
    4262:	c1 c0       	rjmp	.+386    	; 0x43e6 <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    4264:	88 89       	ldd	r24, Y+16	; 0x10
    4266:	88 2f       	mov	r24, r24
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	fc 01       	movw	r30, r24
    426c:	e5 57       	subi	r30, 0x75	; 117
    426e:	fe 4f       	sbci	r31, 0xFE	; 254
    4270:	90 81       	ld	r25, Z
    4272:	9e 01       	movw	r18, r28
    4274:	2d 5e       	subi	r18, 0xED	; 237
    4276:	3f 4f       	sbci	r19, 0xFF	; 255
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	69 2f       	mov	r22, r25
    427c:	a9 01       	movw	r20, r18
    427e:	0e 94 23 13 	call	0x2646	; 0x2646 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    4282:	8b 89       	ldd	r24, Y+19	; 0x13
    4284:	88 23       	and	r24, r24
    4286:	09 f0       	breq	.+2      	; 0x428a <KPD_u8GetKeyState+0x76>
    4288:	ab c0       	rjmp	.+342    	; 0x43e0 <KPD_u8GetKeyState+0x1cc>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	a0 ea       	ldi	r26, 0xA0	; 160
    4290:	b1 e4       	ldi	r27, 0x41	; 65
    4292:	8b 87       	std	Y+11, r24	; 0x0b
    4294:	9c 87       	std	Y+12, r25	; 0x0c
    4296:	ad 87       	std	Y+13, r26	; 0x0d
    4298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429a:	6b 85       	ldd	r22, Y+11	; 0x0b
    429c:	7c 85       	ldd	r23, Y+12	; 0x0c
    429e:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4a e7       	ldi	r20, 0x7A	; 122
    42a8:	55 e4       	ldi	r21, 0x45	; 69
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8f 83       	std	Y+7, r24	; 0x07
    42b4:	98 87       	std	Y+8, r25	; 0x08
    42b6:	a9 87       	std	Y+9, r26	; 0x09
    42b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42ba:	6f 81       	ldd	r22, Y+7	; 0x07
    42bc:	78 85       	ldd	r23, Y+8	; 0x08
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	2c f4       	brge	.+10     	; 0x42dc <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	3f c0       	rjmp	.+126    	; 0x435a <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    42dc:	6f 81       	ldd	r22, Y+7	; 0x07
    42de:	78 85       	ldd	r23, Y+8	; 0x08
    42e0:	89 85       	ldd	r24, Y+9	; 0x09
    42e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	3f ef       	ldi	r19, 0xFF	; 255
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	57 e4       	ldi	r21, 0x47	; 71
    42ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	4c f5       	brge	.+82     	; 0x4346 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e2       	ldi	r20, 0x20	; 32
    4302:	51 e4       	ldi	r21, 0x41	; 65
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	9e 83       	std	Y+6, r25	; 0x06
    431a:	8d 83       	std	Y+5, r24	; 0x05
    431c:	0f c0       	rjmp	.+30     	; 0x433c <KPD_u8GetKeyState+0x128>
    431e:	80 e9       	ldi	r24, 0x90	; 144
    4320:	91 e0       	ldi	r25, 0x01	; 1
    4322:	9c 83       	std	Y+4, r25	; 0x04
    4324:	8b 83       	std	Y+3, r24	; 0x03
    4326:	8b 81       	ldd	r24, Y+3	; 0x03
    4328:	9c 81       	ldd	r25, Y+4	; 0x04
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <KPD_u8GetKeyState+0x116>
    432e:	9c 83       	std	Y+4, r25	; 0x04
    4330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	8d 81       	ldd	r24, Y+5	; 0x05
    4334:	9e 81       	ldd	r25, Y+6	; 0x06
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	9e 83       	std	Y+6, r25	; 0x06
    433a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433c:	8d 81       	ldd	r24, Y+5	; 0x05
    433e:	9e 81       	ldd	r25, Y+6	; 0x06
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	69 f7       	brne	.-38     	; 0x431e <KPD_u8GetKeyState+0x10a>
    4344:	14 c0       	rjmp	.+40     	; 0x436e <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4346:	6f 81       	ldd	r22, Y+7	; 0x07
    4348:	78 85       	ldd	r23, Y+8	; 0x08
    434a:	89 85       	ldd	r24, Y+9	; 0x09
    434c:	9a 85       	ldd	r25, Y+10	; 0x0a
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	9e 83       	std	Y+6, r25	; 0x06
    4358:	8d 83       	std	Y+5, r24	; 0x05
    435a:	8d 81       	ldd	r24, Y+5	; 0x05
    435c:	9e 81       	ldd	r25, Y+6	; 0x06
    435e:	9a 83       	std	Y+2, r25	; 0x02
    4360:	89 83       	std	Y+1, r24	; 0x01
    4362:	89 81       	ldd	r24, Y+1	; 0x01
    4364:	9a 81       	ldd	r25, Y+2	; 0x02
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <KPD_u8GetKeyState+0x152>
    436a:	9a 83       	std	Y+2, r25	; 0x02
    436c:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    436e:	88 89       	ldd	r24, Y+16	; 0x10
    4370:	88 2f       	mov	r24, r24
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	fc 01       	movw	r30, r24
    4376:	e5 57       	subi	r30, 0x75	; 117
    4378:	fe 4f       	sbci	r31, 0xFE	; 254
    437a:	90 81       	ld	r25, Z
    437c:	9e 01       	movw	r18, r28
    437e:	2d 5e       	subi	r18, 0xED	; 237
    4380:	3f 4f       	sbci	r19, 0xFF	; 255
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	69 2f       	mov	r22, r25
    4386:	a9 01       	movw	r20, r18
    4388:	0e 94 23 13 	call	0x2646	; 0x2646 <DIO_u8GetPinValue>
    438c:	0f c0       	rjmp	.+30     	; 0x43ac <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    438e:	88 89       	ldd	r24, Y+16	; 0x10
    4390:	88 2f       	mov	r24, r24
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	fc 01       	movw	r30, r24
    4396:	e5 57       	subi	r30, 0x75	; 117
    4398:	fe 4f       	sbci	r31, 0xFE	; 254
    439a:	90 81       	ld	r25, Z
    439c:	9e 01       	movw	r18, r28
    439e:	2d 5e       	subi	r18, 0xED	; 237
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	69 2f       	mov	r22, r25
    43a6:	a9 01       	movw	r20, r18
    43a8:	0e 94 23 13 	call	0x2646	; 0x2646 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    43ac:	8b 89       	ldd	r24, Y+19	; 0x13
    43ae:	88 23       	and	r24, r24
    43b0:	71 f3       	breq	.-36     	; 0x438e <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    43b2:	89 89       	ldd	r24, Y+17	; 0x11
    43b4:	48 2f       	mov	r20, r24
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	88 89       	ldd	r24, Y+16	; 0x10
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	ca 01       	movw	r24, r20
    43c0:	88 0f       	add	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	88 0f       	add	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	82 0f       	add	r24, r18
    43ca:	93 1f       	adc	r25, r19
    43cc:	fc 01       	movw	r30, r24
    43ce:	e9 58       	subi	r30, 0x89	; 137
    43d0:	fe 4f       	sbci	r31, 0xFE	; 254
    43d2:	80 81       	ld	r24, Z
    43d4:	ec 89       	ldd	r30, Y+20	; 0x14
    43d6:	fd 89       	ldd	r31, Y+21	; 0x15
    43d8:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	8f 87       	std	Y+15, r24	; 0x0f
    43de:	07 c0       	rjmp	.+14     	; 0x43ee <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    43e0:	88 89       	ldd	r24, Y+16	; 0x10
    43e2:	8f 5f       	subi	r24, 0xFF	; 255
    43e4:	88 8b       	std	Y+16, r24	; 0x10
    43e6:	88 89       	ldd	r24, Y+16	; 0x10
    43e8:	84 30       	cpi	r24, 0x04	; 4
    43ea:	08 f4       	brcc	.+2      	; 0x43ee <KPD_u8GetKeyState+0x1da>
    43ec:	3b cf       	rjmp	.-394    	; 0x4264 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    43ee:	89 89       	ldd	r24, Y+17	; 0x11
    43f0:	88 2f       	mov	r24, r24
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	fc 01       	movw	r30, r24
    43f6:	e9 57       	subi	r30, 0x79	; 121
    43f8:	fe 4f       	sbci	r31, 0xFE	; 254
    43fa:	90 81       	ld	r25, Z
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	69 2f       	mov	r22, r25
    4400:	41 e0       	ldi	r20, 0x01	; 1
    4402:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
			if(Local_u8Flag){
    4406:	8f 85       	ldd	r24, Y+15	; 0x0f
    4408:	88 23       	and	r24, r24
    440a:	49 f4       	brne	.+18     	; 0x441e <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    440c:	89 89       	ldd	r24, Y+17	; 0x11
    440e:	8f 5f       	subi	r24, 0xFF	; 255
    4410:	89 8b       	std	Y+17, r24	; 0x11
    4412:	89 89       	ldd	r24, Y+17	; 0x11
    4414:	84 30       	cpi	r24, 0x04	; 4
    4416:	08 f4       	brcc	.+2      	; 0x441a <KPD_u8GetKeyState+0x206>
    4418:	17 cf       	rjmp	.-466    	; 0x4248 <KPD_u8GetKeyState+0x34>
    441a:	01 c0       	rjmp	.+2      	; 0x441e <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    441c:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    441e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    4420:	65 96       	adiw	r28, 0x15	; 21
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	cf 91       	pop	r28
    442e:	df 91       	pop	r29
    4430:	08 95       	ret

00004432 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h"

#include "DC_Motor_Config.h"
#include "DC_Motor_Private.h"

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    4432:	df 93       	push	r29
    4434:	cf 93       	push	r28
    4436:	00 d0       	rcall	.+0      	; 0x4438 <DC_Motor_Init+0x6>
    4438:	0f 92       	push	r0
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	8a 83       	std	Y+2, r24	; 0x02
    4440:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	81 30       	cpi	r24, 0x01	; 1
    444a:	79 f4       	brne	.+30     	; 0x446a <DC_Motor_Init+0x38>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, DIO_u8_OUTPUT);
    444c:	83 e0       	ldi	r24, 0x03	; 3
    444e:	62 e0       	ldi	r22, 0x02	; 2
    4450:	41 e0       	ldi	r20, 0x01	; 1
    4452:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_u8_OUTPUT);
    4456:	83 e0       	ldi	r24, 0x03	; 3
    4458:	60 e0       	ldi	r22, 0x00	; 0
    445a:	41 e0       	ldi	r20, 0x01	; 1
    445c:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_u8_OUTPUT);
    4460:	83 e0       	ldi	r24, 0x03	; 3
    4462:	61 e0       	ldi	r22, 0x01	; 1
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
	}

	if(Copy_u8_Motor2 == MOTOR_Connected){
    446a:	8b 81       	ldd	r24, Y+3	; 0x03
    446c:	81 30       	cpi	r24, 0x01	; 1
    446e:	81 f4       	brne	.+32     	; 0x4490 <DC_Motor_Init+0x5e>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, DIO_u8_OUTPUT);
    4470:	83 e0       	ldi	r24, 0x03	; 3
    4472:	63 e0       	ldi	r22, 0x03	; 3
    4474:	41 e0       	ldi	r20, 0x01	; 1
    4476:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_u8_OUTPUT);
    447a:	83 e0       	ldi	r24, 0x03	; 3
    447c:	66 e0       	ldi	r22, 0x06	; 6
    447e:	41 e0       	ldi	r20, 0x01	; 1
    4480:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_u8_OUTPUT);
    4484:	83 e0       	ldi	r24, 0x03	; 3
    4486:	67 e0       	ldi	r22, 0x07	; 7
    4488:	41 e0       	ldi	r20, 0x01	; 1
    448a:	0e 94 c8 10 	call	0x2190	; 0x2190 <DIO_u8SetPinDirection>
    448e:	01 c0       	rjmp	.+2      	; 0x4492 <DC_Motor_Init+0x60>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4490:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4492:	89 81       	ldd	r24, Y+1	; 0x01
}
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	08 95       	ret

000044a0 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    44a0:	df 93       	push	r29
    44a2:	cf 93       	push	r28
    44a4:	cd b7       	in	r28, 0x3d	; 61
    44a6:	de b7       	in	r29, 0x3e	; 62
    44a8:	29 97       	sbiw	r28, 0x09	; 9
    44aa:	0f b6       	in	r0, 0x3f	; 63
    44ac:	f8 94       	cli
    44ae:	de bf       	out	0x3e, r29	; 62
    44b0:	0f be       	out	0x3f, r0	; 63
    44b2:	cd bf       	out	0x3d, r28	; 61
    44b4:	8a 83       	std	Y+2, r24	; 0x02
    44b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    44bc:	8a 81       	ldd	r24, Y+2	; 0x02
    44be:	28 2f       	mov	r18, r24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	39 87       	std	Y+9, r19	; 0x09
    44c4:	28 87       	std	Y+8, r18	; 0x08
    44c6:	88 85       	ldd	r24, Y+8	; 0x08
    44c8:	99 85       	ldd	r25, Y+9	; 0x09
    44ca:	00 97       	sbiw	r24, 0x00	; 0
    44cc:	31 f0       	breq	.+12     	; 0x44da <DC_Motor_Rotate+0x3a>
    44ce:	28 85       	ldd	r18, Y+8	; 0x08
    44d0:	39 85       	ldd	r19, Y+9	; 0x09
    44d2:	21 30       	cpi	r18, 0x01	; 1
    44d4:	31 05       	cpc	r19, r1
    44d6:	89 f1       	breq	.+98     	; 0x453a <DC_Motor_Rotate+0x9a>
    44d8:	60 c0       	rjmp	.+192    	; 0x459a <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    44da:	8b 81       	ldd	r24, Y+3	; 0x03
    44dc:	28 2f       	mov	r18, r24
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	3f 83       	std	Y+7, r19	; 0x07
    44e2:	2e 83       	std	Y+6, r18	; 0x06
    44e4:	8e 81       	ldd	r24, Y+6	; 0x06
    44e6:	9f 81       	ldd	r25, Y+7	; 0x07
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	a9 f0       	breq	.+42     	; 0x4516 <DC_Motor_Rotate+0x76>
    44ec:	2e 81       	ldd	r18, Y+6	; 0x06
    44ee:	3f 81       	ldd	r19, Y+7	; 0x07
    44f0:	21 30       	cpi	r18, 0x01	; 1
    44f2:	31 05       	cpc	r19, r1
    44f4:	01 f5       	brne	.+64     	; 0x4536 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    44f6:	83 e0       	ldi	r24, 0x03	; 3
    44f8:	62 e0       	ldi	r22, 0x02	; 2
    44fa:	41 e0       	ldi	r20, 0x01	; 1
    44fc:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    4500:	83 e0       	ldi	r24, 0x03	; 3
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	41 e0       	ldi	r20, 0x01	; 1
    4506:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    450a:	83 e0       	ldi	r24, 0x03	; 3
    450c:	61 e0       	ldi	r22, 0x01	; 1
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
    4514:	43 c0       	rjmp	.+134    	; 0x459c <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4516:	83 e0       	ldi	r24, 0x03	; 3
    4518:	62 e0       	ldi	r22, 0x02	; 2
    451a:	41 e0       	ldi	r20, 0x01	; 1
    451c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    4520:	83 e0       	ldi	r24, 0x03	; 3
    4522:	60 e0       	ldi	r22, 0x00	; 0
    4524:	40 e0       	ldi	r20, 0x00	; 0
    4526:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    452a:	83 e0       	ldi	r24, 0x03	; 3
    452c:	61 e0       	ldi	r22, 0x01	; 1
    452e:	41 e0       	ldi	r20, 0x01	; 1
    4530:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
    4534:	33 c0       	rjmp	.+102    	; 0x459c <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4536:	19 82       	std	Y+1, r1	; 0x01
    4538:	31 c0       	rjmp	.+98     	; 0x459c <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    453a:	8b 81       	ldd	r24, Y+3	; 0x03
    453c:	28 2f       	mov	r18, r24
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	3d 83       	std	Y+5, r19	; 0x05
    4542:	2c 83       	std	Y+4, r18	; 0x04
    4544:	8c 81       	ldd	r24, Y+4	; 0x04
    4546:	9d 81       	ldd	r25, Y+5	; 0x05
    4548:	00 97       	sbiw	r24, 0x00	; 0
    454a:	a9 f0       	breq	.+42     	; 0x4576 <DC_Motor_Rotate+0xd6>
    454c:	2c 81       	ldd	r18, Y+4	; 0x04
    454e:	3d 81       	ldd	r19, Y+5	; 0x05
    4550:	21 30       	cpi	r18, 0x01	; 1
    4552:	31 05       	cpc	r19, r1
    4554:	01 f5       	brne	.+64     	; 0x4596 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    4556:	83 e0       	ldi	r24, 0x03	; 3
    4558:	63 e0       	ldi	r22, 0x03	; 3
    455a:	41 e0       	ldi	r20, 0x01	; 1
    455c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    4560:	83 e0       	ldi	r24, 0x03	; 3
    4562:	66 e0       	ldi	r22, 0x06	; 6
    4564:	41 e0       	ldi	r20, 0x01	; 1
    4566:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    456a:	83 e0       	ldi	r24, 0x03	; 3
    456c:	67 e0       	ldi	r22, 0x07	; 7
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
    4574:	13 c0       	rjmp	.+38     	; 0x459c <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    4576:	83 e0       	ldi	r24, 0x03	; 3
    4578:	63 e0       	ldi	r22, 0x03	; 3
    457a:	41 e0       	ldi	r20, 0x01	; 1
    457c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    4580:	83 e0       	ldi	r24, 0x03	; 3
    4582:	66 e0       	ldi	r22, 0x06	; 6
    4584:	40 e0       	ldi	r20, 0x00	; 0
    4586:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    458a:	83 e0       	ldi	r24, 0x03	; 3
    458c:	67 e0       	ldi	r22, 0x07	; 7
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
    4594:	03 c0       	rjmp	.+6      	; 0x459c <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4596:	19 82       	std	Y+1, r1	; 0x01
    4598:	01 c0       	rjmp	.+2      	; 0x459c <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    459a:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    459c:	89 81       	ldd	r24, Y+1	; 0x01
}
    459e:	29 96       	adiw	r28, 0x09	; 9
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	08 95       	ret

000045b0 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	00 d0       	rcall	.+0      	; 0x45b6 <DC_Motor_Stop+0x6>
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
    45ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	88 23       	and	r24, r24
    45c4:	31 f4       	brne	.+12     	; 0x45d2 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    45c6:	83 e0       	ldi	r24, 0x03	; 3
    45c8:	62 e0       	ldi	r22, 0x02	; 2
    45ca:	40 e0       	ldi	r20, 0x00	; 0
    45cc:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
    45d0:	0a c0       	rjmp	.+20     	; 0x45e6 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    45d2:	8a 81       	ldd	r24, Y+2	; 0x02
    45d4:	81 30       	cpi	r24, 0x01	; 1
    45d6:	31 f4       	brne	.+12     	; 0x45e4 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    45d8:	83 e0       	ldi	r24, 0x03	; 3
    45da:	63 e0       	ldi	r22, 0x03	; 3
    45dc:	40 e0       	ldi	r20, 0x00	; 0
    45de:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
    45e2:	01 c0       	rjmp	.+2      	; 0x45e6 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    45e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    45e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    45e8:	0f 90       	pop	r0
    45ea:	0f 90       	pop	r0
    45ec:	cf 91       	pop	r28
    45ee:	df 91       	pop	r29
    45f0:	08 95       	ret

000045f2 <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    45f2:	df 93       	push	r29
    45f4:	cf 93       	push	r28
    45f6:	0f 92       	push	r0
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    45fe:	89 81       	ldd	r24, Y+1	; 0x01
    4600:	61 e0       	ldi	r22, 0x01	; 1
    4602:	0e 94 63 14 	call	0x28c6	; 0x28c6 <DIO_u8SetPortDirection>
}
    4606:	0f 90       	pop	r0
    4608:	cf 91       	pop	r28
    460a:	df 91       	pop	r29
    460c:	08 95       	ret

0000460e <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    460e:	af 92       	push	r10
    4610:	cf 92       	push	r12
    4612:	ef 92       	push	r14
    4614:	0f 93       	push	r16
    4616:	df 93       	push	r29
    4618:	cf 93       	push	r28
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	2a 97       	sbiw	r28, 0x0a	; 10
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	cd bf       	out	0x3d, r28	; 61
    462a:	89 83       	std	Y+1, r24	; 0x01
    462c:	6a 83       	std	Y+2, r22	; 0x02
    462e:	4b 83       	std	Y+3, r20	; 0x03
    4630:	2c 83       	std	Y+4, r18	; 0x04
    4632:	0d 83       	std	Y+5, r16	; 0x05
    4634:	ee 82       	std	Y+6, r14	; 0x06
    4636:	cf 82       	std	Y+7, r12	; 0x07
    4638:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	28 2f       	mov	r18, r24
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	3a 87       	std	Y+10, r19	; 0x0a
    4642:	29 87       	std	Y+9, r18	; 0x09
    4644:	89 85       	ldd	r24, Y+9	; 0x09
    4646:	9a 85       	ldd	r25, Y+10	; 0x0a
    4648:	81 30       	cpi	r24, 0x01	; 1
    464a:	91 05       	cpc	r25, r1
    464c:	09 f4       	brne	.+2      	; 0x4650 <SevenSegment_Display+0x42>
    464e:	96 c0       	rjmp	.+300    	; 0x477c <SevenSegment_Display+0x16e>
    4650:	29 85       	ldd	r18, Y+9	; 0x09
    4652:	3a 85       	ldd	r19, Y+10	; 0x0a
    4654:	22 30       	cpi	r18, 0x02	; 2
    4656:	31 05       	cpc	r19, r1
    4658:	2c f4       	brge	.+10     	; 0x4664 <SevenSegment_Display+0x56>
    465a:	89 85       	ldd	r24, Y+9	; 0x09
    465c:	9a 85       	ldd	r25, Y+10	; 0x0a
    465e:	00 97       	sbiw	r24, 0x00	; 0
    4660:	71 f0       	breq	.+28     	; 0x467e <SevenSegment_Display+0x70>
    4662:	08 c2       	rjmp	.+1040   	; 0x4a74 <SevenSegment_Display+0x466>
    4664:	29 85       	ldd	r18, Y+9	; 0x09
    4666:	3a 85       	ldd	r19, Y+10	; 0x0a
    4668:	22 30       	cpi	r18, 0x02	; 2
    466a:	31 05       	cpc	r19, r1
    466c:	09 f4       	brne	.+2      	; 0x4670 <SevenSegment_Display+0x62>
    466e:	05 c1       	rjmp	.+522    	; 0x487a <SevenSegment_Display+0x26c>
    4670:	89 85       	ldd	r24, Y+9	; 0x09
    4672:	9a 85       	ldd	r25, Y+10	; 0x0a
    4674:	83 30       	cpi	r24, 0x03	; 3
    4676:	91 05       	cpc	r25, r1
    4678:	09 f4       	brne	.+2      	; 0x467c <SevenSegment_Display+0x6e>
    467a:	7e c1       	rjmp	.+764    	; 0x4978 <SevenSegment_Display+0x36a>
    467c:	fb c1       	rjmp	.+1014   	; 0x4a74 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    467e:	8a 81       	ldd	r24, Y+2	; 0x02
    4680:	81 30       	cpi	r24, 0x01	; 1
    4682:	41 f4       	brne	.+16     	; 0x4694 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4684:	ab e3       	ldi	r26, 0x3B	; 59
    4686:	b0 e0       	ldi	r27, 0x00	; 0
    4688:	eb e3       	ldi	r30, 0x3B	; 59
    468a:	f0 e0       	ldi	r31, 0x00	; 0
    468c:	80 81       	ld	r24, Z
    468e:	81 60       	ori	r24, 0x01	; 1
    4690:	8c 93       	st	X, r24
    4692:	07 c0       	rjmp	.+14     	; 0x46a2 <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4694:	ab e3       	ldi	r26, 0x3B	; 59
    4696:	b0 e0       	ldi	r27, 0x00	; 0
    4698:	eb e3       	ldi	r30, 0x3B	; 59
    469a:	f0 e0       	ldi	r31, 0x00	; 0
    469c:	80 81       	ld	r24, Z
    469e:	8e 7f       	andi	r24, 0xFE	; 254
    46a0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    46a2:	8b 81       	ldd	r24, Y+3	; 0x03
    46a4:	81 30       	cpi	r24, 0x01	; 1
    46a6:	41 f4       	brne	.+16     	; 0x46b8 <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    46a8:	ab e3       	ldi	r26, 0x3B	; 59
    46aa:	b0 e0       	ldi	r27, 0x00	; 0
    46ac:	eb e3       	ldi	r30, 0x3B	; 59
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	80 81       	ld	r24, Z
    46b2:	82 60       	ori	r24, 0x02	; 2
    46b4:	8c 93       	st	X, r24
    46b6:	07 c0       	rjmp	.+14     	; 0x46c6 <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    46b8:	ab e3       	ldi	r26, 0x3B	; 59
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	eb e3       	ldi	r30, 0x3B	; 59
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	80 81       	ld	r24, Z
    46c2:	8d 7f       	andi	r24, 0xFD	; 253
    46c4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    46c6:	8c 81       	ldd	r24, Y+4	; 0x04
    46c8:	81 30       	cpi	r24, 0x01	; 1
    46ca:	41 f4       	brne	.+16     	; 0x46dc <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    46cc:	ab e3       	ldi	r26, 0x3B	; 59
    46ce:	b0 e0       	ldi	r27, 0x00	; 0
    46d0:	eb e3       	ldi	r30, 0x3B	; 59
    46d2:	f0 e0       	ldi	r31, 0x00	; 0
    46d4:	80 81       	ld	r24, Z
    46d6:	84 60       	ori	r24, 0x04	; 4
    46d8:	8c 93       	st	X, r24
    46da:	07 c0       	rjmp	.+14     	; 0x46ea <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    46dc:	ab e3       	ldi	r26, 0x3B	; 59
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	eb e3       	ldi	r30, 0x3B	; 59
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	8b 7f       	andi	r24, 0xFB	; 251
    46e8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    46ea:	8d 81       	ldd	r24, Y+5	; 0x05
    46ec:	81 30       	cpi	r24, 0x01	; 1
    46ee:	41 f4       	brne	.+16     	; 0x4700 <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    46f0:	ab e3       	ldi	r26, 0x3B	; 59
    46f2:	b0 e0       	ldi	r27, 0x00	; 0
    46f4:	eb e3       	ldi	r30, 0x3B	; 59
    46f6:	f0 e0       	ldi	r31, 0x00	; 0
    46f8:	80 81       	ld	r24, Z
    46fa:	88 60       	ori	r24, 0x08	; 8
    46fc:	8c 93       	st	X, r24
    46fe:	07 c0       	rjmp	.+14     	; 0x470e <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    4700:	ab e3       	ldi	r26, 0x3B	; 59
    4702:	b0 e0       	ldi	r27, 0x00	; 0
    4704:	eb e3       	ldi	r30, 0x3B	; 59
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	80 81       	ld	r24, Z
    470a:	87 7f       	andi	r24, 0xF7	; 247
    470c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    470e:	8e 81       	ldd	r24, Y+6	; 0x06
    4710:	81 30       	cpi	r24, 0x01	; 1
    4712:	41 f4       	brne	.+16     	; 0x4724 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4714:	ab e3       	ldi	r26, 0x3B	; 59
    4716:	b0 e0       	ldi	r27, 0x00	; 0
    4718:	eb e3       	ldi	r30, 0x3B	; 59
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	80 81       	ld	r24, Z
    471e:	80 61       	ori	r24, 0x10	; 16
    4720:	8c 93       	st	X, r24
    4722:	07 c0       	rjmp	.+14     	; 0x4732 <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4724:	ab e3       	ldi	r26, 0x3B	; 59
    4726:	b0 e0       	ldi	r27, 0x00	; 0
    4728:	eb e3       	ldi	r30, 0x3B	; 59
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	80 81       	ld	r24, Z
    472e:	8f 7e       	andi	r24, 0xEF	; 239
    4730:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4732:	8f 81       	ldd	r24, Y+7	; 0x07
    4734:	81 30       	cpi	r24, 0x01	; 1
    4736:	41 f4       	brne	.+16     	; 0x4748 <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4738:	ab e3       	ldi	r26, 0x3B	; 59
    473a:	b0 e0       	ldi	r27, 0x00	; 0
    473c:	eb e3       	ldi	r30, 0x3B	; 59
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	80 62       	ori	r24, 0x20	; 32
    4744:	8c 93       	st	X, r24
    4746:	07 c0       	rjmp	.+14     	; 0x4756 <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4748:	ab e3       	ldi	r26, 0x3B	; 59
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	eb e3       	ldi	r30, 0x3B	; 59
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	80 81       	ld	r24, Z
    4752:	8f 7d       	andi	r24, 0xDF	; 223
    4754:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4756:	88 85       	ldd	r24, Y+8	; 0x08
    4758:	81 30       	cpi	r24, 0x01	; 1
    475a:	41 f4       	brne	.+16     	; 0x476c <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    475c:	ab e3       	ldi	r26, 0x3B	; 59
    475e:	b0 e0       	ldi	r27, 0x00	; 0
    4760:	eb e3       	ldi	r30, 0x3B	; 59
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	80 81       	ld	r24, Z
    4766:	80 64       	ori	r24, 0x40	; 64
    4768:	8c 93       	st	X, r24
    476a:	84 c1       	rjmp	.+776    	; 0x4a74 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    476c:	ab e3       	ldi	r26, 0x3B	; 59
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	eb e3       	ldi	r30, 0x3B	; 59
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	80 81       	ld	r24, Z
    4776:	8f 7b       	andi	r24, 0xBF	; 191
    4778:	8c 93       	st	X, r24
    477a:	7c c1       	rjmp	.+760    	; 0x4a74 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    477c:	8a 81       	ldd	r24, Y+2	; 0x02
    477e:	81 30       	cpi	r24, 0x01	; 1
    4780:	41 f4       	brne	.+16     	; 0x4792 <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4782:	a8 e3       	ldi	r26, 0x38	; 56
    4784:	b0 e0       	ldi	r27, 0x00	; 0
    4786:	e8 e3       	ldi	r30, 0x38	; 56
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	80 81       	ld	r24, Z
    478c:	81 60       	ori	r24, 0x01	; 1
    478e:	8c 93       	st	X, r24
    4790:	07 c0       	rjmp	.+14     	; 0x47a0 <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4792:	a8 e3       	ldi	r26, 0x38	; 56
    4794:	b0 e0       	ldi	r27, 0x00	; 0
    4796:	e8 e3       	ldi	r30, 0x38	; 56
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	80 81       	ld	r24, Z
    479c:	8e 7f       	andi	r24, 0xFE	; 254
    479e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    47a0:	8b 81       	ldd	r24, Y+3	; 0x03
    47a2:	81 30       	cpi	r24, 0x01	; 1
    47a4:	41 f4       	brne	.+16     	; 0x47b6 <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    47a6:	a8 e3       	ldi	r26, 0x38	; 56
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	e8 e3       	ldi	r30, 0x38	; 56
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	80 81       	ld	r24, Z
    47b0:	82 60       	ori	r24, 0x02	; 2
    47b2:	8c 93       	st	X, r24
    47b4:	07 c0       	rjmp	.+14     	; 0x47c4 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    47b6:	a8 e3       	ldi	r26, 0x38	; 56
    47b8:	b0 e0       	ldi	r27, 0x00	; 0
    47ba:	e8 e3       	ldi	r30, 0x38	; 56
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	80 81       	ld	r24, Z
    47c0:	8d 7f       	andi	r24, 0xFD	; 253
    47c2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    47c4:	8c 81       	ldd	r24, Y+4	; 0x04
    47c6:	81 30       	cpi	r24, 0x01	; 1
    47c8:	41 f4       	brne	.+16     	; 0x47da <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    47ca:	a8 e3       	ldi	r26, 0x38	; 56
    47cc:	b0 e0       	ldi	r27, 0x00	; 0
    47ce:	e8 e3       	ldi	r30, 0x38	; 56
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	80 81       	ld	r24, Z
    47d4:	84 60       	ori	r24, 0x04	; 4
    47d6:	8c 93       	st	X, r24
    47d8:	07 c0       	rjmp	.+14     	; 0x47e8 <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    47da:	a8 e3       	ldi	r26, 0x38	; 56
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	e8 e3       	ldi	r30, 0x38	; 56
    47e0:	f0 e0       	ldi	r31, 0x00	; 0
    47e2:	80 81       	ld	r24, Z
    47e4:	8b 7f       	andi	r24, 0xFB	; 251
    47e6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    47e8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ea:	81 30       	cpi	r24, 0x01	; 1
    47ec:	41 f4       	brne	.+16     	; 0x47fe <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    47ee:	a8 e3       	ldi	r26, 0x38	; 56
    47f0:	b0 e0       	ldi	r27, 0x00	; 0
    47f2:	e8 e3       	ldi	r30, 0x38	; 56
    47f4:	f0 e0       	ldi	r31, 0x00	; 0
    47f6:	80 81       	ld	r24, Z
    47f8:	88 60       	ori	r24, 0x08	; 8
    47fa:	8c 93       	st	X, r24
    47fc:	07 c0       	rjmp	.+14     	; 0x480c <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    47fe:	a8 e3       	ldi	r26, 0x38	; 56
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	e8 e3       	ldi	r30, 0x38	; 56
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	87 7f       	andi	r24, 0xF7	; 247
    480a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    480c:	8e 81       	ldd	r24, Y+6	; 0x06
    480e:	81 30       	cpi	r24, 0x01	; 1
    4810:	41 f4       	brne	.+16     	; 0x4822 <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4812:	a8 e3       	ldi	r26, 0x38	; 56
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	e8 e3       	ldi	r30, 0x38	; 56
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	80 81       	ld	r24, Z
    481c:	80 61       	ori	r24, 0x10	; 16
    481e:	8c 93       	st	X, r24
    4820:	07 c0       	rjmp	.+14     	; 0x4830 <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4822:	a8 e3       	ldi	r26, 0x38	; 56
    4824:	b0 e0       	ldi	r27, 0x00	; 0
    4826:	e8 e3       	ldi	r30, 0x38	; 56
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	80 81       	ld	r24, Z
    482c:	8f 7e       	andi	r24, 0xEF	; 239
    482e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4830:	8f 81       	ldd	r24, Y+7	; 0x07
    4832:	81 30       	cpi	r24, 0x01	; 1
    4834:	41 f4       	brne	.+16     	; 0x4846 <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4836:	a8 e3       	ldi	r26, 0x38	; 56
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	e8 e3       	ldi	r30, 0x38	; 56
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	80 62       	ori	r24, 0x20	; 32
    4842:	8c 93       	st	X, r24
    4844:	07 c0       	rjmp	.+14     	; 0x4854 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4846:	a8 e3       	ldi	r26, 0x38	; 56
    4848:	b0 e0       	ldi	r27, 0x00	; 0
    484a:	e8 e3       	ldi	r30, 0x38	; 56
    484c:	f0 e0       	ldi	r31, 0x00	; 0
    484e:	80 81       	ld	r24, Z
    4850:	8f 7d       	andi	r24, 0xDF	; 223
    4852:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4854:	88 85       	ldd	r24, Y+8	; 0x08
    4856:	81 30       	cpi	r24, 0x01	; 1
    4858:	41 f4       	brne	.+16     	; 0x486a <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    485a:	a8 e3       	ldi	r26, 0x38	; 56
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e8 e3       	ldi	r30, 0x38	; 56
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	80 64       	ori	r24, 0x40	; 64
    4866:	8c 93       	st	X, r24
    4868:	05 c1       	rjmp	.+522    	; 0x4a74 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    486a:	a8 e3       	ldi	r26, 0x38	; 56
    486c:	b0 e0       	ldi	r27, 0x00	; 0
    486e:	e8 e3       	ldi	r30, 0x38	; 56
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	80 81       	ld	r24, Z
    4874:	8f 7b       	andi	r24, 0xBF	; 191
    4876:	8c 93       	st	X, r24
    4878:	fd c0       	rjmp	.+506    	; 0x4a74 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    487a:	8a 81       	ldd	r24, Y+2	; 0x02
    487c:	81 30       	cpi	r24, 0x01	; 1
    487e:	41 f4       	brne	.+16     	; 0x4890 <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    4880:	a5 e3       	ldi	r26, 0x35	; 53
    4882:	b0 e0       	ldi	r27, 0x00	; 0
    4884:	e5 e3       	ldi	r30, 0x35	; 53
    4886:	f0 e0       	ldi	r31, 0x00	; 0
    4888:	80 81       	ld	r24, Z
    488a:	81 60       	ori	r24, 0x01	; 1
    488c:	8c 93       	st	X, r24
    488e:	07 c0       	rjmp	.+14     	; 0x489e <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    4890:	a5 e3       	ldi	r26, 0x35	; 53
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	e5 e3       	ldi	r30, 0x35	; 53
    4896:	f0 e0       	ldi	r31, 0x00	; 0
    4898:	80 81       	ld	r24, Z
    489a:	8e 7f       	andi	r24, 0xFE	; 254
    489c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    489e:	8b 81       	ldd	r24, Y+3	; 0x03
    48a0:	81 30       	cpi	r24, 0x01	; 1
    48a2:	41 f4       	brne	.+16     	; 0x48b4 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    48a4:	a5 e3       	ldi	r26, 0x35	; 53
    48a6:	b0 e0       	ldi	r27, 0x00	; 0
    48a8:	e5 e3       	ldi	r30, 0x35	; 53
    48aa:	f0 e0       	ldi	r31, 0x00	; 0
    48ac:	80 81       	ld	r24, Z
    48ae:	82 60       	ori	r24, 0x02	; 2
    48b0:	8c 93       	st	X, r24
    48b2:	07 c0       	rjmp	.+14     	; 0x48c2 <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    48b4:	a5 e3       	ldi	r26, 0x35	; 53
    48b6:	b0 e0       	ldi	r27, 0x00	; 0
    48b8:	e5 e3       	ldi	r30, 0x35	; 53
    48ba:	f0 e0       	ldi	r31, 0x00	; 0
    48bc:	80 81       	ld	r24, Z
    48be:	8d 7f       	andi	r24, 0xFD	; 253
    48c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    48c2:	8c 81       	ldd	r24, Y+4	; 0x04
    48c4:	81 30       	cpi	r24, 0x01	; 1
    48c6:	41 f4       	brne	.+16     	; 0x48d8 <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    48c8:	a5 e3       	ldi	r26, 0x35	; 53
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	e5 e3       	ldi	r30, 0x35	; 53
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	80 81       	ld	r24, Z
    48d2:	84 60       	ori	r24, 0x04	; 4
    48d4:	8c 93       	st	X, r24
    48d6:	07 c0       	rjmp	.+14     	; 0x48e6 <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    48d8:	a5 e3       	ldi	r26, 0x35	; 53
    48da:	b0 e0       	ldi	r27, 0x00	; 0
    48dc:	e5 e3       	ldi	r30, 0x35	; 53
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	8b 7f       	andi	r24, 0xFB	; 251
    48e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    48e6:	8d 81       	ldd	r24, Y+5	; 0x05
    48e8:	81 30       	cpi	r24, 0x01	; 1
    48ea:	41 f4       	brne	.+16     	; 0x48fc <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    48ec:	a5 e3       	ldi	r26, 0x35	; 53
    48ee:	b0 e0       	ldi	r27, 0x00	; 0
    48f0:	e5 e3       	ldi	r30, 0x35	; 53
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 81       	ld	r24, Z
    48f6:	88 60       	ori	r24, 0x08	; 8
    48f8:	8c 93       	st	X, r24
    48fa:	07 c0       	rjmp	.+14     	; 0x490a <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    48fc:	a5 e3       	ldi	r26, 0x35	; 53
    48fe:	b0 e0       	ldi	r27, 0x00	; 0
    4900:	e5 e3       	ldi	r30, 0x35	; 53
    4902:	f0 e0       	ldi	r31, 0x00	; 0
    4904:	80 81       	ld	r24, Z
    4906:	87 7f       	andi	r24, 0xF7	; 247
    4908:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    490a:	8e 81       	ldd	r24, Y+6	; 0x06
    490c:	81 30       	cpi	r24, 0x01	; 1
    490e:	41 f4       	brne	.+16     	; 0x4920 <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4910:	a5 e3       	ldi	r26, 0x35	; 53
    4912:	b0 e0       	ldi	r27, 0x00	; 0
    4914:	e5 e3       	ldi	r30, 0x35	; 53
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	80 81       	ld	r24, Z
    491a:	80 61       	ori	r24, 0x10	; 16
    491c:	8c 93       	st	X, r24
    491e:	07 c0       	rjmp	.+14     	; 0x492e <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4920:	a5 e3       	ldi	r26, 0x35	; 53
    4922:	b0 e0       	ldi	r27, 0x00	; 0
    4924:	e5 e3       	ldi	r30, 0x35	; 53
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	80 81       	ld	r24, Z
    492a:	8f 7e       	andi	r24, 0xEF	; 239
    492c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    492e:	8f 81       	ldd	r24, Y+7	; 0x07
    4930:	81 30       	cpi	r24, 0x01	; 1
    4932:	41 f4       	brne	.+16     	; 0x4944 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4934:	a5 e3       	ldi	r26, 0x35	; 53
    4936:	b0 e0       	ldi	r27, 0x00	; 0
    4938:	e5 e3       	ldi	r30, 0x35	; 53
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	80 81       	ld	r24, Z
    493e:	80 62       	ori	r24, 0x20	; 32
    4940:	8c 93       	st	X, r24
    4942:	07 c0       	rjmp	.+14     	; 0x4952 <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4944:	a5 e3       	ldi	r26, 0x35	; 53
    4946:	b0 e0       	ldi	r27, 0x00	; 0
    4948:	e5 e3       	ldi	r30, 0x35	; 53
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	80 81       	ld	r24, Z
    494e:	8f 7d       	andi	r24, 0xDF	; 223
    4950:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4952:	88 85       	ldd	r24, Y+8	; 0x08
    4954:	81 30       	cpi	r24, 0x01	; 1
    4956:	41 f4       	brne	.+16     	; 0x4968 <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4958:	a5 e3       	ldi	r26, 0x35	; 53
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	e5 e3       	ldi	r30, 0x35	; 53
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	80 64       	ori	r24, 0x40	; 64
    4964:	8c 93       	st	X, r24
    4966:	86 c0       	rjmp	.+268    	; 0x4a74 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4968:	a5 e3       	ldi	r26, 0x35	; 53
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	e5 e3       	ldi	r30, 0x35	; 53
    496e:	f0 e0       	ldi	r31, 0x00	; 0
    4970:	80 81       	ld	r24, Z
    4972:	8f 7b       	andi	r24, 0xBF	; 191
    4974:	8c 93       	st	X, r24
    4976:	7e c0       	rjmp	.+252    	; 0x4a74 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4978:	8a 81       	ldd	r24, Y+2	; 0x02
    497a:	81 30       	cpi	r24, 0x01	; 1
    497c:	41 f4       	brne	.+16     	; 0x498e <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    497e:	a2 e3       	ldi	r26, 0x32	; 50
    4980:	b0 e0       	ldi	r27, 0x00	; 0
    4982:	e2 e3       	ldi	r30, 0x32	; 50
    4984:	f0 e0       	ldi	r31, 0x00	; 0
    4986:	80 81       	ld	r24, Z
    4988:	81 60       	ori	r24, 0x01	; 1
    498a:	8c 93       	st	X, r24
    498c:	07 c0       	rjmp	.+14     	; 0x499c <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    498e:	a2 e3       	ldi	r26, 0x32	; 50
    4990:	b0 e0       	ldi	r27, 0x00	; 0
    4992:	e2 e3       	ldi	r30, 0x32	; 50
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	80 81       	ld	r24, Z
    4998:	8e 7f       	andi	r24, 0xFE	; 254
    499a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    499c:	8b 81       	ldd	r24, Y+3	; 0x03
    499e:	81 30       	cpi	r24, 0x01	; 1
    49a0:	41 f4       	brne	.+16     	; 0x49b2 <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    49a2:	a2 e3       	ldi	r26, 0x32	; 50
    49a4:	b0 e0       	ldi	r27, 0x00	; 0
    49a6:	e2 e3       	ldi	r30, 0x32	; 50
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	82 60       	ori	r24, 0x02	; 2
    49ae:	8c 93       	st	X, r24
    49b0:	07 c0       	rjmp	.+14     	; 0x49c0 <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    49b2:	a2 e3       	ldi	r26, 0x32	; 50
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	e2 e3       	ldi	r30, 0x32	; 50
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	80 81       	ld	r24, Z
    49bc:	8d 7f       	andi	r24, 0xFD	; 253
    49be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    49c0:	8c 81       	ldd	r24, Y+4	; 0x04
    49c2:	81 30       	cpi	r24, 0x01	; 1
    49c4:	41 f4       	brne	.+16     	; 0x49d6 <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    49c6:	a2 e3       	ldi	r26, 0x32	; 50
    49c8:	b0 e0       	ldi	r27, 0x00	; 0
    49ca:	e2 e3       	ldi	r30, 0x32	; 50
    49cc:	f0 e0       	ldi	r31, 0x00	; 0
    49ce:	80 81       	ld	r24, Z
    49d0:	84 60       	ori	r24, 0x04	; 4
    49d2:	8c 93       	st	X, r24
    49d4:	07 c0       	rjmp	.+14     	; 0x49e4 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    49d6:	a2 e3       	ldi	r26, 0x32	; 50
    49d8:	b0 e0       	ldi	r27, 0x00	; 0
    49da:	e2 e3       	ldi	r30, 0x32	; 50
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	80 81       	ld	r24, Z
    49e0:	8b 7f       	andi	r24, 0xFB	; 251
    49e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    49e4:	8d 81       	ldd	r24, Y+5	; 0x05
    49e6:	81 30       	cpi	r24, 0x01	; 1
    49e8:	41 f4       	brne	.+16     	; 0x49fa <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    49ea:	a2 e3       	ldi	r26, 0x32	; 50
    49ec:	b0 e0       	ldi	r27, 0x00	; 0
    49ee:	e2 e3       	ldi	r30, 0x32	; 50
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	88 60       	ori	r24, 0x08	; 8
    49f6:	8c 93       	st	X, r24
    49f8:	07 c0       	rjmp	.+14     	; 0x4a08 <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    49fa:	a2 e3       	ldi	r26, 0x32	; 50
    49fc:	b0 e0       	ldi	r27, 0x00	; 0
    49fe:	e2 e3       	ldi	r30, 0x32	; 50
    4a00:	f0 e0       	ldi	r31, 0x00	; 0
    4a02:	80 81       	ld	r24, Z
    4a04:	87 7f       	andi	r24, 0xF7	; 247
    4a06:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4a08:	8e 81       	ldd	r24, Y+6	; 0x06
    4a0a:	81 30       	cpi	r24, 0x01	; 1
    4a0c:	41 f4       	brne	.+16     	; 0x4a1e <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4a0e:	a2 e3       	ldi	r26, 0x32	; 50
    4a10:	b0 e0       	ldi	r27, 0x00	; 0
    4a12:	e2 e3       	ldi	r30, 0x32	; 50
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	80 81       	ld	r24, Z
    4a18:	80 61       	ori	r24, 0x10	; 16
    4a1a:	8c 93       	st	X, r24
    4a1c:	07 c0       	rjmp	.+14     	; 0x4a2c <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4a1e:	a2 e3       	ldi	r26, 0x32	; 50
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	e2 e3       	ldi	r30, 0x32	; 50
    4a24:	f0 e0       	ldi	r31, 0x00	; 0
    4a26:	80 81       	ld	r24, Z
    4a28:	8f 7e       	andi	r24, 0xEF	; 239
    4a2a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a2e:	81 30       	cpi	r24, 0x01	; 1
    4a30:	41 f4       	brne	.+16     	; 0x4a42 <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4a32:	a2 e3       	ldi	r26, 0x32	; 50
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	e2 e3       	ldi	r30, 0x32	; 50
    4a38:	f0 e0       	ldi	r31, 0x00	; 0
    4a3a:	80 81       	ld	r24, Z
    4a3c:	80 62       	ori	r24, 0x20	; 32
    4a3e:	8c 93       	st	X, r24
    4a40:	07 c0       	rjmp	.+14     	; 0x4a50 <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4a42:	a2 e3       	ldi	r26, 0x32	; 50
    4a44:	b0 e0       	ldi	r27, 0x00	; 0
    4a46:	e2 e3       	ldi	r30, 0x32	; 50
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	80 81       	ld	r24, Z
    4a4c:	8f 7d       	andi	r24, 0xDF	; 223
    4a4e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4a50:	88 85       	ldd	r24, Y+8	; 0x08
    4a52:	81 30       	cpi	r24, 0x01	; 1
    4a54:	41 f4       	brne	.+16     	; 0x4a66 <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4a56:	a2 e3       	ldi	r26, 0x32	; 50
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	e2 e3       	ldi	r30, 0x32	; 50
    4a5c:	f0 e0       	ldi	r31, 0x00	; 0
    4a5e:	80 81       	ld	r24, Z
    4a60:	80 64       	ori	r24, 0x40	; 64
    4a62:	8c 93       	st	X, r24
    4a64:	07 c0       	rjmp	.+14     	; 0x4a74 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4a66:	a2 e3       	ldi	r26, 0x32	; 50
    4a68:	b0 e0       	ldi	r27, 0x00	; 0
    4a6a:	e2 e3       	ldi	r30, 0x32	; 50
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	80 81       	ld	r24, Z
    4a70:	8f 7b       	andi	r24, 0xBF	; 191
    4a72:	8c 93       	st	X, r24
		}
		break;
	}
}
    4a74:	2a 96       	adiw	r28, 0x0a	; 10
    4a76:	0f b6       	in	r0, 0x3f	; 63
    4a78:	f8 94       	cli
    4a7a:	de bf       	out	0x3e, r29	; 62
    4a7c:	0f be       	out	0x3f, r0	; 63
    4a7e:	cd bf       	out	0x3d, r28	; 61
    4a80:	cf 91       	pop	r28
    4a82:	df 91       	pop	r29
    4a84:	0f 91       	pop	r16
    4a86:	ef 90       	pop	r14
    4a88:	cf 90       	pop	r12
    4a8a:	af 90       	pop	r10
    4a8c:	08 95       	ret

00004a8e <SevenSegment_From0To9>:

void SevenSegment_From0To9(u8 Copy_u8PortId){
    4a8e:	af 92       	push	r10
    4a90:	cf 92       	push	r12
    4a92:	ef 92       	push	r14
    4a94:	0f 93       	push	r16
    4a96:	1f 93       	push	r17
    4a98:	df 93       	push	r29
    4a9a:	cf 93       	push	r28
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	cd 58       	subi	r28, 0x8D	; 141
    4aa2:	d0 40       	sbci	r29, 0x00	; 0
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	f8 94       	cli
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	cd bf       	out	0x3d, r28	; 61
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e3 57       	subi	r30, 0x73	; 115
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 0); // 0
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	e3 57       	subi	r30, 0x73	; 115
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	80 81       	ld	r24, Z
    4abe:	61 e0       	ldi	r22, 0x01	; 1
    4ac0:	41 e0       	ldi	r20, 0x01	; 1
    4ac2:	21 e0       	ldi	r18, 0x01	; 1
    4ac4:	01 e0       	ldi	r16, 0x01	; 1
    4ac6:	ee 24       	eor	r14, r14
    4ac8:	e3 94       	inc	r14
    4aca:	cc 24       	eor	r12, r12
    4acc:	c3 94       	inc	r12
    4ace:	aa 24       	eor	r10, r10
    4ad0:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	e7 57       	subi	r30, 0x77	; 119
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	a8 e4       	ldi	r26, 0x48	; 72
    4ae0:	b2 e4       	ldi	r27, 0x42	; 66
    4ae2:	80 83       	st	Z, r24
    4ae4:	91 83       	std	Z+1, r25	; 0x01
    4ae6:	a2 83       	std	Z+2, r26	; 0x02
    4ae8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aea:	8e 01       	movw	r16, r28
    4aec:	0b 57       	subi	r16, 0x7B	; 123
    4aee:	1f 4f       	sbci	r17, 0xFF	; 255
    4af0:	fe 01       	movw	r30, r28
    4af2:	e7 57       	subi	r30, 0x77	; 119
    4af4:	ff 4f       	sbci	r31, 0xFF	; 255
    4af6:	60 81       	ld	r22, Z
    4af8:	71 81       	ldd	r23, Z+1	; 0x01
    4afa:	82 81       	ldd	r24, Z+2	; 0x02
    4afc:	93 81       	ldd	r25, Z+3	; 0x03
    4afe:	20 e0       	ldi	r18, 0x00	; 0
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	4a e7       	ldi	r20, 0x7A	; 122
    4b04:	55 e4       	ldi	r21, 0x45	; 69
    4b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	f8 01       	movw	r30, r16
    4b10:	80 83       	st	Z, r24
    4b12:	91 83       	std	Z+1, r25	; 0x01
    4b14:	a2 83       	std	Z+2, r26	; 0x02
    4b16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b18:	fe 01       	movw	r30, r28
    4b1a:	eb 57       	subi	r30, 0x7B	; 123
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	60 81       	ld	r22, Z
    4b20:	71 81       	ldd	r23, Z+1	; 0x01
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
    4b24:	93 81       	ldd	r25, Z+3	; 0x03
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e8       	ldi	r20, 0x80	; 128
    4b2c:	5f e3       	ldi	r21, 0x3F	; 63
    4b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b32:	88 23       	and	r24, r24
    4b34:	44 f4       	brge	.+16     	; 0x4b46 <SevenSegment_From0To9+0xb8>
		__ticks = 1;
    4b36:	fe 01       	movw	r30, r28
    4b38:	ed 57       	subi	r30, 0x7D	; 125
    4b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	91 83       	std	Z+1, r25	; 0x01
    4b42:	80 83       	st	Z, r24
    4b44:	64 c0       	rjmp	.+200    	; 0x4c0e <SevenSegment_From0To9+0x180>
	else if (__tmp > 65535)
    4b46:	fe 01       	movw	r30, r28
    4b48:	eb 57       	subi	r30, 0x7B	; 123
    4b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4c:	60 81       	ld	r22, Z
    4b4e:	71 81       	ldd	r23, Z+1	; 0x01
    4b50:	82 81       	ldd	r24, Z+2	; 0x02
    4b52:	93 81       	ldd	r25, Z+3	; 0x03
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	3f ef       	ldi	r19, 0xFF	; 255
    4b58:	4f e7       	ldi	r20, 0x7F	; 127
    4b5a:	57 e4       	ldi	r21, 0x47	; 71
    4b5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b60:	18 16       	cp	r1, r24
    4b62:	0c f0       	brlt	.+2      	; 0x4b66 <SevenSegment_From0To9+0xd8>
    4b64:	43 c0       	rjmp	.+134    	; 0x4bec <SevenSegment_From0To9+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b66:	fe 01       	movw	r30, r28
    4b68:	e7 57       	subi	r30, 0x77	; 119
    4b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6c:	60 81       	ld	r22, Z
    4b6e:	71 81       	ldd	r23, Z+1	; 0x01
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	93 81       	ldd	r25, Z+3	; 0x03
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e2       	ldi	r20, 0x20	; 32
    4b7a:	51 e4       	ldi	r21, 0x41	; 65
    4b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	8e 01       	movw	r16, r28
    4b86:	0d 57       	subi	r16, 0x7D	; 125
    4b88:	1f 4f       	sbci	r17, 0xFF	; 255
    4b8a:	bc 01       	movw	r22, r24
    4b8c:	cd 01       	movw	r24, r26
    4b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	f8 01       	movw	r30, r16
    4b98:	91 83       	std	Z+1, r25	; 0x01
    4b9a:	80 83       	st	Z, r24
    4b9c:	1f c0       	rjmp	.+62     	; 0x4bdc <SevenSegment_From0To9+0x14e>
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	ef 57       	subi	r30, 0x7F	; 127
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	80 e9       	ldi	r24, 0x90	; 144
    4ba6:	91 e0       	ldi	r25, 0x01	; 1
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
    4bac:	fe 01       	movw	r30, r28
    4bae:	ef 57       	subi	r30, 0x7F	; 127
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	80 81       	ld	r24, Z
    4bb4:	91 81       	ldd	r25, Z+1	; 0x01
    4bb6:	01 97       	sbiw	r24, 0x01	; 1
    4bb8:	f1 f7       	brne	.-4      	; 0x4bb6 <SevenSegment_From0To9+0x128>
    4bba:	fe 01       	movw	r30, r28
    4bbc:	ef 57       	subi	r30, 0x7F	; 127
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	91 83       	std	Z+1, r25	; 0x01
    4bc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc4:	de 01       	movw	r26, r28
    4bc6:	ad 57       	subi	r26, 0x7D	; 125
    4bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bca:	fe 01       	movw	r30, r28
    4bcc:	ed 57       	subi	r30, 0x7D	; 125
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	80 81       	ld	r24, Z
    4bd2:	91 81       	ldd	r25, Z+1	; 0x01
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	11 96       	adiw	r26, 0x01	; 1
    4bd8:	9c 93       	st	X, r25
    4bda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bdc:	fe 01       	movw	r30, r28
    4bde:	ed 57       	subi	r30, 0x7D	; 125
    4be0:	ff 4f       	sbci	r31, 0xFF	; 255
    4be2:	80 81       	ld	r24, Z
    4be4:	91 81       	ldd	r25, Z+1	; 0x01
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	d1 f6       	brne	.-76     	; 0x4b9e <SevenSegment_From0To9+0x110>
    4bea:	27 c0       	rjmp	.+78     	; 0x4c3a <SevenSegment_From0To9+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bec:	8e 01       	movw	r16, r28
    4bee:	0d 57       	subi	r16, 0x7D	; 125
    4bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	eb 57       	subi	r30, 0x7B	; 123
    4bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf8:	60 81       	ld	r22, Z
    4bfa:	71 81       	ldd	r23, Z+1	; 0x01
    4bfc:	82 81       	ldd	r24, Z+2	; 0x02
    4bfe:	93 81       	ldd	r25, Z+3	; 0x03
    4c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	f8 01       	movw	r30, r16
    4c0a:	91 83       	std	Z+1, r25	; 0x01
    4c0c:	80 83       	st	Z, r24
    4c0e:	de 01       	movw	r26, r28
    4c10:	a1 58       	subi	r26, 0x81	; 129
    4c12:	bf 4f       	sbci	r27, 0xFF	; 255
    4c14:	fe 01       	movw	r30, r28
    4c16:	ed 57       	subi	r30, 0x7D	; 125
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	80 81       	ld	r24, Z
    4c1c:	91 81       	ldd	r25, Z+1	; 0x01
    4c1e:	8d 93       	st	X+, r24
    4c20:	9c 93       	st	X, r25
    4c22:	fe 01       	movw	r30, r28
    4c24:	e1 58       	subi	r30, 0x81	; 129
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	f1 f7       	brne	.-4      	; 0x4c2c <SevenSegment_From0To9+0x19e>
    4c30:	fe 01       	movw	r30, r28
    4c32:	e1 58       	subi	r30, 0x81	; 129
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	91 83       	std	Z+1, r25	; 0x01
    4c38:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 0, 0); // 1
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	e3 57       	subi	r30, 0x73	; 115
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	80 81       	ld	r24, Z
    4c42:	60 e0       	ldi	r22, 0x00	; 0
    4c44:	41 e0       	ldi	r20, 0x01	; 1
    4c46:	21 e0       	ldi	r18, 0x01	; 1
    4c48:	00 e0       	ldi	r16, 0x00	; 0
    4c4a:	ee 24       	eor	r14, r14
    4c4c:	cc 24       	eor	r12, r12
    4c4e:	aa 24       	eor	r10, r10
    4c50:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    4c54:	fe 01       	movw	r30, r28
    4c56:	e5 58       	subi	r30, 0x85	; 133
    4c58:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5a:	80 e0       	ldi	r24, 0x00	; 0
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	a8 e4       	ldi	r26, 0x48	; 72
    4c60:	b2 e4       	ldi	r27, 0x42	; 66
    4c62:	80 83       	st	Z, r24
    4c64:	91 83       	std	Z+1, r25	; 0x01
    4c66:	a2 83       	std	Z+2, r26	; 0x02
    4c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c6a:	8e 01       	movw	r16, r28
    4c6c:	09 58       	subi	r16, 0x89	; 137
    4c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c70:	fe 01       	movw	r30, r28
    4c72:	e5 58       	subi	r30, 0x85	; 133
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	60 81       	ld	r22, Z
    4c78:	71 81       	ldd	r23, Z+1	; 0x01
    4c7a:	82 81       	ldd	r24, Z+2	; 0x02
    4c7c:	93 81       	ldd	r25, Z+3	; 0x03
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	4a e7       	ldi	r20, 0x7A	; 122
    4c84:	55 e4       	ldi	r21, 0x45	; 69
    4c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	f8 01       	movw	r30, r16
    4c90:	80 83       	st	Z, r24
    4c92:	91 83       	std	Z+1, r25	; 0x01
    4c94:	a2 83       	std	Z+2, r26	; 0x02
    4c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c98:	fe 01       	movw	r30, r28
    4c9a:	e9 58       	subi	r30, 0x89	; 137
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	60 81       	ld	r22, Z
    4ca0:	71 81       	ldd	r23, Z+1	; 0x01
    4ca2:	82 81       	ldd	r24, Z+2	; 0x02
    4ca4:	93 81       	ldd	r25, Z+3	; 0x03
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e8       	ldi	r20, 0x80	; 128
    4cac:	5f e3       	ldi	r21, 0x3F	; 63
    4cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cb2:	88 23       	and	r24, r24
    4cb4:	44 f4       	brge	.+16     	; 0x4cc6 <SevenSegment_From0To9+0x238>
		__ticks = 1;
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	eb 58       	subi	r30, 0x8B	; 139
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	91 83       	std	Z+1, r25	; 0x01
    4cc2:	80 83       	st	Z, r24
    4cc4:	64 c0       	rjmp	.+200    	; 0x4d8e <SevenSegment_From0To9+0x300>
	else if (__tmp > 65535)
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	e9 58       	subi	r30, 0x89	; 137
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	60 81       	ld	r22, Z
    4cce:	71 81       	ldd	r23, Z+1	; 0x01
    4cd0:	82 81       	ldd	r24, Z+2	; 0x02
    4cd2:	93 81       	ldd	r25, Z+3	; 0x03
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	3f ef       	ldi	r19, 0xFF	; 255
    4cd8:	4f e7       	ldi	r20, 0x7F	; 127
    4cda:	57 e4       	ldi	r21, 0x47	; 71
    4cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ce0:	18 16       	cp	r1, r24
    4ce2:	0c f0       	brlt	.+2      	; 0x4ce6 <SevenSegment_From0To9+0x258>
    4ce4:	43 c0       	rjmp	.+134    	; 0x4d6c <SevenSegment_From0To9+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e5 58       	subi	r30, 0x85	; 133
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	60 81       	ld	r22, Z
    4cee:	71 81       	ldd	r23, Z+1	; 0x01
    4cf0:	82 81       	ldd	r24, Z+2	; 0x02
    4cf2:	93 81       	ldd	r25, Z+3	; 0x03
    4cf4:	20 e0       	ldi	r18, 0x00	; 0
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	40 e2       	ldi	r20, 0x20	; 32
    4cfa:	51 e4       	ldi	r21, 0x41	; 65
    4cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d00:	dc 01       	movw	r26, r24
    4d02:	cb 01       	movw	r24, r22
    4d04:	8e 01       	movw	r16, r28
    4d06:	0b 58       	subi	r16, 0x8B	; 139
    4d08:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0a:	bc 01       	movw	r22, r24
    4d0c:	cd 01       	movw	r24, r26
    4d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d12:	dc 01       	movw	r26, r24
    4d14:	cb 01       	movw	r24, r22
    4d16:	f8 01       	movw	r30, r16
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
    4d1c:	1f c0       	rjmp	.+62     	; 0x4d5c <SevenSegment_From0To9+0x2ce>
    4d1e:	fe 01       	movw	r30, r28
    4d20:	ed 58       	subi	r30, 0x8D	; 141
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	80 e9       	ldi	r24, 0x90	; 144
    4d26:	91 e0       	ldi	r25, 0x01	; 1
    4d28:	91 83       	std	Z+1, r25	; 0x01
    4d2a:	80 83       	st	Z, r24
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	ed 58       	subi	r30, 0x8D	; 141
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <SevenSegment_From0To9+0x2a8>
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	ed 58       	subi	r30, 0x8D	; 141
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	91 83       	std	Z+1, r25	; 0x01
    4d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d44:	de 01       	movw	r26, r28
    4d46:	ab 58       	subi	r26, 0x8B	; 139
    4d48:	bf 4f       	sbci	r27, 0xFF	; 255
    4d4a:	fe 01       	movw	r30, r28
    4d4c:	eb 58       	subi	r30, 0x8B	; 139
    4d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d50:	80 81       	ld	r24, Z
    4d52:	91 81       	ldd	r25, Z+1	; 0x01
    4d54:	01 97       	sbiw	r24, 0x01	; 1
    4d56:	11 96       	adiw	r26, 0x01	; 1
    4d58:	9c 93       	st	X, r25
    4d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5c:	fe 01       	movw	r30, r28
    4d5e:	eb 58       	subi	r30, 0x8B	; 139
    4d60:	ff 4f       	sbci	r31, 0xFF	; 255
    4d62:	80 81       	ld	r24, Z
    4d64:	91 81       	ldd	r25, Z+1	; 0x01
    4d66:	00 97       	sbiw	r24, 0x00	; 0
    4d68:	d1 f6       	brne	.-76     	; 0x4d1e <SevenSegment_From0To9+0x290>
    4d6a:	27 c0       	rjmp	.+78     	; 0x4dba <SevenSegment_From0To9+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d6c:	8e 01       	movw	r16, r28
    4d6e:	0b 58       	subi	r16, 0x8B	; 139
    4d70:	1f 4f       	sbci	r17, 0xFF	; 255
    4d72:	fe 01       	movw	r30, r28
    4d74:	e9 58       	subi	r30, 0x89	; 137
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	60 81       	ld	r22, Z
    4d7a:	71 81       	ldd	r23, Z+1	; 0x01
    4d7c:	82 81       	ldd	r24, Z+2	; 0x02
    4d7e:	93 81       	ldd	r25, Z+3	; 0x03
    4d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	f8 01       	movw	r30, r16
    4d8a:	91 83       	std	Z+1, r25	; 0x01
    4d8c:	80 83       	st	Z, r24
    4d8e:	de 01       	movw	r26, r28
    4d90:	af 58       	subi	r26, 0x8F	; 143
    4d92:	bf 4f       	sbci	r27, 0xFF	; 255
    4d94:	fe 01       	movw	r30, r28
    4d96:	eb 58       	subi	r30, 0x8B	; 139
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	8d 93       	st	X+, r24
    4da0:	9c 93       	st	X, r25
    4da2:	fe 01       	movw	r30, r28
    4da4:	ef 58       	subi	r30, 0x8F	; 143
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	80 81       	ld	r24, Z
    4daa:	91 81       	ldd	r25, Z+1	; 0x01
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	f1 f7       	brne	.-4      	; 0x4dac <SevenSegment_From0To9+0x31e>
    4db0:	fe 01       	movw	r30, r28
    4db2:	ef 58       	subi	r30, 0x8F	; 143
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	91 83       	std	Z+1, r25	; 0x01
    4db8:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 0, 1, 1, 0, 1); // 2
    4dba:	fe 01       	movw	r30, r28
    4dbc:	e3 57       	subi	r30, 0x73	; 115
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	80 81       	ld	r24, Z
    4dc2:	61 e0       	ldi	r22, 0x01	; 1
    4dc4:	41 e0       	ldi	r20, 0x01	; 1
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	01 e0       	ldi	r16, 0x01	; 1
    4dca:	ee 24       	eor	r14, r14
    4dcc:	e3 94       	inc	r14
    4dce:	cc 24       	eor	r12, r12
    4dd0:	aa 24       	eor	r10, r10
    4dd2:	a3 94       	inc	r10
    4dd4:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e3 59       	subi	r30, 0x93	; 147
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	a8 e4       	ldi	r26, 0x48	; 72
    4de4:	b2 e4       	ldi	r27, 0x42	; 66
    4de6:	80 83       	st	Z, r24
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	a2 83       	std	Z+2, r26	; 0x02
    4dec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dee:	8e 01       	movw	r16, r28
    4df0:	07 59       	subi	r16, 0x97	; 151
    4df2:	1f 4f       	sbci	r17, 0xFF	; 255
    4df4:	fe 01       	movw	r30, r28
    4df6:	e3 59       	subi	r30, 0x93	; 147
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	60 81       	ld	r22, Z
    4dfc:	71 81       	ldd	r23, Z+1	; 0x01
    4dfe:	82 81       	ldd	r24, Z+2	; 0x02
    4e00:	93 81       	ldd	r25, Z+3	; 0x03
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	4a e7       	ldi	r20, 0x7A	; 122
    4e08:	55 e4       	ldi	r21, 0x45	; 69
    4e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	f8 01       	movw	r30, r16
    4e14:	80 83       	st	Z, r24
    4e16:	91 83       	std	Z+1, r25	; 0x01
    4e18:	a2 83       	std	Z+2, r26	; 0x02
    4e1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e7 59       	subi	r30, 0x97	; 151
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	60 81       	ld	r22, Z
    4e24:	71 81       	ldd	r23, Z+1	; 0x01
    4e26:	82 81       	ldd	r24, Z+2	; 0x02
    4e28:	93 81       	ldd	r25, Z+3	; 0x03
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	40 e8       	ldi	r20, 0x80	; 128
    4e30:	5f e3       	ldi	r21, 0x3F	; 63
    4e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e36:	88 23       	and	r24, r24
    4e38:	44 f4       	brge	.+16     	; 0x4e4a <SevenSegment_From0To9+0x3bc>
		__ticks = 1;
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e9 59       	subi	r30, 0x99	; 153
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	91 83       	std	Z+1, r25	; 0x01
    4e46:	80 83       	st	Z, r24
    4e48:	64 c0       	rjmp	.+200    	; 0x4f12 <SevenSegment_From0To9+0x484>
	else if (__tmp > 65535)
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	e7 59       	subi	r30, 0x97	; 151
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	60 81       	ld	r22, Z
    4e52:	71 81       	ldd	r23, Z+1	; 0x01
    4e54:	82 81       	ldd	r24, Z+2	; 0x02
    4e56:	93 81       	ldd	r25, Z+3	; 0x03
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	3f ef       	ldi	r19, 0xFF	; 255
    4e5c:	4f e7       	ldi	r20, 0x7F	; 127
    4e5e:	57 e4       	ldi	r21, 0x47	; 71
    4e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e64:	18 16       	cp	r1, r24
    4e66:	0c f0       	brlt	.+2      	; 0x4e6a <SevenSegment_From0To9+0x3dc>
    4e68:	43 c0       	rjmp	.+134    	; 0x4ef0 <SevenSegment_From0To9+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	e3 59       	subi	r30, 0x93	; 147
    4e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e70:	60 81       	ld	r22, Z
    4e72:	71 81       	ldd	r23, Z+1	; 0x01
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e2       	ldi	r20, 0x20	; 32
    4e7e:	51 e4       	ldi	r21, 0x41	; 65
    4e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e84:	dc 01       	movw	r26, r24
    4e86:	cb 01       	movw	r24, r22
    4e88:	8e 01       	movw	r16, r28
    4e8a:	09 59       	subi	r16, 0x99	; 153
    4e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e8e:	bc 01       	movw	r22, r24
    4e90:	cd 01       	movw	r24, r26
    4e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	f8 01       	movw	r30, r16
    4e9c:	91 83       	std	Z+1, r25	; 0x01
    4e9e:	80 83       	st	Z, r24
    4ea0:	1f c0       	rjmp	.+62     	; 0x4ee0 <SevenSegment_From0To9+0x452>
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	eb 59       	subi	r30, 0x9B	; 155
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	80 e9       	ldi	r24, 0x90	; 144
    4eaa:	91 e0       	ldi	r25, 0x01	; 1
    4eac:	91 83       	std	Z+1, r25	; 0x01
    4eae:	80 83       	st	Z, r24
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	eb 59       	subi	r30, 0x9B	; 155
    4eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb6:	80 81       	ld	r24, Z
    4eb8:	91 81       	ldd	r25, Z+1	; 0x01
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	f1 f7       	brne	.-4      	; 0x4eba <SevenSegment_From0To9+0x42c>
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	eb 59       	subi	r30, 0x9B	; 155
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec8:	de 01       	movw	r26, r28
    4eca:	a9 59       	subi	r26, 0x99	; 153
    4ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    4ece:	fe 01       	movw	r30, r28
    4ed0:	e9 59       	subi	r30, 0x99	; 153
    4ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	11 96       	adiw	r26, 0x01	; 1
    4edc:	9c 93       	st	X, r25
    4ede:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e9 59       	subi	r30, 0x99	; 153
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	00 97       	sbiw	r24, 0x00	; 0
    4eec:	d1 f6       	brne	.-76     	; 0x4ea2 <SevenSegment_From0To9+0x414>
    4eee:	27 c0       	rjmp	.+78     	; 0x4f3e <SevenSegment_From0To9+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef0:	8e 01       	movw	r16, r28
    4ef2:	09 59       	subi	r16, 0x99	; 153
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef6:	fe 01       	movw	r30, r28
    4ef8:	e7 59       	subi	r30, 0x97	; 151
    4efa:	ff 4f       	sbci	r31, 0xFF	; 255
    4efc:	60 81       	ld	r22, Z
    4efe:	71 81       	ldd	r23, Z+1	; 0x01
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	93 81       	ldd	r25, Z+3	; 0x03
    4f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f08:	dc 01       	movw	r26, r24
    4f0a:	cb 01       	movw	r24, r22
    4f0c:	f8 01       	movw	r30, r16
    4f0e:	91 83       	std	Z+1, r25	; 0x01
    4f10:	80 83       	st	Z, r24
    4f12:	de 01       	movw	r26, r28
    4f14:	ad 59       	subi	r26, 0x9D	; 157
    4f16:	bf 4f       	sbci	r27, 0xFF	; 255
    4f18:	fe 01       	movw	r30, r28
    4f1a:	e9 59       	subi	r30, 0x99	; 153
    4f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1e:	80 81       	ld	r24, Z
    4f20:	91 81       	ldd	r25, Z+1	; 0x01
    4f22:	8d 93       	st	X+, r24
    4f24:	9c 93       	st	X, r25
    4f26:	fe 01       	movw	r30, r28
    4f28:	ed 59       	subi	r30, 0x9D	; 157
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	80 81       	ld	r24, Z
    4f2e:	91 81       	ldd	r25, Z+1	; 0x01
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	f1 f7       	brne	.-4      	; 0x4f30 <SevenSegment_From0To9+0x4a2>
    4f34:	fe 01       	movw	r30, r28
    4f36:	ed 59       	subi	r30, 0x9D	; 157
    4f38:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3a:	91 83       	std	Z+1, r25	; 0x01
    4f3c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 0, 1); // 3
    4f3e:	fe 01       	movw	r30, r28
    4f40:	e3 57       	subi	r30, 0x73	; 115
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	80 81       	ld	r24, Z
    4f46:	61 e0       	ldi	r22, 0x01	; 1
    4f48:	41 e0       	ldi	r20, 0x01	; 1
    4f4a:	21 e0       	ldi	r18, 0x01	; 1
    4f4c:	01 e0       	ldi	r16, 0x01	; 1
    4f4e:	ee 24       	eor	r14, r14
    4f50:	cc 24       	eor	r12, r12
    4f52:	aa 24       	eor	r10, r10
    4f54:	a3 94       	inc	r10
    4f56:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	e1 5a       	subi	r30, 0xA1	; 161
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	80 e0       	ldi	r24, 0x00	; 0
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	a8 e4       	ldi	r26, 0x48	; 72
    4f66:	b2 e4       	ldi	r27, 0x42	; 66
    4f68:	80 83       	st	Z, r24
    4f6a:	91 83       	std	Z+1, r25	; 0x01
    4f6c:	a2 83       	std	Z+2, r26	; 0x02
    4f6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f70:	8e 01       	movw	r16, r28
    4f72:	05 5a       	subi	r16, 0xA5	; 165
    4f74:	1f 4f       	sbci	r17, 0xFF	; 255
    4f76:	fe 01       	movw	r30, r28
    4f78:	e1 5a       	subi	r30, 0xA1	; 161
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	60 81       	ld	r22, Z
    4f7e:	71 81       	ldd	r23, Z+1	; 0x01
    4f80:	82 81       	ldd	r24, Z+2	; 0x02
    4f82:	93 81       	ldd	r25, Z+3	; 0x03
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	4a e7       	ldi	r20, 0x7A	; 122
    4f8a:	55 e4       	ldi	r21, 0x45	; 69
    4f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f90:	dc 01       	movw	r26, r24
    4f92:	cb 01       	movw	r24, r22
    4f94:	f8 01       	movw	r30, r16
    4f96:	80 83       	st	Z, r24
    4f98:	91 83       	std	Z+1, r25	; 0x01
    4f9a:	a2 83       	std	Z+2, r26	; 0x02
    4f9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f9e:	fe 01       	movw	r30, r28
    4fa0:	e5 5a       	subi	r30, 0xA5	; 165
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	60 81       	ld	r22, Z
    4fa6:	71 81       	ldd	r23, Z+1	; 0x01
    4fa8:	82 81       	ldd	r24, Z+2	; 0x02
    4faa:	93 81       	ldd	r25, Z+3	; 0x03
    4fac:	20 e0       	ldi	r18, 0x00	; 0
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	40 e8       	ldi	r20, 0x80	; 128
    4fb2:	5f e3       	ldi	r21, 0x3F	; 63
    4fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fb8:	88 23       	and	r24, r24
    4fba:	44 f4       	brge	.+16     	; 0x4fcc <SevenSegment_From0To9+0x53e>
		__ticks = 1;
    4fbc:	fe 01       	movw	r30, r28
    4fbe:	e7 5a       	subi	r30, 0xA7	; 167
    4fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	91 83       	std	Z+1, r25	; 0x01
    4fc8:	80 83       	st	Z, r24
    4fca:	64 c0       	rjmp	.+200    	; 0x5094 <SevenSegment_From0To9+0x606>
	else if (__tmp > 65535)
    4fcc:	fe 01       	movw	r30, r28
    4fce:	e5 5a       	subi	r30, 0xA5	; 165
    4fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd2:	60 81       	ld	r22, Z
    4fd4:	71 81       	ldd	r23, Z+1	; 0x01
    4fd6:	82 81       	ldd	r24, Z+2	; 0x02
    4fd8:	93 81       	ldd	r25, Z+3	; 0x03
    4fda:	20 e0       	ldi	r18, 0x00	; 0
    4fdc:	3f ef       	ldi	r19, 0xFF	; 255
    4fde:	4f e7       	ldi	r20, 0x7F	; 127
    4fe0:	57 e4       	ldi	r21, 0x47	; 71
    4fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fe6:	18 16       	cp	r1, r24
    4fe8:	0c f0       	brlt	.+2      	; 0x4fec <SevenSegment_From0To9+0x55e>
    4fea:	43 c0       	rjmp	.+134    	; 0x5072 <SevenSegment_From0To9+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fec:	fe 01       	movw	r30, r28
    4fee:	e1 5a       	subi	r30, 0xA1	; 161
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	60 81       	ld	r22, Z
    4ff4:	71 81       	ldd	r23, Z+1	; 0x01
    4ff6:	82 81       	ldd	r24, Z+2	; 0x02
    4ff8:	93 81       	ldd	r25, Z+3	; 0x03
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	40 e2       	ldi	r20, 0x20	; 32
    5000:	51 e4       	ldi	r21, 0x41	; 65
    5002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	8e 01       	movw	r16, r28
    500c:	07 5a       	subi	r16, 0xA7	; 167
    500e:	1f 4f       	sbci	r17, 0xFF	; 255
    5010:	bc 01       	movw	r22, r24
    5012:	cd 01       	movw	r24, r26
    5014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5018:	dc 01       	movw	r26, r24
    501a:	cb 01       	movw	r24, r22
    501c:	f8 01       	movw	r30, r16
    501e:	91 83       	std	Z+1, r25	; 0x01
    5020:	80 83       	st	Z, r24
    5022:	1f c0       	rjmp	.+62     	; 0x5062 <SevenSegment_From0To9+0x5d4>
    5024:	fe 01       	movw	r30, r28
    5026:	e9 5a       	subi	r30, 0xA9	; 169
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	80 e9       	ldi	r24, 0x90	; 144
    502c:	91 e0       	ldi	r25, 0x01	; 1
    502e:	91 83       	std	Z+1, r25	; 0x01
    5030:	80 83       	st	Z, r24
    5032:	fe 01       	movw	r30, r28
    5034:	e9 5a       	subi	r30, 0xA9	; 169
    5036:	ff 4f       	sbci	r31, 0xFF	; 255
    5038:	80 81       	ld	r24, Z
    503a:	91 81       	ldd	r25, Z+1	; 0x01
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <SevenSegment_From0To9+0x5ae>
    5040:	fe 01       	movw	r30, r28
    5042:	e9 5a       	subi	r30, 0xA9	; 169
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    504a:	de 01       	movw	r26, r28
    504c:	a7 5a       	subi	r26, 0xA7	; 167
    504e:	bf 4f       	sbci	r27, 0xFF	; 255
    5050:	fe 01       	movw	r30, r28
    5052:	e7 5a       	subi	r30, 0xA7	; 167
    5054:	ff 4f       	sbci	r31, 0xFF	; 255
    5056:	80 81       	ld	r24, Z
    5058:	91 81       	ldd	r25, Z+1	; 0x01
    505a:	01 97       	sbiw	r24, 0x01	; 1
    505c:	11 96       	adiw	r26, 0x01	; 1
    505e:	9c 93       	st	X, r25
    5060:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5062:	fe 01       	movw	r30, r28
    5064:	e7 5a       	subi	r30, 0xA7	; 167
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	80 81       	ld	r24, Z
    506a:	91 81       	ldd	r25, Z+1	; 0x01
    506c:	00 97       	sbiw	r24, 0x00	; 0
    506e:	d1 f6       	brne	.-76     	; 0x5024 <SevenSegment_From0To9+0x596>
    5070:	27 c0       	rjmp	.+78     	; 0x50c0 <SevenSegment_From0To9+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5072:	8e 01       	movw	r16, r28
    5074:	07 5a       	subi	r16, 0xA7	; 167
    5076:	1f 4f       	sbci	r17, 0xFF	; 255
    5078:	fe 01       	movw	r30, r28
    507a:	e5 5a       	subi	r30, 0xA5	; 165
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	60 81       	ld	r22, Z
    5080:	71 81       	ldd	r23, Z+1	; 0x01
    5082:	82 81       	ldd	r24, Z+2	; 0x02
    5084:	93 81       	ldd	r25, Z+3	; 0x03
    5086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	f8 01       	movw	r30, r16
    5090:	91 83       	std	Z+1, r25	; 0x01
    5092:	80 83       	st	Z, r24
    5094:	de 01       	movw	r26, r28
    5096:	ab 5a       	subi	r26, 0xAB	; 171
    5098:	bf 4f       	sbci	r27, 0xFF	; 255
    509a:	fe 01       	movw	r30, r28
    509c:	e7 5a       	subi	r30, 0xA7	; 167
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	80 81       	ld	r24, Z
    50a2:	91 81       	ldd	r25, Z+1	; 0x01
    50a4:	8d 93       	st	X+, r24
    50a6:	9c 93       	st	X, r25
    50a8:	fe 01       	movw	r30, r28
    50aa:	eb 5a       	subi	r30, 0xAB	; 171
    50ac:	ff 4f       	sbci	r31, 0xFF	; 255
    50ae:	80 81       	ld	r24, Z
    50b0:	91 81       	ldd	r25, Z+1	; 0x01
    50b2:	01 97       	sbiw	r24, 0x01	; 1
    50b4:	f1 f7       	brne	.-4      	; 0x50b2 <SevenSegment_From0To9+0x624>
    50b6:	fe 01       	movw	r30, r28
    50b8:	eb 5a       	subi	r30, 0xAB	; 171
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	91 83       	std	Z+1, r25	; 0x01
    50be:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 1, 1); // 4
    50c0:	fe 01       	movw	r30, r28
    50c2:	e3 57       	subi	r30, 0x73	; 115
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	80 81       	ld	r24, Z
    50c8:	60 e0       	ldi	r22, 0x00	; 0
    50ca:	41 e0       	ldi	r20, 0x01	; 1
    50cc:	21 e0       	ldi	r18, 0x01	; 1
    50ce:	00 e0       	ldi	r16, 0x00	; 0
    50d0:	ee 24       	eor	r14, r14
    50d2:	cc 24       	eor	r12, r12
    50d4:	c3 94       	inc	r12
    50d6:	aa 24       	eor	r10, r10
    50d8:	a3 94       	inc	r10
    50da:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    50de:	fe 01       	movw	r30, r28
    50e0:	ef 5a       	subi	r30, 0xAF	; 175
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	a8 e4       	ldi	r26, 0x48	; 72
    50ea:	b2 e4       	ldi	r27, 0x42	; 66
    50ec:	80 83       	st	Z, r24
    50ee:	91 83       	std	Z+1, r25	; 0x01
    50f0:	a2 83       	std	Z+2, r26	; 0x02
    50f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50f4:	8e 01       	movw	r16, r28
    50f6:	03 5b       	subi	r16, 0xB3	; 179
    50f8:	1f 4f       	sbci	r17, 0xFF	; 255
    50fa:	fe 01       	movw	r30, r28
    50fc:	ef 5a       	subi	r30, 0xAF	; 175
    50fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5100:	60 81       	ld	r22, Z
    5102:	71 81       	ldd	r23, Z+1	; 0x01
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	93 81       	ldd	r25, Z+3	; 0x03
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	4a e7       	ldi	r20, 0x7A	; 122
    510e:	55 e4       	ldi	r21, 0x45	; 69
    5110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	f8 01       	movw	r30, r16
    511a:	80 83       	st	Z, r24
    511c:	91 83       	std	Z+1, r25	; 0x01
    511e:	a2 83       	std	Z+2, r26	; 0x02
    5120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5122:	fe 01       	movw	r30, r28
    5124:	e3 5b       	subi	r30, 0xB3	; 179
    5126:	ff 4f       	sbci	r31, 0xFF	; 255
    5128:	60 81       	ld	r22, Z
    512a:	71 81       	ldd	r23, Z+1	; 0x01
    512c:	82 81       	ldd	r24, Z+2	; 0x02
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e8       	ldi	r20, 0x80	; 128
    5136:	5f e3       	ldi	r21, 0x3F	; 63
    5138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    513c:	88 23       	and	r24, r24
    513e:	44 f4       	brge	.+16     	; 0x5150 <SevenSegment_From0To9+0x6c2>
		__ticks = 1;
    5140:	fe 01       	movw	r30, r28
    5142:	e5 5b       	subi	r30, 0xB5	; 181
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	91 83       	std	Z+1, r25	; 0x01
    514c:	80 83       	st	Z, r24
    514e:	64 c0       	rjmp	.+200    	; 0x5218 <SevenSegment_From0To9+0x78a>
	else if (__tmp > 65535)
    5150:	fe 01       	movw	r30, r28
    5152:	e3 5b       	subi	r30, 0xB3	; 179
    5154:	ff 4f       	sbci	r31, 0xFF	; 255
    5156:	60 81       	ld	r22, Z
    5158:	71 81       	ldd	r23, Z+1	; 0x01
    515a:	82 81       	ldd	r24, Z+2	; 0x02
    515c:	93 81       	ldd	r25, Z+3	; 0x03
    515e:	20 e0       	ldi	r18, 0x00	; 0
    5160:	3f ef       	ldi	r19, 0xFF	; 255
    5162:	4f e7       	ldi	r20, 0x7F	; 127
    5164:	57 e4       	ldi	r21, 0x47	; 71
    5166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    516a:	18 16       	cp	r1, r24
    516c:	0c f0       	brlt	.+2      	; 0x5170 <SevenSegment_From0To9+0x6e2>
    516e:	43 c0       	rjmp	.+134    	; 0x51f6 <SevenSegment_From0To9+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5170:	fe 01       	movw	r30, r28
    5172:	ef 5a       	subi	r30, 0xAF	; 175
    5174:	ff 4f       	sbci	r31, 0xFF	; 255
    5176:	60 81       	ld	r22, Z
    5178:	71 81       	ldd	r23, Z+1	; 0x01
    517a:	82 81       	ldd	r24, Z+2	; 0x02
    517c:	93 81       	ldd	r25, Z+3	; 0x03
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	40 e2       	ldi	r20, 0x20	; 32
    5184:	51 e4       	ldi	r21, 0x41	; 65
    5186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	8e 01       	movw	r16, r28
    5190:	05 5b       	subi	r16, 0xB5	; 181
    5192:	1f 4f       	sbci	r17, 0xFF	; 255
    5194:	bc 01       	movw	r22, r24
    5196:	cd 01       	movw	r24, r26
    5198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	f8 01       	movw	r30, r16
    51a2:	91 83       	std	Z+1, r25	; 0x01
    51a4:	80 83       	st	Z, r24
    51a6:	1f c0       	rjmp	.+62     	; 0x51e6 <SevenSegment_From0To9+0x758>
    51a8:	fe 01       	movw	r30, r28
    51aa:	e7 5b       	subi	r30, 0xB7	; 183
    51ac:	ff 4f       	sbci	r31, 0xFF	; 255
    51ae:	80 e9       	ldi	r24, 0x90	; 144
    51b0:	91 e0       	ldi	r25, 0x01	; 1
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	80 83       	st	Z, r24
    51b6:	fe 01       	movw	r30, r28
    51b8:	e7 5b       	subi	r30, 0xB7	; 183
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	80 81       	ld	r24, Z
    51be:	91 81       	ldd	r25, Z+1	; 0x01
    51c0:	01 97       	sbiw	r24, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <SevenSegment_From0To9+0x732>
    51c4:	fe 01       	movw	r30, r28
    51c6:	e7 5b       	subi	r30, 0xB7	; 183
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ce:	de 01       	movw	r26, r28
    51d0:	a5 5b       	subi	r26, 0xB5	; 181
    51d2:	bf 4f       	sbci	r27, 0xFF	; 255
    51d4:	fe 01       	movw	r30, r28
    51d6:	e5 5b       	subi	r30, 0xB5	; 181
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	80 81       	ld	r24, Z
    51dc:	91 81       	ldd	r25, Z+1	; 0x01
    51de:	01 97       	sbiw	r24, 0x01	; 1
    51e0:	11 96       	adiw	r26, 0x01	; 1
    51e2:	9c 93       	st	X, r25
    51e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51e6:	fe 01       	movw	r30, r28
    51e8:	e5 5b       	subi	r30, 0xB5	; 181
    51ea:	ff 4f       	sbci	r31, 0xFF	; 255
    51ec:	80 81       	ld	r24, Z
    51ee:	91 81       	ldd	r25, Z+1	; 0x01
    51f0:	00 97       	sbiw	r24, 0x00	; 0
    51f2:	d1 f6       	brne	.-76     	; 0x51a8 <SevenSegment_From0To9+0x71a>
    51f4:	27 c0       	rjmp	.+78     	; 0x5244 <SevenSegment_From0To9+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51f6:	8e 01       	movw	r16, r28
    51f8:	05 5b       	subi	r16, 0xB5	; 181
    51fa:	1f 4f       	sbci	r17, 0xFF	; 255
    51fc:	fe 01       	movw	r30, r28
    51fe:	e3 5b       	subi	r30, 0xB3	; 179
    5200:	ff 4f       	sbci	r31, 0xFF	; 255
    5202:	60 81       	ld	r22, Z
    5204:	71 81       	ldd	r23, Z+1	; 0x01
    5206:	82 81       	ldd	r24, Z+2	; 0x02
    5208:	93 81       	ldd	r25, Z+3	; 0x03
    520a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	f8 01       	movw	r30, r16
    5214:	91 83       	std	Z+1, r25	; 0x01
    5216:	80 83       	st	Z, r24
    5218:	de 01       	movw	r26, r28
    521a:	a9 5b       	subi	r26, 0xB9	; 185
    521c:	bf 4f       	sbci	r27, 0xFF	; 255
    521e:	fe 01       	movw	r30, r28
    5220:	e5 5b       	subi	r30, 0xB5	; 181
    5222:	ff 4f       	sbci	r31, 0xFF	; 255
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	8d 93       	st	X+, r24
    522a:	9c 93       	st	X, r25
    522c:	fe 01       	movw	r30, r28
    522e:	e9 5b       	subi	r30, 0xB9	; 185
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	80 81       	ld	r24, Z
    5234:	91 81       	ldd	r25, Z+1	; 0x01
    5236:	01 97       	sbiw	r24, 0x01	; 1
    5238:	f1 f7       	brne	.-4      	; 0x5236 <SevenSegment_From0To9+0x7a8>
    523a:	fe 01       	movw	r30, r28
    523c:	e9 5b       	subi	r30, 0xB9	; 185
    523e:	ff 4f       	sbci	r31, 0xFF	; 255
    5240:	91 83       	std	Z+1, r25	; 0x01
    5242:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 0, 1, 1); // 5
    5244:	fe 01       	movw	r30, r28
    5246:	e3 57       	subi	r30, 0x73	; 115
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	80 81       	ld	r24, Z
    524c:	61 e0       	ldi	r22, 0x01	; 1
    524e:	40 e0       	ldi	r20, 0x00	; 0
    5250:	21 e0       	ldi	r18, 0x01	; 1
    5252:	01 e0       	ldi	r16, 0x01	; 1
    5254:	ee 24       	eor	r14, r14
    5256:	cc 24       	eor	r12, r12
    5258:	c3 94       	inc	r12
    525a:	aa 24       	eor	r10, r10
    525c:	a3 94       	inc	r10
    525e:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5262:	fe 01       	movw	r30, r28
    5264:	ed 5b       	subi	r30, 0xBD	; 189
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	a8 e4       	ldi	r26, 0x48	; 72
    526e:	b2 e4       	ldi	r27, 0x42	; 66
    5270:	80 83       	st	Z, r24
    5272:	91 83       	std	Z+1, r25	; 0x01
    5274:	a2 83       	std	Z+2, r26	; 0x02
    5276:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5278:	8e 01       	movw	r16, r28
    527a:	01 5c       	subi	r16, 0xC1	; 193
    527c:	1f 4f       	sbci	r17, 0xFF	; 255
    527e:	fe 01       	movw	r30, r28
    5280:	ed 5b       	subi	r30, 0xBD	; 189
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	60 81       	ld	r22, Z
    5286:	71 81       	ldd	r23, Z+1	; 0x01
    5288:	82 81       	ldd	r24, Z+2	; 0x02
    528a:	93 81       	ldd	r25, Z+3	; 0x03
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	4a e7       	ldi	r20, 0x7A	; 122
    5292:	55 e4       	ldi	r21, 0x45	; 69
    5294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5298:	dc 01       	movw	r26, r24
    529a:	cb 01       	movw	r24, r22
    529c:	f8 01       	movw	r30, r16
    529e:	80 83       	st	Z, r24
    52a0:	91 83       	std	Z+1, r25	; 0x01
    52a2:	a2 83       	std	Z+2, r26	; 0x02
    52a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52a6:	fe 01       	movw	r30, r28
    52a8:	ff 96       	adiw	r30, 0x3f	; 63
    52aa:	60 81       	ld	r22, Z
    52ac:	71 81       	ldd	r23, Z+1	; 0x01
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	93 81       	ldd	r25, Z+3	; 0x03
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e8       	ldi	r20, 0x80	; 128
    52b8:	5f e3       	ldi	r21, 0x3F	; 63
    52ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52be:	88 23       	and	r24, r24
    52c0:	2c f4       	brge	.+10     	; 0x52cc <SevenSegment_From0To9+0x83e>
		__ticks = 1;
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	9e af       	std	Y+62, r25	; 0x3e
    52c8:	8d af       	std	Y+61, r24	; 0x3d
    52ca:	46 c0       	rjmp	.+140    	; 0x5358 <SevenSegment_From0To9+0x8ca>
	else if (__tmp > 65535)
    52cc:	fe 01       	movw	r30, r28
    52ce:	ff 96       	adiw	r30, 0x3f	; 63
    52d0:	60 81       	ld	r22, Z
    52d2:	71 81       	ldd	r23, Z+1	; 0x01
    52d4:	82 81       	ldd	r24, Z+2	; 0x02
    52d6:	93 81       	ldd	r25, Z+3	; 0x03
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	3f ef       	ldi	r19, 0xFF	; 255
    52dc:	4f e7       	ldi	r20, 0x7F	; 127
    52de:	57 e4       	ldi	r21, 0x47	; 71
    52e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52e4:	18 16       	cp	r1, r24
    52e6:	64 f5       	brge	.+88     	; 0x5340 <SevenSegment_From0To9+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52e8:	fe 01       	movw	r30, r28
    52ea:	ed 5b       	subi	r30, 0xBD	; 189
    52ec:	ff 4f       	sbci	r31, 0xFF	; 255
    52ee:	60 81       	ld	r22, Z
    52f0:	71 81       	ldd	r23, Z+1	; 0x01
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	40 e2       	ldi	r20, 0x20	; 32
    52fc:	51 e4       	ldi	r21, 0x41	; 65
    52fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5302:	dc 01       	movw	r26, r24
    5304:	cb 01       	movw	r24, r22
    5306:	bc 01       	movw	r22, r24
    5308:	cd 01       	movw	r24, r26
    530a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	9e af       	std	Y+62, r25	; 0x3e
    5314:	8d af       	std	Y+61, r24	; 0x3d
    5316:	0f c0       	rjmp	.+30     	; 0x5336 <SevenSegment_From0To9+0x8a8>
    5318:	80 e9       	ldi	r24, 0x90	; 144
    531a:	91 e0       	ldi	r25, 0x01	; 1
    531c:	9c af       	std	Y+60, r25	; 0x3c
    531e:	8b af       	std	Y+59, r24	; 0x3b
    5320:	8b ad       	ldd	r24, Y+59	; 0x3b
    5322:	9c ad       	ldd	r25, Y+60	; 0x3c
    5324:	01 97       	sbiw	r24, 0x01	; 1
    5326:	f1 f7       	brne	.-4      	; 0x5324 <SevenSegment_From0To9+0x896>
    5328:	9c af       	std	Y+60, r25	; 0x3c
    532a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532c:	8d ad       	ldd	r24, Y+61	; 0x3d
    532e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5330:	01 97       	sbiw	r24, 0x01	; 1
    5332:	9e af       	std	Y+62, r25	; 0x3e
    5334:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5336:	8d ad       	ldd	r24, Y+61	; 0x3d
    5338:	9e ad       	ldd	r25, Y+62	; 0x3e
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	69 f7       	brne	.-38     	; 0x5318 <SevenSegment_From0To9+0x88a>
    533e:	16 c0       	rjmp	.+44     	; 0x536c <SevenSegment_From0To9+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5340:	fe 01       	movw	r30, r28
    5342:	ff 96       	adiw	r30, 0x3f	; 63
    5344:	60 81       	ld	r22, Z
    5346:	71 81       	ldd	r23, Z+1	; 0x01
    5348:	82 81       	ldd	r24, Z+2	; 0x02
    534a:	93 81       	ldd	r25, Z+3	; 0x03
    534c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	9e af       	std	Y+62, r25	; 0x3e
    5356:	8d af       	std	Y+61, r24	; 0x3d
    5358:	8d ad       	ldd	r24, Y+61	; 0x3d
    535a:	9e ad       	ldd	r25, Y+62	; 0x3e
    535c:	9a af       	std	Y+58, r25	; 0x3a
    535e:	89 af       	std	Y+57, r24	; 0x39
    5360:	89 ad       	ldd	r24, Y+57	; 0x39
    5362:	9a ad       	ldd	r25, Y+58	; 0x3a
    5364:	01 97       	sbiw	r24, 0x01	; 1
    5366:	f1 f7       	brne	.-4      	; 0x5364 <SevenSegment_From0To9+0x8d6>
    5368:	9a af       	std	Y+58, r25	; 0x3a
    536a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 1); // 6
    536c:	fe 01       	movw	r30, r28
    536e:	e3 57       	subi	r30, 0x73	; 115
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	80 81       	ld	r24, Z
    5374:	61 e0       	ldi	r22, 0x01	; 1
    5376:	40 e0       	ldi	r20, 0x00	; 0
    5378:	21 e0       	ldi	r18, 0x01	; 1
    537a:	01 e0       	ldi	r16, 0x01	; 1
    537c:	ee 24       	eor	r14, r14
    537e:	e3 94       	inc	r14
    5380:	cc 24       	eor	r12, r12
    5382:	c3 94       	inc	r12
    5384:	aa 24       	eor	r10, r10
    5386:	a3 94       	inc	r10
    5388:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    538c:	80 e0       	ldi	r24, 0x00	; 0
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	a8 e4       	ldi	r26, 0x48	; 72
    5392:	b2 e4       	ldi	r27, 0x42	; 66
    5394:	8d ab       	std	Y+53, r24	; 0x35
    5396:	9e ab       	std	Y+54, r25	; 0x36
    5398:	af ab       	std	Y+55, r26	; 0x37
    539a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    539c:	6d a9       	ldd	r22, Y+53	; 0x35
    539e:	7e a9       	ldd	r23, Y+54	; 0x36
    53a0:	8f a9       	ldd	r24, Y+55	; 0x37
    53a2:	98 ad       	ldd	r25, Y+56	; 0x38
    53a4:	20 e0       	ldi	r18, 0x00	; 0
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	4a e7       	ldi	r20, 0x7A	; 122
    53aa:	55 e4       	ldi	r21, 0x45	; 69
    53ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b0:	dc 01       	movw	r26, r24
    53b2:	cb 01       	movw	r24, r22
    53b4:	89 ab       	std	Y+49, r24	; 0x31
    53b6:	9a ab       	std	Y+50, r25	; 0x32
    53b8:	ab ab       	std	Y+51, r26	; 0x33
    53ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53bc:	69 a9       	ldd	r22, Y+49	; 0x31
    53be:	7a a9       	ldd	r23, Y+50	; 0x32
    53c0:	8b a9       	ldd	r24, Y+51	; 0x33
    53c2:	9c a9       	ldd	r25, Y+52	; 0x34
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	40 e8       	ldi	r20, 0x80	; 128
    53ca:	5f e3       	ldi	r21, 0x3F	; 63
    53cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53d0:	88 23       	and	r24, r24
    53d2:	2c f4       	brge	.+10     	; 0x53de <SevenSegment_From0To9+0x950>
		__ticks = 1;
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	98 ab       	std	Y+48, r25	; 0x30
    53da:	8f a7       	std	Y+47, r24	; 0x2f
    53dc:	3f c0       	rjmp	.+126    	; 0x545c <SevenSegment_From0To9+0x9ce>
	else if (__tmp > 65535)
    53de:	69 a9       	ldd	r22, Y+49	; 0x31
    53e0:	7a a9       	ldd	r23, Y+50	; 0x32
    53e2:	8b a9       	ldd	r24, Y+51	; 0x33
    53e4:	9c a9       	ldd	r25, Y+52	; 0x34
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	3f ef       	ldi	r19, 0xFF	; 255
    53ea:	4f e7       	ldi	r20, 0x7F	; 127
    53ec:	57 e4       	ldi	r21, 0x47	; 71
    53ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53f2:	18 16       	cp	r1, r24
    53f4:	4c f5       	brge	.+82     	; 0x5448 <SevenSegment_From0To9+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f6:	6d a9       	ldd	r22, Y+53	; 0x35
    53f8:	7e a9       	ldd	r23, Y+54	; 0x36
    53fa:	8f a9       	ldd	r24, Y+55	; 0x37
    53fc:	98 ad       	ldd	r25, Y+56	; 0x38
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	40 e2       	ldi	r20, 0x20	; 32
    5404:	51 e4       	ldi	r21, 0x41	; 65
    5406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540a:	dc 01       	movw	r26, r24
    540c:	cb 01       	movw	r24, r22
    540e:	bc 01       	movw	r22, r24
    5410:	cd 01       	movw	r24, r26
    5412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5416:	dc 01       	movw	r26, r24
    5418:	cb 01       	movw	r24, r22
    541a:	98 ab       	std	Y+48, r25	; 0x30
    541c:	8f a7       	std	Y+47, r24	; 0x2f
    541e:	0f c0       	rjmp	.+30     	; 0x543e <SevenSegment_From0To9+0x9b0>
    5420:	80 e9       	ldi	r24, 0x90	; 144
    5422:	91 e0       	ldi	r25, 0x01	; 1
    5424:	9e a7       	std	Y+46, r25	; 0x2e
    5426:	8d a7       	std	Y+45, r24	; 0x2d
    5428:	8d a5       	ldd	r24, Y+45	; 0x2d
    542a:	9e a5       	ldd	r25, Y+46	; 0x2e
    542c:	01 97       	sbiw	r24, 0x01	; 1
    542e:	f1 f7       	brne	.-4      	; 0x542c <SevenSegment_From0To9+0x99e>
    5430:	9e a7       	std	Y+46, r25	; 0x2e
    5432:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5434:	8f a5       	ldd	r24, Y+47	; 0x2f
    5436:	98 a9       	ldd	r25, Y+48	; 0x30
    5438:	01 97       	sbiw	r24, 0x01	; 1
    543a:	98 ab       	std	Y+48, r25	; 0x30
    543c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    543e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5440:	98 a9       	ldd	r25, Y+48	; 0x30
    5442:	00 97       	sbiw	r24, 0x00	; 0
    5444:	69 f7       	brne	.-38     	; 0x5420 <SevenSegment_From0To9+0x992>
    5446:	14 c0       	rjmp	.+40     	; 0x5470 <SevenSegment_From0To9+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5448:	69 a9       	ldd	r22, Y+49	; 0x31
    544a:	7a a9       	ldd	r23, Y+50	; 0x32
    544c:	8b a9       	ldd	r24, Y+51	; 0x33
    544e:	9c a9       	ldd	r25, Y+52	; 0x34
    5450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5454:	dc 01       	movw	r26, r24
    5456:	cb 01       	movw	r24, r22
    5458:	98 ab       	std	Y+48, r25	; 0x30
    545a:	8f a7       	std	Y+47, r24	; 0x2f
    545c:	8f a5       	ldd	r24, Y+47	; 0x2f
    545e:	98 a9       	ldd	r25, Y+48	; 0x30
    5460:	9c a7       	std	Y+44, r25	; 0x2c
    5462:	8b a7       	std	Y+43, r24	; 0x2b
    5464:	8b a5       	ldd	r24, Y+43	; 0x2b
    5466:	9c a5       	ldd	r25, Y+44	; 0x2c
    5468:	01 97       	sbiw	r24, 0x01	; 1
    546a:	f1 f7       	brne	.-4      	; 0x5468 <SevenSegment_From0To9+0x9da>
    546c:	9c a7       	std	Y+44, r25	; 0x2c
    546e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 0, 0, 0); // 7
    5470:	fe 01       	movw	r30, r28
    5472:	e3 57       	subi	r30, 0x73	; 115
    5474:	ff 4f       	sbci	r31, 0xFF	; 255
    5476:	80 81       	ld	r24, Z
    5478:	61 e0       	ldi	r22, 0x01	; 1
    547a:	41 e0       	ldi	r20, 0x01	; 1
    547c:	21 e0       	ldi	r18, 0x01	; 1
    547e:	00 e0       	ldi	r16, 0x00	; 0
    5480:	ee 24       	eor	r14, r14
    5482:	cc 24       	eor	r12, r12
    5484:	aa 24       	eor	r10, r10
    5486:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	a8 e4       	ldi	r26, 0x48	; 72
    5490:	b2 e4       	ldi	r27, 0x42	; 66
    5492:	8f a3       	std	Y+39, r24	; 0x27
    5494:	98 a7       	std	Y+40, r25	; 0x28
    5496:	a9 a7       	std	Y+41, r26	; 0x29
    5498:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    549a:	6f a1       	ldd	r22, Y+39	; 0x27
    549c:	78 a5       	ldd	r23, Y+40	; 0x28
    549e:	89 a5       	ldd	r24, Y+41	; 0x29
    54a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	4a e7       	ldi	r20, 0x7A	; 122
    54a8:	55 e4       	ldi	r21, 0x45	; 69
    54aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	8b a3       	std	Y+35, r24	; 0x23
    54b4:	9c a3       	std	Y+36, r25	; 0x24
    54b6:	ad a3       	std	Y+37, r26	; 0x25
    54b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54ba:	6b a1       	ldd	r22, Y+35	; 0x23
    54bc:	7c a1       	ldd	r23, Y+36	; 0x24
    54be:	8d a1       	ldd	r24, Y+37	; 0x25
    54c0:	9e a1       	ldd	r25, Y+38	; 0x26
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	40 e8       	ldi	r20, 0x80	; 128
    54c8:	5f e3       	ldi	r21, 0x3F	; 63
    54ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54ce:	88 23       	and	r24, r24
    54d0:	2c f4       	brge	.+10     	; 0x54dc <SevenSegment_From0To9+0xa4e>
		__ticks = 1;
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	9a a3       	std	Y+34, r25	; 0x22
    54d8:	89 a3       	std	Y+33, r24	; 0x21
    54da:	3f c0       	rjmp	.+126    	; 0x555a <SevenSegment_From0To9+0xacc>
	else if (__tmp > 65535)
    54dc:	6b a1       	ldd	r22, Y+35	; 0x23
    54de:	7c a1       	ldd	r23, Y+36	; 0x24
    54e0:	8d a1       	ldd	r24, Y+37	; 0x25
    54e2:	9e a1       	ldd	r25, Y+38	; 0x26
    54e4:	20 e0       	ldi	r18, 0x00	; 0
    54e6:	3f ef       	ldi	r19, 0xFF	; 255
    54e8:	4f e7       	ldi	r20, 0x7F	; 127
    54ea:	57 e4       	ldi	r21, 0x47	; 71
    54ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54f0:	18 16       	cp	r1, r24
    54f2:	4c f5       	brge	.+82     	; 0x5546 <SevenSegment_From0To9+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54f4:	6f a1       	ldd	r22, Y+39	; 0x27
    54f6:	78 a5       	ldd	r23, Y+40	; 0x28
    54f8:	89 a5       	ldd	r24, Y+41	; 0x29
    54fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    54fc:	20 e0       	ldi	r18, 0x00	; 0
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	40 e2       	ldi	r20, 0x20	; 32
    5502:	51 e4       	ldi	r21, 0x41	; 65
    5504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5508:	dc 01       	movw	r26, r24
    550a:	cb 01       	movw	r24, r22
    550c:	bc 01       	movw	r22, r24
    550e:	cd 01       	movw	r24, r26
    5510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5514:	dc 01       	movw	r26, r24
    5516:	cb 01       	movw	r24, r22
    5518:	9a a3       	std	Y+34, r25	; 0x22
    551a:	89 a3       	std	Y+33, r24	; 0x21
    551c:	0f c0       	rjmp	.+30     	; 0x553c <SevenSegment_From0To9+0xaae>
    551e:	80 e9       	ldi	r24, 0x90	; 144
    5520:	91 e0       	ldi	r25, 0x01	; 1
    5522:	98 a3       	std	Y+32, r25	; 0x20
    5524:	8f 8f       	std	Y+31, r24	; 0x1f
    5526:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5528:	98 a1       	ldd	r25, Y+32	; 0x20
    552a:	01 97       	sbiw	r24, 0x01	; 1
    552c:	f1 f7       	brne	.-4      	; 0x552a <SevenSegment_From0To9+0xa9c>
    552e:	98 a3       	std	Y+32, r25	; 0x20
    5530:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5532:	89 a1       	ldd	r24, Y+33	; 0x21
    5534:	9a a1       	ldd	r25, Y+34	; 0x22
    5536:	01 97       	sbiw	r24, 0x01	; 1
    5538:	9a a3       	std	Y+34, r25	; 0x22
    553a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    553c:	89 a1       	ldd	r24, Y+33	; 0x21
    553e:	9a a1       	ldd	r25, Y+34	; 0x22
    5540:	00 97       	sbiw	r24, 0x00	; 0
    5542:	69 f7       	brne	.-38     	; 0x551e <SevenSegment_From0To9+0xa90>
    5544:	14 c0       	rjmp	.+40     	; 0x556e <SevenSegment_From0To9+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5546:	6b a1       	ldd	r22, Y+35	; 0x23
    5548:	7c a1       	ldd	r23, Y+36	; 0x24
    554a:	8d a1       	ldd	r24, Y+37	; 0x25
    554c:	9e a1       	ldd	r25, Y+38	; 0x26
    554e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5552:	dc 01       	movw	r26, r24
    5554:	cb 01       	movw	r24, r22
    5556:	9a a3       	std	Y+34, r25	; 0x22
    5558:	89 a3       	std	Y+33, r24	; 0x21
    555a:	89 a1       	ldd	r24, Y+33	; 0x21
    555c:	9a a1       	ldd	r25, Y+34	; 0x22
    555e:	9e 8f       	std	Y+30, r25	; 0x1e
    5560:	8d 8f       	std	Y+29, r24	; 0x1d
    5562:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5564:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5566:	01 97       	sbiw	r24, 0x01	; 1
    5568:	f1 f7       	brne	.-4      	; 0x5566 <SevenSegment_From0To9+0xad8>
    556a:	9e 8f       	std	Y+30, r25	; 0x1e
    556c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 1); // 8
    556e:	fe 01       	movw	r30, r28
    5570:	e3 57       	subi	r30, 0x73	; 115
    5572:	ff 4f       	sbci	r31, 0xFF	; 255
    5574:	80 81       	ld	r24, Z
    5576:	61 e0       	ldi	r22, 0x01	; 1
    5578:	41 e0       	ldi	r20, 0x01	; 1
    557a:	21 e0       	ldi	r18, 0x01	; 1
    557c:	01 e0       	ldi	r16, 0x01	; 1
    557e:	ee 24       	eor	r14, r14
    5580:	e3 94       	inc	r14
    5582:	cc 24       	eor	r12, r12
    5584:	c3 94       	inc	r12
    5586:	aa 24       	eor	r10, r10
    5588:	a3 94       	inc	r10
    558a:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    558e:	80 e0       	ldi	r24, 0x00	; 0
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	a8 e4       	ldi	r26, 0x48	; 72
    5594:	b2 e4       	ldi	r27, 0x42	; 66
    5596:	89 8f       	std	Y+25, r24	; 0x19
    5598:	9a 8f       	std	Y+26, r25	; 0x1a
    559a:	ab 8f       	std	Y+27, r26	; 0x1b
    559c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    559e:	69 8d       	ldd	r22, Y+25	; 0x19
    55a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	4a e7       	ldi	r20, 0x7A	; 122
    55ac:	55 e4       	ldi	r21, 0x45	; 69
    55ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	8d 8b       	std	Y+21, r24	; 0x15
    55b8:	9e 8b       	std	Y+22, r25	; 0x16
    55ba:	af 8b       	std	Y+23, r26	; 0x17
    55bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55be:	6d 89       	ldd	r22, Y+21	; 0x15
    55c0:	7e 89       	ldd	r23, Y+22	; 0x16
    55c2:	8f 89       	ldd	r24, Y+23	; 0x17
    55c4:	98 8d       	ldd	r25, Y+24	; 0x18
    55c6:	20 e0       	ldi	r18, 0x00	; 0
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	40 e8       	ldi	r20, 0x80	; 128
    55cc:	5f e3       	ldi	r21, 0x3F	; 63
    55ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55d2:	88 23       	and	r24, r24
    55d4:	2c f4       	brge	.+10     	; 0x55e0 <SevenSegment_From0To9+0xb52>
		__ticks = 1;
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	9c 8b       	std	Y+20, r25	; 0x14
    55dc:	8b 8b       	std	Y+19, r24	; 0x13
    55de:	3f c0       	rjmp	.+126    	; 0x565e <SevenSegment_From0To9+0xbd0>
	else if (__tmp > 65535)
    55e0:	6d 89       	ldd	r22, Y+21	; 0x15
    55e2:	7e 89       	ldd	r23, Y+22	; 0x16
    55e4:	8f 89       	ldd	r24, Y+23	; 0x17
    55e6:	98 8d       	ldd	r25, Y+24	; 0x18
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	3f ef       	ldi	r19, 0xFF	; 255
    55ec:	4f e7       	ldi	r20, 0x7F	; 127
    55ee:	57 e4       	ldi	r21, 0x47	; 71
    55f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55f4:	18 16       	cp	r1, r24
    55f6:	4c f5       	brge	.+82     	; 0x564a <SevenSegment_From0To9+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f8:	69 8d       	ldd	r22, Y+25	; 0x19
    55fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	40 e2       	ldi	r20, 0x20	; 32
    5606:	51 e4       	ldi	r21, 0x41	; 65
    5608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	bc 01       	movw	r22, r24
    5612:	cd 01       	movw	r24, r26
    5614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	9c 8b       	std	Y+20, r25	; 0x14
    561e:	8b 8b       	std	Y+19, r24	; 0x13
    5620:	0f c0       	rjmp	.+30     	; 0x5640 <SevenSegment_From0To9+0xbb2>
    5622:	80 e9       	ldi	r24, 0x90	; 144
    5624:	91 e0       	ldi	r25, 0x01	; 1
    5626:	9a 8b       	std	Y+18, r25	; 0x12
    5628:	89 8b       	std	Y+17, r24	; 0x11
    562a:	89 89       	ldd	r24, Y+17	; 0x11
    562c:	9a 89       	ldd	r25, Y+18	; 0x12
    562e:	01 97       	sbiw	r24, 0x01	; 1
    5630:	f1 f7       	brne	.-4      	; 0x562e <SevenSegment_From0To9+0xba0>
    5632:	9a 8b       	std	Y+18, r25	; 0x12
    5634:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5636:	8b 89       	ldd	r24, Y+19	; 0x13
    5638:	9c 89       	ldd	r25, Y+20	; 0x14
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	9c 8b       	std	Y+20, r25	; 0x14
    563e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5640:	8b 89       	ldd	r24, Y+19	; 0x13
    5642:	9c 89       	ldd	r25, Y+20	; 0x14
    5644:	00 97       	sbiw	r24, 0x00	; 0
    5646:	69 f7       	brne	.-38     	; 0x5622 <SevenSegment_From0To9+0xb94>
    5648:	14 c0       	rjmp	.+40     	; 0x5672 <SevenSegment_From0To9+0xbe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    564a:	6d 89       	ldd	r22, Y+21	; 0x15
    564c:	7e 89       	ldd	r23, Y+22	; 0x16
    564e:	8f 89       	ldd	r24, Y+23	; 0x17
    5650:	98 8d       	ldd	r25, Y+24	; 0x18
    5652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5656:	dc 01       	movw	r26, r24
    5658:	cb 01       	movw	r24, r22
    565a:	9c 8b       	std	Y+20, r25	; 0x14
    565c:	8b 8b       	std	Y+19, r24	; 0x13
    565e:	8b 89       	ldd	r24, Y+19	; 0x13
    5660:	9c 89       	ldd	r25, Y+20	; 0x14
    5662:	98 8b       	std	Y+16, r25	; 0x10
    5664:	8f 87       	std	Y+15, r24	; 0x0f
    5666:	8f 85       	ldd	r24, Y+15	; 0x0f
    5668:	98 89       	ldd	r25, Y+16	; 0x10
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	f1 f7       	brne	.-4      	; 0x566a <SevenSegment_From0To9+0xbdc>
    566e:	98 8b       	std	Y+16, r25	; 0x10
    5670:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 1, 1); // 9
    5672:	fe 01       	movw	r30, r28
    5674:	e3 57       	subi	r30, 0x73	; 115
    5676:	ff 4f       	sbci	r31, 0xFF	; 255
    5678:	80 81       	ld	r24, Z
    567a:	61 e0       	ldi	r22, 0x01	; 1
    567c:	41 e0       	ldi	r20, 0x01	; 1
    567e:	21 e0       	ldi	r18, 0x01	; 1
    5680:	01 e0       	ldi	r16, 0x01	; 1
    5682:	ee 24       	eor	r14, r14
    5684:	cc 24       	eor	r12, r12
    5686:	c3 94       	inc	r12
    5688:	aa 24       	eor	r10, r10
    568a:	a3 94       	inc	r10
    568c:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5690:	80 e0       	ldi	r24, 0x00	; 0
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	a8 e4       	ldi	r26, 0x48	; 72
    5696:	b2 e4       	ldi	r27, 0x42	; 66
    5698:	8b 87       	std	Y+11, r24	; 0x0b
    569a:	9c 87       	std	Y+12, r25	; 0x0c
    569c:	ad 87       	std	Y+13, r26	; 0x0d
    569e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    56a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    56a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    56a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    56a8:	20 e0       	ldi	r18, 0x00	; 0
    56aa:	30 e0       	ldi	r19, 0x00	; 0
    56ac:	4a e7       	ldi	r20, 0x7A	; 122
    56ae:	55 e4       	ldi	r21, 0x45	; 69
    56b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56b4:	dc 01       	movw	r26, r24
    56b6:	cb 01       	movw	r24, r22
    56b8:	8f 83       	std	Y+7, r24	; 0x07
    56ba:	98 87       	std	Y+8, r25	; 0x08
    56bc:	a9 87       	std	Y+9, r26	; 0x09
    56be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56c0:	6f 81       	ldd	r22, Y+7	; 0x07
    56c2:	78 85       	ldd	r23, Y+8	; 0x08
    56c4:	89 85       	ldd	r24, Y+9	; 0x09
    56c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c8:	20 e0       	ldi	r18, 0x00	; 0
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	40 e8       	ldi	r20, 0x80	; 128
    56ce:	5f e3       	ldi	r21, 0x3F	; 63
    56d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56d4:	88 23       	and	r24, r24
    56d6:	2c f4       	brge	.+10     	; 0x56e2 <SevenSegment_From0To9+0xc54>
		__ticks = 1;
    56d8:	81 e0       	ldi	r24, 0x01	; 1
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	9e 83       	std	Y+6, r25	; 0x06
    56de:	8d 83       	std	Y+5, r24	; 0x05
    56e0:	3f c0       	rjmp	.+126    	; 0x5760 <SevenSegment_From0To9+0xcd2>
	else if (__tmp > 65535)
    56e2:	6f 81       	ldd	r22, Y+7	; 0x07
    56e4:	78 85       	ldd	r23, Y+8	; 0x08
    56e6:	89 85       	ldd	r24, Y+9	; 0x09
    56e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	3f ef       	ldi	r19, 0xFF	; 255
    56ee:	4f e7       	ldi	r20, 0x7F	; 127
    56f0:	57 e4       	ldi	r21, 0x47	; 71
    56f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56f6:	18 16       	cp	r1, r24
    56f8:	4c f5       	brge	.+82     	; 0x574c <SevenSegment_From0To9+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    56fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    56fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5700:	9e 85       	ldd	r25, Y+14	; 0x0e
    5702:	20 e0       	ldi	r18, 0x00	; 0
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	40 e2       	ldi	r20, 0x20	; 32
    5708:	51 e4       	ldi	r21, 0x41	; 65
    570a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    570e:	dc 01       	movw	r26, r24
    5710:	cb 01       	movw	r24, r22
    5712:	bc 01       	movw	r22, r24
    5714:	cd 01       	movw	r24, r26
    5716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	9e 83       	std	Y+6, r25	; 0x06
    5720:	8d 83       	std	Y+5, r24	; 0x05
    5722:	0f c0       	rjmp	.+30     	; 0x5742 <SevenSegment_From0To9+0xcb4>
    5724:	80 e9       	ldi	r24, 0x90	; 144
    5726:	91 e0       	ldi	r25, 0x01	; 1
    5728:	9c 83       	std	Y+4, r25	; 0x04
    572a:	8b 83       	std	Y+3, r24	; 0x03
    572c:	8b 81       	ldd	r24, Y+3	; 0x03
    572e:	9c 81       	ldd	r25, Y+4	; 0x04
    5730:	01 97       	sbiw	r24, 0x01	; 1
    5732:	f1 f7       	brne	.-4      	; 0x5730 <SevenSegment_From0To9+0xca2>
    5734:	9c 83       	std	Y+4, r25	; 0x04
    5736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5738:	8d 81       	ldd	r24, Y+5	; 0x05
    573a:	9e 81       	ldd	r25, Y+6	; 0x06
    573c:	01 97       	sbiw	r24, 0x01	; 1
    573e:	9e 83       	std	Y+6, r25	; 0x06
    5740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5742:	8d 81       	ldd	r24, Y+5	; 0x05
    5744:	9e 81       	ldd	r25, Y+6	; 0x06
    5746:	00 97       	sbiw	r24, 0x00	; 0
    5748:	69 f7       	brne	.-38     	; 0x5724 <SevenSegment_From0To9+0xc96>
    574a:	b5 c9       	rjmp	.-3222   	; 0x4ab6 <SevenSegment_From0To9+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    574c:	6f 81       	ldd	r22, Y+7	; 0x07
    574e:	78 85       	ldd	r23, Y+8	; 0x08
    5750:	89 85       	ldd	r24, Y+9	; 0x09
    5752:	9a 85       	ldd	r25, Y+10	; 0x0a
    5754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	9e 83       	std	Y+6, r25	; 0x06
    575e:	8d 83       	std	Y+5, r24	; 0x05
    5760:	8d 81       	ldd	r24, Y+5	; 0x05
    5762:	9e 81       	ldd	r25, Y+6	; 0x06
    5764:	9a 83       	std	Y+2, r25	; 0x02
    5766:	89 83       	std	Y+1, r24	; 0x01
    5768:	89 81       	ldd	r24, Y+1	; 0x01
    576a:	9a 81       	ldd	r25, Y+2	; 0x02
    576c:	01 97       	sbiw	r24, 0x01	; 1
    576e:	f1 f7       	brne	.-4      	; 0x576c <SevenSegment_From0To9+0xcde>
    5770:	9a 83       	std	Y+2, r25	; 0x02
    5772:	89 83       	std	Y+1, r24	; 0x01
    5774:	a0 c9       	rjmp	.-3264   	; 0x4ab6 <SevenSegment_From0To9+0x28>

00005776 <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(u8 Copy_u8PortId){
    5776:	af 92       	push	r10
    5778:	cf 92       	push	r12
    577a:	ef 92       	push	r14
    577c:	0f 93       	push	r16
    577e:	1f 93       	push	r17
    5780:	df 93       	push	r29
    5782:	cf 93       	push	r28
    5784:	cd b7       	in	r28, 0x3d	; 61
    5786:	de b7       	in	r29, 0x3e	; 62
    5788:	c1 57       	subi	r28, 0x71	; 113
    578a:	d0 40       	sbci	r29, 0x00	; 0
    578c:	0f b6       	in	r0, 0x3f	; 63
    578e:	f8 94       	cli
    5790:	de bf       	out	0x3e, r29	; 62
    5792:	0f be       	out	0x3f, r0	; 63
    5794:	cd bf       	out	0x3d, r28	; 61
    5796:	fe 01       	movw	r30, r28
    5798:	ef 58       	subi	r30, 0x8F	; 143
    579a:	ff 4f       	sbci	r31, 0xFF	; 255
    579c:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 1, 1, 1); // A
    579e:	fe 01       	movw	r30, r28
    57a0:	ef 58       	subi	r30, 0x8F	; 143
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	80 81       	ld	r24, Z
    57a6:	61 e0       	ldi	r22, 0x01	; 1
    57a8:	41 e0       	ldi	r20, 0x01	; 1
    57aa:	21 e0       	ldi	r18, 0x01	; 1
    57ac:	00 e0       	ldi	r16, 0x00	; 0
    57ae:	ee 24       	eor	r14, r14
    57b0:	e3 94       	inc	r14
    57b2:	cc 24       	eor	r12, r12
    57b4:	c3 94       	inc	r12
    57b6:	aa 24       	eor	r10, r10
    57b8:	a3 94       	inc	r10
    57ba:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    57be:	fe 01       	movw	r30, r28
    57c0:	e3 59       	subi	r30, 0x93	; 147
    57c2:	ff 4f       	sbci	r31, 0xFF	; 255
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	a8 e4       	ldi	r26, 0x48	; 72
    57ca:	b2 e4       	ldi	r27, 0x42	; 66
    57cc:	80 83       	st	Z, r24
    57ce:	91 83       	std	Z+1, r25	; 0x01
    57d0:	a2 83       	std	Z+2, r26	; 0x02
    57d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d4:	8e 01       	movw	r16, r28
    57d6:	07 59       	subi	r16, 0x97	; 151
    57d8:	1f 4f       	sbci	r17, 0xFF	; 255
    57da:	fe 01       	movw	r30, r28
    57dc:	e3 59       	subi	r30, 0x93	; 147
    57de:	ff 4f       	sbci	r31, 0xFF	; 255
    57e0:	60 81       	ld	r22, Z
    57e2:	71 81       	ldd	r23, Z+1	; 0x01
    57e4:	82 81       	ldd	r24, Z+2	; 0x02
    57e6:	93 81       	ldd	r25, Z+3	; 0x03
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	4a e7       	ldi	r20, 0x7A	; 122
    57ee:	55 e4       	ldi	r21, 0x45	; 69
    57f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	f8 01       	movw	r30, r16
    57fa:	80 83       	st	Z, r24
    57fc:	91 83       	std	Z+1, r25	; 0x01
    57fe:	a2 83       	std	Z+2, r26	; 0x02
    5800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5802:	fe 01       	movw	r30, r28
    5804:	e7 59       	subi	r30, 0x97	; 151
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	60 81       	ld	r22, Z
    580a:	71 81       	ldd	r23, Z+1	; 0x01
    580c:	82 81       	ldd	r24, Z+2	; 0x02
    580e:	93 81       	ldd	r25, Z+3	; 0x03
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	30 e0       	ldi	r19, 0x00	; 0
    5814:	40 e8       	ldi	r20, 0x80	; 128
    5816:	5f e3       	ldi	r21, 0x3F	; 63
    5818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    581c:	88 23       	and	r24, r24
    581e:	44 f4       	brge	.+16     	; 0x5830 <SevenSegment_FromAToH+0xba>
		__ticks = 1;
    5820:	fe 01       	movw	r30, r28
    5822:	e9 59       	subi	r30, 0x99	; 153
    5824:	ff 4f       	sbci	r31, 0xFF	; 255
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	91 83       	std	Z+1, r25	; 0x01
    582c:	80 83       	st	Z, r24
    582e:	64 c0       	rjmp	.+200    	; 0x58f8 <SevenSegment_FromAToH+0x182>
	else if (__tmp > 65535)
    5830:	fe 01       	movw	r30, r28
    5832:	e7 59       	subi	r30, 0x97	; 151
    5834:	ff 4f       	sbci	r31, 0xFF	; 255
    5836:	60 81       	ld	r22, Z
    5838:	71 81       	ldd	r23, Z+1	; 0x01
    583a:	82 81       	ldd	r24, Z+2	; 0x02
    583c:	93 81       	ldd	r25, Z+3	; 0x03
    583e:	20 e0       	ldi	r18, 0x00	; 0
    5840:	3f ef       	ldi	r19, 0xFF	; 255
    5842:	4f e7       	ldi	r20, 0x7F	; 127
    5844:	57 e4       	ldi	r21, 0x47	; 71
    5846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    584a:	18 16       	cp	r1, r24
    584c:	0c f0       	brlt	.+2      	; 0x5850 <SevenSegment_FromAToH+0xda>
    584e:	43 c0       	rjmp	.+134    	; 0x58d6 <SevenSegment_FromAToH+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5850:	fe 01       	movw	r30, r28
    5852:	e3 59       	subi	r30, 0x93	; 147
    5854:	ff 4f       	sbci	r31, 0xFF	; 255
    5856:	60 81       	ld	r22, Z
    5858:	71 81       	ldd	r23, Z+1	; 0x01
    585a:	82 81       	ldd	r24, Z+2	; 0x02
    585c:	93 81       	ldd	r25, Z+3	; 0x03
    585e:	20 e0       	ldi	r18, 0x00	; 0
    5860:	30 e0       	ldi	r19, 0x00	; 0
    5862:	40 e2       	ldi	r20, 0x20	; 32
    5864:	51 e4       	ldi	r21, 0x41	; 65
    5866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    586a:	dc 01       	movw	r26, r24
    586c:	cb 01       	movw	r24, r22
    586e:	8e 01       	movw	r16, r28
    5870:	09 59       	subi	r16, 0x99	; 153
    5872:	1f 4f       	sbci	r17, 0xFF	; 255
    5874:	bc 01       	movw	r22, r24
    5876:	cd 01       	movw	r24, r26
    5878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	f8 01       	movw	r30, r16
    5882:	91 83       	std	Z+1, r25	; 0x01
    5884:	80 83       	st	Z, r24
    5886:	1f c0       	rjmp	.+62     	; 0x58c6 <SevenSegment_FromAToH+0x150>
    5888:	fe 01       	movw	r30, r28
    588a:	eb 59       	subi	r30, 0x9B	; 155
    588c:	ff 4f       	sbci	r31, 0xFF	; 255
    588e:	80 e9       	ldi	r24, 0x90	; 144
    5890:	91 e0       	ldi	r25, 0x01	; 1
    5892:	91 83       	std	Z+1, r25	; 0x01
    5894:	80 83       	st	Z, r24
    5896:	fe 01       	movw	r30, r28
    5898:	eb 59       	subi	r30, 0x9B	; 155
    589a:	ff 4f       	sbci	r31, 0xFF	; 255
    589c:	80 81       	ld	r24, Z
    589e:	91 81       	ldd	r25, Z+1	; 0x01
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	f1 f7       	brne	.-4      	; 0x58a0 <SevenSegment_FromAToH+0x12a>
    58a4:	fe 01       	movw	r30, r28
    58a6:	eb 59       	subi	r30, 0x9B	; 155
    58a8:	ff 4f       	sbci	r31, 0xFF	; 255
    58aa:	91 83       	std	Z+1, r25	; 0x01
    58ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58ae:	de 01       	movw	r26, r28
    58b0:	a9 59       	subi	r26, 0x99	; 153
    58b2:	bf 4f       	sbci	r27, 0xFF	; 255
    58b4:	fe 01       	movw	r30, r28
    58b6:	e9 59       	subi	r30, 0x99	; 153
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	80 81       	ld	r24, Z
    58bc:	91 81       	ldd	r25, Z+1	; 0x01
    58be:	01 97       	sbiw	r24, 0x01	; 1
    58c0:	11 96       	adiw	r26, 0x01	; 1
    58c2:	9c 93       	st	X, r25
    58c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58c6:	fe 01       	movw	r30, r28
    58c8:	e9 59       	subi	r30, 0x99	; 153
    58ca:	ff 4f       	sbci	r31, 0xFF	; 255
    58cc:	80 81       	ld	r24, Z
    58ce:	91 81       	ldd	r25, Z+1	; 0x01
    58d0:	00 97       	sbiw	r24, 0x00	; 0
    58d2:	d1 f6       	brne	.-76     	; 0x5888 <SevenSegment_FromAToH+0x112>
    58d4:	27 c0       	rjmp	.+78     	; 0x5924 <SevenSegment_FromAToH+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58d6:	8e 01       	movw	r16, r28
    58d8:	09 59       	subi	r16, 0x99	; 153
    58da:	1f 4f       	sbci	r17, 0xFF	; 255
    58dc:	fe 01       	movw	r30, r28
    58de:	e7 59       	subi	r30, 0x97	; 151
    58e0:	ff 4f       	sbci	r31, 0xFF	; 255
    58e2:	60 81       	ld	r22, Z
    58e4:	71 81       	ldd	r23, Z+1	; 0x01
    58e6:	82 81       	ldd	r24, Z+2	; 0x02
    58e8:	93 81       	ldd	r25, Z+3	; 0x03
    58ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ee:	dc 01       	movw	r26, r24
    58f0:	cb 01       	movw	r24, r22
    58f2:	f8 01       	movw	r30, r16
    58f4:	91 83       	std	Z+1, r25	; 0x01
    58f6:	80 83       	st	Z, r24
    58f8:	de 01       	movw	r26, r28
    58fa:	ad 59       	subi	r26, 0x9D	; 157
    58fc:	bf 4f       	sbci	r27, 0xFF	; 255
    58fe:	fe 01       	movw	r30, r28
    5900:	e9 59       	subi	r30, 0x99	; 153
    5902:	ff 4f       	sbci	r31, 0xFF	; 255
    5904:	80 81       	ld	r24, Z
    5906:	91 81       	ldd	r25, Z+1	; 0x01
    5908:	8d 93       	st	X+, r24
    590a:	9c 93       	st	X, r25
    590c:	fe 01       	movw	r30, r28
    590e:	ed 59       	subi	r30, 0x9D	; 157
    5910:	ff 4f       	sbci	r31, 0xFF	; 255
    5912:	80 81       	ld	r24, Z
    5914:	91 81       	ldd	r25, Z+1	; 0x01
    5916:	01 97       	sbiw	r24, 0x01	; 1
    5918:	f1 f7       	brne	.-4      	; 0x5916 <SevenSegment_FromAToH+0x1a0>
    591a:	fe 01       	movw	r30, r28
    591c:	ed 59       	subi	r30, 0x9D	; 157
    591e:	ff 4f       	sbci	r31, 0xFF	; 255
    5920:	91 83       	std	Z+1, r25	; 0x01
    5922:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 0, 1, 1, 1, 1, 1); // B
    5924:	fe 01       	movw	r30, r28
    5926:	ef 58       	subi	r30, 0x8F	; 143
    5928:	ff 4f       	sbci	r31, 0xFF	; 255
    592a:	80 81       	ld	r24, Z
    592c:	60 e0       	ldi	r22, 0x00	; 0
    592e:	40 e0       	ldi	r20, 0x00	; 0
    5930:	21 e0       	ldi	r18, 0x01	; 1
    5932:	01 e0       	ldi	r16, 0x01	; 1
    5934:	ee 24       	eor	r14, r14
    5936:	e3 94       	inc	r14
    5938:	cc 24       	eor	r12, r12
    593a:	c3 94       	inc	r12
    593c:	aa 24       	eor	r10, r10
    593e:	a3 94       	inc	r10
    5940:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5944:	fe 01       	movw	r30, r28
    5946:	e1 5a       	subi	r30, 0xA1	; 161
    5948:	ff 4f       	sbci	r31, 0xFF	; 255
    594a:	80 e0       	ldi	r24, 0x00	; 0
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	a8 e4       	ldi	r26, 0x48	; 72
    5950:	b2 e4       	ldi	r27, 0x42	; 66
    5952:	80 83       	st	Z, r24
    5954:	91 83       	std	Z+1, r25	; 0x01
    5956:	a2 83       	std	Z+2, r26	; 0x02
    5958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    595a:	8e 01       	movw	r16, r28
    595c:	05 5a       	subi	r16, 0xA5	; 165
    595e:	1f 4f       	sbci	r17, 0xFF	; 255
    5960:	fe 01       	movw	r30, r28
    5962:	e1 5a       	subi	r30, 0xA1	; 161
    5964:	ff 4f       	sbci	r31, 0xFF	; 255
    5966:	60 81       	ld	r22, Z
    5968:	71 81       	ldd	r23, Z+1	; 0x01
    596a:	82 81       	ldd	r24, Z+2	; 0x02
    596c:	93 81       	ldd	r25, Z+3	; 0x03
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	4a e7       	ldi	r20, 0x7A	; 122
    5974:	55 e4       	ldi	r21, 0x45	; 69
    5976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    597a:	dc 01       	movw	r26, r24
    597c:	cb 01       	movw	r24, r22
    597e:	f8 01       	movw	r30, r16
    5980:	80 83       	st	Z, r24
    5982:	91 83       	std	Z+1, r25	; 0x01
    5984:	a2 83       	std	Z+2, r26	; 0x02
    5986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5988:	fe 01       	movw	r30, r28
    598a:	e5 5a       	subi	r30, 0xA5	; 165
    598c:	ff 4f       	sbci	r31, 0xFF	; 255
    598e:	60 81       	ld	r22, Z
    5990:	71 81       	ldd	r23, Z+1	; 0x01
    5992:	82 81       	ldd	r24, Z+2	; 0x02
    5994:	93 81       	ldd	r25, Z+3	; 0x03
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	40 e8       	ldi	r20, 0x80	; 128
    599c:	5f e3       	ldi	r21, 0x3F	; 63
    599e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    59a2:	88 23       	and	r24, r24
    59a4:	44 f4       	brge	.+16     	; 0x59b6 <SevenSegment_FromAToH+0x240>
		__ticks = 1;
    59a6:	fe 01       	movw	r30, r28
    59a8:	e7 5a       	subi	r30, 0xA7	; 167
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	81 e0       	ldi	r24, 0x01	; 1
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	91 83       	std	Z+1, r25	; 0x01
    59b2:	80 83       	st	Z, r24
    59b4:	64 c0       	rjmp	.+200    	; 0x5a7e <SevenSegment_FromAToH+0x308>
	else if (__tmp > 65535)
    59b6:	fe 01       	movw	r30, r28
    59b8:	e5 5a       	subi	r30, 0xA5	; 165
    59ba:	ff 4f       	sbci	r31, 0xFF	; 255
    59bc:	60 81       	ld	r22, Z
    59be:	71 81       	ldd	r23, Z+1	; 0x01
    59c0:	82 81       	ldd	r24, Z+2	; 0x02
    59c2:	93 81       	ldd	r25, Z+3	; 0x03
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	3f ef       	ldi	r19, 0xFF	; 255
    59c8:	4f e7       	ldi	r20, 0x7F	; 127
    59ca:	57 e4       	ldi	r21, 0x47	; 71
    59cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59d0:	18 16       	cp	r1, r24
    59d2:	0c f0       	brlt	.+2      	; 0x59d6 <SevenSegment_FromAToH+0x260>
    59d4:	43 c0       	rjmp	.+134    	; 0x5a5c <SevenSegment_FromAToH+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59d6:	fe 01       	movw	r30, r28
    59d8:	e1 5a       	subi	r30, 0xA1	; 161
    59da:	ff 4f       	sbci	r31, 0xFF	; 255
    59dc:	60 81       	ld	r22, Z
    59de:	71 81       	ldd	r23, Z+1	; 0x01
    59e0:	82 81       	ldd	r24, Z+2	; 0x02
    59e2:	93 81       	ldd	r25, Z+3	; 0x03
    59e4:	20 e0       	ldi	r18, 0x00	; 0
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	40 e2       	ldi	r20, 0x20	; 32
    59ea:	51 e4       	ldi	r21, 0x41	; 65
    59ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59f0:	dc 01       	movw	r26, r24
    59f2:	cb 01       	movw	r24, r22
    59f4:	8e 01       	movw	r16, r28
    59f6:	07 5a       	subi	r16, 0xA7	; 167
    59f8:	1f 4f       	sbci	r17, 0xFF	; 255
    59fa:	bc 01       	movw	r22, r24
    59fc:	cd 01       	movw	r24, r26
    59fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a02:	dc 01       	movw	r26, r24
    5a04:	cb 01       	movw	r24, r22
    5a06:	f8 01       	movw	r30, r16
    5a08:	91 83       	std	Z+1, r25	; 0x01
    5a0a:	80 83       	st	Z, r24
    5a0c:	1f c0       	rjmp	.+62     	; 0x5a4c <SevenSegment_FromAToH+0x2d6>
    5a0e:	fe 01       	movw	r30, r28
    5a10:	e9 5a       	subi	r30, 0xA9	; 169
    5a12:	ff 4f       	sbci	r31, 0xFF	; 255
    5a14:	80 e9       	ldi	r24, 0x90	; 144
    5a16:	91 e0       	ldi	r25, 0x01	; 1
    5a18:	91 83       	std	Z+1, r25	; 0x01
    5a1a:	80 83       	st	Z, r24
    5a1c:	fe 01       	movw	r30, r28
    5a1e:	e9 5a       	subi	r30, 0xA9	; 169
    5a20:	ff 4f       	sbci	r31, 0xFF	; 255
    5a22:	80 81       	ld	r24, Z
    5a24:	91 81       	ldd	r25, Z+1	; 0x01
    5a26:	01 97       	sbiw	r24, 0x01	; 1
    5a28:	f1 f7       	brne	.-4      	; 0x5a26 <SevenSegment_FromAToH+0x2b0>
    5a2a:	fe 01       	movw	r30, r28
    5a2c:	e9 5a       	subi	r30, 0xA9	; 169
    5a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a30:	91 83       	std	Z+1, r25	; 0x01
    5a32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a34:	de 01       	movw	r26, r28
    5a36:	a7 5a       	subi	r26, 0xA7	; 167
    5a38:	bf 4f       	sbci	r27, 0xFF	; 255
    5a3a:	fe 01       	movw	r30, r28
    5a3c:	e7 5a       	subi	r30, 0xA7	; 167
    5a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a40:	80 81       	ld	r24, Z
    5a42:	91 81       	ldd	r25, Z+1	; 0x01
    5a44:	01 97       	sbiw	r24, 0x01	; 1
    5a46:	11 96       	adiw	r26, 0x01	; 1
    5a48:	9c 93       	st	X, r25
    5a4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a4c:	fe 01       	movw	r30, r28
    5a4e:	e7 5a       	subi	r30, 0xA7	; 167
    5a50:	ff 4f       	sbci	r31, 0xFF	; 255
    5a52:	80 81       	ld	r24, Z
    5a54:	91 81       	ldd	r25, Z+1	; 0x01
    5a56:	00 97       	sbiw	r24, 0x00	; 0
    5a58:	d1 f6       	brne	.-76     	; 0x5a0e <SevenSegment_FromAToH+0x298>
    5a5a:	27 c0       	rjmp	.+78     	; 0x5aaa <SevenSegment_FromAToH+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a5c:	8e 01       	movw	r16, r28
    5a5e:	07 5a       	subi	r16, 0xA7	; 167
    5a60:	1f 4f       	sbci	r17, 0xFF	; 255
    5a62:	fe 01       	movw	r30, r28
    5a64:	e5 5a       	subi	r30, 0xA5	; 165
    5a66:	ff 4f       	sbci	r31, 0xFF	; 255
    5a68:	60 81       	ld	r22, Z
    5a6a:	71 81       	ldd	r23, Z+1	; 0x01
    5a6c:	82 81       	ldd	r24, Z+2	; 0x02
    5a6e:	93 81       	ldd	r25, Z+3	; 0x03
    5a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	f8 01       	movw	r30, r16
    5a7a:	91 83       	std	Z+1, r25	; 0x01
    5a7c:	80 83       	st	Z, r24
    5a7e:	de 01       	movw	r26, r28
    5a80:	ab 5a       	subi	r26, 0xAB	; 171
    5a82:	bf 4f       	sbci	r27, 0xFF	; 255
    5a84:	fe 01       	movw	r30, r28
    5a86:	e7 5a       	subi	r30, 0xA7	; 167
    5a88:	ff 4f       	sbci	r31, 0xFF	; 255
    5a8a:	80 81       	ld	r24, Z
    5a8c:	91 81       	ldd	r25, Z+1	; 0x01
    5a8e:	8d 93       	st	X+, r24
    5a90:	9c 93       	st	X, r25
    5a92:	fe 01       	movw	r30, r28
    5a94:	eb 5a       	subi	r30, 0xAB	; 171
    5a96:	ff 4f       	sbci	r31, 0xFF	; 255
    5a98:	80 81       	ld	r24, Z
    5a9a:	91 81       	ldd	r25, Z+1	; 0x01
    5a9c:	01 97       	sbiw	r24, 0x01	; 1
    5a9e:	f1 f7       	brne	.-4      	; 0x5a9c <SevenSegment_FromAToH+0x326>
    5aa0:	fe 01       	movw	r30, r28
    5aa2:	eb 5a       	subi	r30, 0xAB	; 171
    5aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa6:	91 83       	std	Z+1, r25	; 0x01
    5aa8:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 0); // C
    5aaa:	fe 01       	movw	r30, r28
    5aac:	ef 58       	subi	r30, 0x8F	; 143
    5aae:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab0:	80 81       	ld	r24, Z
    5ab2:	61 e0       	ldi	r22, 0x01	; 1
    5ab4:	40 e0       	ldi	r20, 0x00	; 0
    5ab6:	20 e0       	ldi	r18, 0x00	; 0
    5ab8:	01 e0       	ldi	r16, 0x01	; 1
    5aba:	ee 24       	eor	r14, r14
    5abc:	e3 94       	inc	r14
    5abe:	cc 24       	eor	r12, r12
    5ac0:	c3 94       	inc	r12
    5ac2:	aa 24       	eor	r10, r10
    5ac4:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5ac8:	fe 01       	movw	r30, r28
    5aca:	ef 5a       	subi	r30, 0xAF	; 175
    5acc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ace:	80 e0       	ldi	r24, 0x00	; 0
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	a8 e4       	ldi	r26, 0x48	; 72
    5ad4:	b2 e4       	ldi	r27, 0x42	; 66
    5ad6:	80 83       	st	Z, r24
    5ad8:	91 83       	std	Z+1, r25	; 0x01
    5ada:	a2 83       	std	Z+2, r26	; 0x02
    5adc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ade:	8e 01       	movw	r16, r28
    5ae0:	03 5b       	subi	r16, 0xB3	; 179
    5ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae4:	fe 01       	movw	r30, r28
    5ae6:	ef 5a       	subi	r30, 0xAF	; 175
    5ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    5aea:	60 81       	ld	r22, Z
    5aec:	71 81       	ldd	r23, Z+1	; 0x01
    5aee:	82 81       	ldd	r24, Z+2	; 0x02
    5af0:	93 81       	ldd	r25, Z+3	; 0x03
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	4a e7       	ldi	r20, 0x7A	; 122
    5af8:	55 e4       	ldi	r21, 0x45	; 69
    5afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5afe:	dc 01       	movw	r26, r24
    5b00:	cb 01       	movw	r24, r22
    5b02:	f8 01       	movw	r30, r16
    5b04:	80 83       	st	Z, r24
    5b06:	91 83       	std	Z+1, r25	; 0x01
    5b08:	a2 83       	std	Z+2, r26	; 0x02
    5b0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b0c:	fe 01       	movw	r30, r28
    5b0e:	e3 5b       	subi	r30, 0xB3	; 179
    5b10:	ff 4f       	sbci	r31, 0xFF	; 255
    5b12:	60 81       	ld	r22, Z
    5b14:	71 81       	ldd	r23, Z+1	; 0x01
    5b16:	82 81       	ldd	r24, Z+2	; 0x02
    5b18:	93 81       	ldd	r25, Z+3	; 0x03
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	40 e8       	ldi	r20, 0x80	; 128
    5b20:	5f e3       	ldi	r21, 0x3F	; 63
    5b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b26:	88 23       	and	r24, r24
    5b28:	44 f4       	brge	.+16     	; 0x5b3a <SevenSegment_FromAToH+0x3c4>
		__ticks = 1;
    5b2a:	fe 01       	movw	r30, r28
    5b2c:	e5 5b       	subi	r30, 0xB5	; 181
    5b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	91 83       	std	Z+1, r25	; 0x01
    5b36:	80 83       	st	Z, r24
    5b38:	64 c0       	rjmp	.+200    	; 0x5c02 <SevenSegment_FromAToH+0x48c>
	else if (__tmp > 65535)
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	e3 5b       	subi	r30, 0xB3	; 179
    5b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b40:	60 81       	ld	r22, Z
    5b42:	71 81       	ldd	r23, Z+1	; 0x01
    5b44:	82 81       	ldd	r24, Z+2	; 0x02
    5b46:	93 81       	ldd	r25, Z+3	; 0x03
    5b48:	20 e0       	ldi	r18, 0x00	; 0
    5b4a:	3f ef       	ldi	r19, 0xFF	; 255
    5b4c:	4f e7       	ldi	r20, 0x7F	; 127
    5b4e:	57 e4       	ldi	r21, 0x47	; 71
    5b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b54:	18 16       	cp	r1, r24
    5b56:	0c f0       	brlt	.+2      	; 0x5b5a <SevenSegment_FromAToH+0x3e4>
    5b58:	43 c0       	rjmp	.+134    	; 0x5be0 <SevenSegment_FromAToH+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5a:	fe 01       	movw	r30, r28
    5b5c:	ef 5a       	subi	r30, 0xAF	; 175
    5b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b60:	60 81       	ld	r22, Z
    5b62:	71 81       	ldd	r23, Z+1	; 0x01
    5b64:	82 81       	ldd	r24, Z+2	; 0x02
    5b66:	93 81       	ldd	r25, Z+3	; 0x03
    5b68:	20 e0       	ldi	r18, 0x00	; 0
    5b6a:	30 e0       	ldi	r19, 0x00	; 0
    5b6c:	40 e2       	ldi	r20, 0x20	; 32
    5b6e:	51 e4       	ldi	r21, 0x41	; 65
    5b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	8e 01       	movw	r16, r28
    5b7a:	05 5b       	subi	r16, 0xB5	; 181
    5b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b7e:	bc 01       	movw	r22, r24
    5b80:	cd 01       	movw	r24, r26
    5b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b86:	dc 01       	movw	r26, r24
    5b88:	cb 01       	movw	r24, r22
    5b8a:	f8 01       	movw	r30, r16
    5b8c:	91 83       	std	Z+1, r25	; 0x01
    5b8e:	80 83       	st	Z, r24
    5b90:	1f c0       	rjmp	.+62     	; 0x5bd0 <SevenSegment_FromAToH+0x45a>
    5b92:	fe 01       	movw	r30, r28
    5b94:	e7 5b       	subi	r30, 0xB7	; 183
    5b96:	ff 4f       	sbci	r31, 0xFF	; 255
    5b98:	80 e9       	ldi	r24, 0x90	; 144
    5b9a:	91 e0       	ldi	r25, 0x01	; 1
    5b9c:	91 83       	std	Z+1, r25	; 0x01
    5b9e:	80 83       	st	Z, r24
    5ba0:	fe 01       	movw	r30, r28
    5ba2:	e7 5b       	subi	r30, 0xB7	; 183
    5ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba6:	80 81       	ld	r24, Z
    5ba8:	91 81       	ldd	r25, Z+1	; 0x01
    5baa:	01 97       	sbiw	r24, 0x01	; 1
    5bac:	f1 f7       	brne	.-4      	; 0x5baa <SevenSegment_FromAToH+0x434>
    5bae:	fe 01       	movw	r30, r28
    5bb0:	e7 5b       	subi	r30, 0xB7	; 183
    5bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb4:	91 83       	std	Z+1, r25	; 0x01
    5bb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bb8:	de 01       	movw	r26, r28
    5bba:	a5 5b       	subi	r26, 0xB5	; 181
    5bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	e5 5b       	subi	r30, 0xB5	; 181
    5bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc4:	80 81       	ld	r24, Z
    5bc6:	91 81       	ldd	r25, Z+1	; 0x01
    5bc8:	01 97       	sbiw	r24, 0x01	; 1
    5bca:	11 96       	adiw	r26, 0x01	; 1
    5bcc:	9c 93       	st	X, r25
    5bce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bd0:	fe 01       	movw	r30, r28
    5bd2:	e5 5b       	subi	r30, 0xB5	; 181
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	80 81       	ld	r24, Z
    5bd8:	91 81       	ldd	r25, Z+1	; 0x01
    5bda:	00 97       	sbiw	r24, 0x00	; 0
    5bdc:	d1 f6       	brne	.-76     	; 0x5b92 <SevenSegment_FromAToH+0x41c>
    5bde:	27 c0       	rjmp	.+78     	; 0x5c2e <SevenSegment_FromAToH+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5be0:	8e 01       	movw	r16, r28
    5be2:	05 5b       	subi	r16, 0xB5	; 181
    5be4:	1f 4f       	sbci	r17, 0xFF	; 255
    5be6:	fe 01       	movw	r30, r28
    5be8:	e3 5b       	subi	r30, 0xB3	; 179
    5bea:	ff 4f       	sbci	r31, 0xFF	; 255
    5bec:	60 81       	ld	r22, Z
    5bee:	71 81       	ldd	r23, Z+1	; 0x01
    5bf0:	82 81       	ldd	r24, Z+2	; 0x02
    5bf2:	93 81       	ldd	r25, Z+3	; 0x03
    5bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bf8:	dc 01       	movw	r26, r24
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	f8 01       	movw	r30, r16
    5bfe:	91 83       	std	Z+1, r25	; 0x01
    5c00:	80 83       	st	Z, r24
    5c02:	de 01       	movw	r26, r28
    5c04:	a9 5b       	subi	r26, 0xB9	; 185
    5c06:	bf 4f       	sbci	r27, 0xFF	; 255
    5c08:	fe 01       	movw	r30, r28
    5c0a:	e5 5b       	subi	r30, 0xB5	; 181
    5c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0e:	80 81       	ld	r24, Z
    5c10:	91 81       	ldd	r25, Z+1	; 0x01
    5c12:	8d 93       	st	X+, r24
    5c14:	9c 93       	st	X, r25
    5c16:	fe 01       	movw	r30, r28
    5c18:	e9 5b       	subi	r30, 0xB9	; 185
    5c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1c:	80 81       	ld	r24, Z
    5c1e:	91 81       	ldd	r25, Z+1	; 0x01
    5c20:	01 97       	sbiw	r24, 0x01	; 1
    5c22:	f1 f7       	brne	.-4      	; 0x5c20 <SevenSegment_FromAToH+0x4aa>
    5c24:	fe 01       	movw	r30, r28
    5c26:	e9 5b       	subi	r30, 0xB9	; 185
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2a:	91 83       	std	Z+1, r25	; 0x01
    5c2c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 1, 1, 0, 1); // D
    5c2e:	fe 01       	movw	r30, r28
    5c30:	ef 58       	subi	r30, 0x8F	; 143
    5c32:	ff 4f       	sbci	r31, 0xFF	; 255
    5c34:	80 81       	ld	r24, Z
    5c36:	60 e0       	ldi	r22, 0x00	; 0
    5c38:	41 e0       	ldi	r20, 0x01	; 1
    5c3a:	21 e0       	ldi	r18, 0x01	; 1
    5c3c:	01 e0       	ldi	r16, 0x01	; 1
    5c3e:	ee 24       	eor	r14, r14
    5c40:	e3 94       	inc	r14
    5c42:	cc 24       	eor	r12, r12
    5c44:	aa 24       	eor	r10, r10
    5c46:	a3 94       	inc	r10
    5c48:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5c4c:	fe 01       	movw	r30, r28
    5c4e:	ed 5b       	subi	r30, 0xBD	; 189
    5c50:	ff 4f       	sbci	r31, 0xFF	; 255
    5c52:	80 e0       	ldi	r24, 0x00	; 0
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	a8 e4       	ldi	r26, 0x48	; 72
    5c58:	b2 e4       	ldi	r27, 0x42	; 66
    5c5a:	80 83       	st	Z, r24
    5c5c:	91 83       	std	Z+1, r25	; 0x01
    5c5e:	a2 83       	std	Z+2, r26	; 0x02
    5c60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c62:	8e 01       	movw	r16, r28
    5c64:	01 5c       	subi	r16, 0xC1	; 193
    5c66:	1f 4f       	sbci	r17, 0xFF	; 255
    5c68:	fe 01       	movw	r30, r28
    5c6a:	ed 5b       	subi	r30, 0xBD	; 189
    5c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6e:	60 81       	ld	r22, Z
    5c70:	71 81       	ldd	r23, Z+1	; 0x01
    5c72:	82 81       	ldd	r24, Z+2	; 0x02
    5c74:	93 81       	ldd	r25, Z+3	; 0x03
    5c76:	20 e0       	ldi	r18, 0x00	; 0
    5c78:	30 e0       	ldi	r19, 0x00	; 0
    5c7a:	4a e7       	ldi	r20, 0x7A	; 122
    5c7c:	55 e4       	ldi	r21, 0x45	; 69
    5c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c82:	dc 01       	movw	r26, r24
    5c84:	cb 01       	movw	r24, r22
    5c86:	f8 01       	movw	r30, r16
    5c88:	80 83       	st	Z, r24
    5c8a:	91 83       	std	Z+1, r25	; 0x01
    5c8c:	a2 83       	std	Z+2, r26	; 0x02
    5c8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c90:	fe 01       	movw	r30, r28
    5c92:	ff 96       	adiw	r30, 0x3f	; 63
    5c94:	60 81       	ld	r22, Z
    5c96:	71 81       	ldd	r23, Z+1	; 0x01
    5c98:	82 81       	ldd	r24, Z+2	; 0x02
    5c9a:	93 81       	ldd	r25, Z+3	; 0x03
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	40 e8       	ldi	r20, 0x80	; 128
    5ca2:	5f e3       	ldi	r21, 0x3F	; 63
    5ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ca8:	88 23       	and	r24, r24
    5caa:	2c f4       	brge	.+10     	; 0x5cb6 <SevenSegment_FromAToH+0x540>
		__ticks = 1;
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	9e af       	std	Y+62, r25	; 0x3e
    5cb2:	8d af       	std	Y+61, r24	; 0x3d
    5cb4:	46 c0       	rjmp	.+140    	; 0x5d42 <SevenSegment_FromAToH+0x5cc>
	else if (__tmp > 65535)
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	ff 96       	adiw	r30, 0x3f	; 63
    5cba:	60 81       	ld	r22, Z
    5cbc:	71 81       	ldd	r23, Z+1	; 0x01
    5cbe:	82 81       	ldd	r24, Z+2	; 0x02
    5cc0:	93 81       	ldd	r25, Z+3	; 0x03
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	3f ef       	ldi	r19, 0xFF	; 255
    5cc6:	4f e7       	ldi	r20, 0x7F	; 127
    5cc8:	57 e4       	ldi	r21, 0x47	; 71
    5cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5cce:	18 16       	cp	r1, r24
    5cd0:	64 f5       	brge	.+88     	; 0x5d2a <SevenSegment_FromAToH+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cd2:	fe 01       	movw	r30, r28
    5cd4:	ed 5b       	subi	r30, 0xBD	; 189
    5cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd8:	60 81       	ld	r22, Z
    5cda:	71 81       	ldd	r23, Z+1	; 0x01
    5cdc:	82 81       	ldd	r24, Z+2	; 0x02
    5cde:	93 81       	ldd	r25, Z+3	; 0x03
    5ce0:	20 e0       	ldi	r18, 0x00	; 0
    5ce2:	30 e0       	ldi	r19, 0x00	; 0
    5ce4:	40 e2       	ldi	r20, 0x20	; 32
    5ce6:	51 e4       	ldi	r21, 0x41	; 65
    5ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cec:	dc 01       	movw	r26, r24
    5cee:	cb 01       	movw	r24, r22
    5cf0:	bc 01       	movw	r22, r24
    5cf2:	cd 01       	movw	r24, r26
    5cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	cb 01       	movw	r24, r22
    5cfc:	9e af       	std	Y+62, r25	; 0x3e
    5cfe:	8d af       	std	Y+61, r24	; 0x3d
    5d00:	0f c0       	rjmp	.+30     	; 0x5d20 <SevenSegment_FromAToH+0x5aa>
    5d02:	80 e9       	ldi	r24, 0x90	; 144
    5d04:	91 e0       	ldi	r25, 0x01	; 1
    5d06:	9c af       	std	Y+60, r25	; 0x3c
    5d08:	8b af       	std	Y+59, r24	; 0x3b
    5d0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    5d0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    5d0e:	01 97       	sbiw	r24, 0x01	; 1
    5d10:	f1 f7       	brne	.-4      	; 0x5d0e <SevenSegment_FromAToH+0x598>
    5d12:	9c af       	std	Y+60, r25	; 0x3c
    5d14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d16:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d18:	9e ad       	ldd	r25, Y+62	; 0x3e
    5d1a:	01 97       	sbiw	r24, 0x01	; 1
    5d1c:	9e af       	std	Y+62, r25	; 0x3e
    5d1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d20:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d22:	9e ad       	ldd	r25, Y+62	; 0x3e
    5d24:	00 97       	sbiw	r24, 0x00	; 0
    5d26:	69 f7       	brne	.-38     	; 0x5d02 <SevenSegment_FromAToH+0x58c>
    5d28:	16 c0       	rjmp	.+44     	; 0x5d56 <SevenSegment_FromAToH+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d2a:	fe 01       	movw	r30, r28
    5d2c:	ff 96       	adiw	r30, 0x3f	; 63
    5d2e:	60 81       	ld	r22, Z
    5d30:	71 81       	ldd	r23, Z+1	; 0x01
    5d32:	82 81       	ldd	r24, Z+2	; 0x02
    5d34:	93 81       	ldd	r25, Z+3	; 0x03
    5d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d3a:	dc 01       	movw	r26, r24
    5d3c:	cb 01       	movw	r24, r22
    5d3e:	9e af       	std	Y+62, r25	; 0x3e
    5d40:	8d af       	std	Y+61, r24	; 0x3d
    5d42:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d44:	9e ad       	ldd	r25, Y+62	; 0x3e
    5d46:	9a af       	std	Y+58, r25	; 0x3a
    5d48:	89 af       	std	Y+57, r24	; 0x39
    5d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    5d4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    5d4e:	01 97       	sbiw	r24, 0x01	; 1
    5d50:	f1 f7       	brne	.-4      	; 0x5d4e <SevenSegment_FromAToH+0x5d8>
    5d52:	9a af       	std	Y+58, r25	; 0x3a
    5d54:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 1); // E
    5d56:	fe 01       	movw	r30, r28
    5d58:	ef 58       	subi	r30, 0x8F	; 143
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	80 81       	ld	r24, Z
    5d5e:	61 e0       	ldi	r22, 0x01	; 1
    5d60:	40 e0       	ldi	r20, 0x00	; 0
    5d62:	20 e0       	ldi	r18, 0x00	; 0
    5d64:	01 e0       	ldi	r16, 0x01	; 1
    5d66:	ee 24       	eor	r14, r14
    5d68:	e3 94       	inc	r14
    5d6a:	cc 24       	eor	r12, r12
    5d6c:	c3 94       	inc	r12
    5d6e:	aa 24       	eor	r10, r10
    5d70:	a3 94       	inc	r10
    5d72:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5d76:	80 e0       	ldi	r24, 0x00	; 0
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	a8 e4       	ldi	r26, 0x48	; 72
    5d7c:	b2 e4       	ldi	r27, 0x42	; 66
    5d7e:	8d ab       	std	Y+53, r24	; 0x35
    5d80:	9e ab       	std	Y+54, r25	; 0x36
    5d82:	af ab       	std	Y+55, r26	; 0x37
    5d84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d86:	6d a9       	ldd	r22, Y+53	; 0x35
    5d88:	7e a9       	ldd	r23, Y+54	; 0x36
    5d8a:	8f a9       	ldd	r24, Y+55	; 0x37
    5d8c:	98 ad       	ldd	r25, Y+56	; 0x38
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	4a e7       	ldi	r20, 0x7A	; 122
    5d94:	55 e4       	ldi	r21, 0x45	; 69
    5d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	cb 01       	movw	r24, r22
    5d9e:	89 ab       	std	Y+49, r24	; 0x31
    5da0:	9a ab       	std	Y+50, r25	; 0x32
    5da2:	ab ab       	std	Y+51, r26	; 0x33
    5da4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5da6:	69 a9       	ldd	r22, Y+49	; 0x31
    5da8:	7a a9       	ldd	r23, Y+50	; 0x32
    5daa:	8b a9       	ldd	r24, Y+51	; 0x33
    5dac:	9c a9       	ldd	r25, Y+52	; 0x34
    5dae:	20 e0       	ldi	r18, 0x00	; 0
    5db0:	30 e0       	ldi	r19, 0x00	; 0
    5db2:	40 e8       	ldi	r20, 0x80	; 128
    5db4:	5f e3       	ldi	r21, 0x3F	; 63
    5db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5dba:	88 23       	and	r24, r24
    5dbc:	2c f4       	brge	.+10     	; 0x5dc8 <SevenSegment_FromAToH+0x652>
		__ticks = 1;
    5dbe:	81 e0       	ldi	r24, 0x01	; 1
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	98 ab       	std	Y+48, r25	; 0x30
    5dc4:	8f a7       	std	Y+47, r24	; 0x2f
    5dc6:	3f c0       	rjmp	.+126    	; 0x5e46 <SevenSegment_FromAToH+0x6d0>
	else if (__tmp > 65535)
    5dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    5dca:	7a a9       	ldd	r23, Y+50	; 0x32
    5dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    5dce:	9c a9       	ldd	r25, Y+52	; 0x34
    5dd0:	20 e0       	ldi	r18, 0x00	; 0
    5dd2:	3f ef       	ldi	r19, 0xFF	; 255
    5dd4:	4f e7       	ldi	r20, 0x7F	; 127
    5dd6:	57 e4       	ldi	r21, 0x47	; 71
    5dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ddc:	18 16       	cp	r1, r24
    5dde:	4c f5       	brge	.+82     	; 0x5e32 <SevenSegment_FromAToH+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5de0:	6d a9       	ldd	r22, Y+53	; 0x35
    5de2:	7e a9       	ldd	r23, Y+54	; 0x36
    5de4:	8f a9       	ldd	r24, Y+55	; 0x37
    5de6:	98 ad       	ldd	r25, Y+56	; 0x38
    5de8:	20 e0       	ldi	r18, 0x00	; 0
    5dea:	30 e0       	ldi	r19, 0x00	; 0
    5dec:	40 e2       	ldi	r20, 0x20	; 32
    5dee:	51 e4       	ldi	r21, 0x41	; 65
    5df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5df4:	dc 01       	movw	r26, r24
    5df6:	cb 01       	movw	r24, r22
    5df8:	bc 01       	movw	r22, r24
    5dfa:	cd 01       	movw	r24, r26
    5dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e00:	dc 01       	movw	r26, r24
    5e02:	cb 01       	movw	r24, r22
    5e04:	98 ab       	std	Y+48, r25	; 0x30
    5e06:	8f a7       	std	Y+47, r24	; 0x2f
    5e08:	0f c0       	rjmp	.+30     	; 0x5e28 <SevenSegment_FromAToH+0x6b2>
    5e0a:	80 e9       	ldi	r24, 0x90	; 144
    5e0c:	91 e0       	ldi	r25, 0x01	; 1
    5e0e:	9e a7       	std	Y+46, r25	; 0x2e
    5e10:	8d a7       	std	Y+45, r24	; 0x2d
    5e12:	8d a5       	ldd	r24, Y+45	; 0x2d
    5e14:	9e a5       	ldd	r25, Y+46	; 0x2e
    5e16:	01 97       	sbiw	r24, 0x01	; 1
    5e18:	f1 f7       	brne	.-4      	; 0x5e16 <SevenSegment_FromAToH+0x6a0>
    5e1a:	9e a7       	std	Y+46, r25	; 0x2e
    5e1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e20:	98 a9       	ldd	r25, Y+48	; 0x30
    5e22:	01 97       	sbiw	r24, 0x01	; 1
    5e24:	98 ab       	std	Y+48, r25	; 0x30
    5e26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    5e2c:	00 97       	sbiw	r24, 0x00	; 0
    5e2e:	69 f7       	brne	.-38     	; 0x5e0a <SevenSegment_FromAToH+0x694>
    5e30:	14 c0       	rjmp	.+40     	; 0x5e5a <SevenSegment_FromAToH+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e32:	69 a9       	ldd	r22, Y+49	; 0x31
    5e34:	7a a9       	ldd	r23, Y+50	; 0x32
    5e36:	8b a9       	ldd	r24, Y+51	; 0x33
    5e38:	9c a9       	ldd	r25, Y+52	; 0x34
    5e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e3e:	dc 01       	movw	r26, r24
    5e40:	cb 01       	movw	r24, r22
    5e42:	98 ab       	std	Y+48, r25	; 0x30
    5e44:	8f a7       	std	Y+47, r24	; 0x2f
    5e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e48:	98 a9       	ldd	r25, Y+48	; 0x30
    5e4a:	9c a7       	std	Y+44, r25	; 0x2c
    5e4c:	8b a7       	std	Y+43, r24	; 0x2b
    5e4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5e50:	9c a5       	ldd	r25, Y+44	; 0x2c
    5e52:	01 97       	sbiw	r24, 0x01	; 1
    5e54:	f1 f7       	brne	.-4      	; 0x5e52 <SevenSegment_FromAToH+0x6dc>
    5e56:	9c a7       	std	Y+44, r25	; 0x2c
    5e58:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 0, 1, 1, 1); // F
    5e5a:	fe 01       	movw	r30, r28
    5e5c:	ef 58       	subi	r30, 0x8F	; 143
    5e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e60:	80 81       	ld	r24, Z
    5e62:	61 e0       	ldi	r22, 0x01	; 1
    5e64:	40 e0       	ldi	r20, 0x00	; 0
    5e66:	20 e0       	ldi	r18, 0x00	; 0
    5e68:	00 e0       	ldi	r16, 0x00	; 0
    5e6a:	ee 24       	eor	r14, r14
    5e6c:	e3 94       	inc	r14
    5e6e:	cc 24       	eor	r12, r12
    5e70:	c3 94       	inc	r12
    5e72:	aa 24       	eor	r10, r10
    5e74:	a3 94       	inc	r10
    5e76:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5e7a:	80 e0       	ldi	r24, 0x00	; 0
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	a8 e4       	ldi	r26, 0x48	; 72
    5e80:	b2 e4       	ldi	r27, 0x42	; 66
    5e82:	8f a3       	std	Y+39, r24	; 0x27
    5e84:	98 a7       	std	Y+40, r25	; 0x28
    5e86:	a9 a7       	std	Y+41, r26	; 0x29
    5e88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e8a:	6f a1       	ldd	r22, Y+39	; 0x27
    5e8c:	78 a5       	ldd	r23, Y+40	; 0x28
    5e8e:	89 a5       	ldd	r24, Y+41	; 0x29
    5e90:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	4a e7       	ldi	r20, 0x7A	; 122
    5e98:	55 e4       	ldi	r21, 0x45	; 69
    5e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	8b a3       	std	Y+35, r24	; 0x23
    5ea4:	9c a3       	std	Y+36, r25	; 0x24
    5ea6:	ad a3       	std	Y+37, r26	; 0x25
    5ea8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5eaa:	6b a1       	ldd	r22, Y+35	; 0x23
    5eac:	7c a1       	ldd	r23, Y+36	; 0x24
    5eae:	8d a1       	ldd	r24, Y+37	; 0x25
    5eb0:	9e a1       	ldd	r25, Y+38	; 0x26
    5eb2:	20 e0       	ldi	r18, 0x00	; 0
    5eb4:	30 e0       	ldi	r19, 0x00	; 0
    5eb6:	40 e8       	ldi	r20, 0x80	; 128
    5eb8:	5f e3       	ldi	r21, 0x3F	; 63
    5eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ebe:	88 23       	and	r24, r24
    5ec0:	2c f4       	brge	.+10     	; 0x5ecc <SevenSegment_FromAToH+0x756>
		__ticks = 1;
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	9a a3       	std	Y+34, r25	; 0x22
    5ec8:	89 a3       	std	Y+33, r24	; 0x21
    5eca:	3f c0       	rjmp	.+126    	; 0x5f4a <SevenSegment_FromAToH+0x7d4>
	else if (__tmp > 65535)
    5ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    5ece:	7c a1       	ldd	r23, Y+36	; 0x24
    5ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    5ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	3f ef       	ldi	r19, 0xFF	; 255
    5ed8:	4f e7       	ldi	r20, 0x7F	; 127
    5eda:	57 e4       	ldi	r21, 0x47	; 71
    5edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ee0:	18 16       	cp	r1, r24
    5ee2:	4c f5       	brge	.+82     	; 0x5f36 <SevenSegment_FromAToH+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    5ee6:	78 a5       	ldd	r23, Y+40	; 0x28
    5ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    5eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	40 e2       	ldi	r20, 0x20	; 32
    5ef2:	51 e4       	ldi	r21, 0x41	; 65
    5ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ef8:	dc 01       	movw	r26, r24
    5efa:	cb 01       	movw	r24, r22
    5efc:	bc 01       	movw	r22, r24
    5efe:	cd 01       	movw	r24, r26
    5f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f04:	dc 01       	movw	r26, r24
    5f06:	cb 01       	movw	r24, r22
    5f08:	9a a3       	std	Y+34, r25	; 0x22
    5f0a:	89 a3       	std	Y+33, r24	; 0x21
    5f0c:	0f c0       	rjmp	.+30     	; 0x5f2c <SevenSegment_FromAToH+0x7b6>
    5f0e:	80 e9       	ldi	r24, 0x90	; 144
    5f10:	91 e0       	ldi	r25, 0x01	; 1
    5f12:	98 a3       	std	Y+32, r25	; 0x20
    5f14:	8f 8f       	std	Y+31, r24	; 0x1f
    5f16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f18:	98 a1       	ldd	r25, Y+32	; 0x20
    5f1a:	01 97       	sbiw	r24, 0x01	; 1
    5f1c:	f1 f7       	brne	.-4      	; 0x5f1a <SevenSegment_FromAToH+0x7a4>
    5f1e:	98 a3       	std	Y+32, r25	; 0x20
    5f20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f22:	89 a1       	ldd	r24, Y+33	; 0x21
    5f24:	9a a1       	ldd	r25, Y+34	; 0x22
    5f26:	01 97       	sbiw	r24, 0x01	; 1
    5f28:	9a a3       	std	Y+34, r25	; 0x22
    5f2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    5f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    5f30:	00 97       	sbiw	r24, 0x00	; 0
    5f32:	69 f7       	brne	.-38     	; 0x5f0e <SevenSegment_FromAToH+0x798>
    5f34:	14 c0       	rjmp	.+40     	; 0x5f5e <SevenSegment_FromAToH+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f36:	6b a1       	ldd	r22, Y+35	; 0x23
    5f38:	7c a1       	ldd	r23, Y+36	; 0x24
    5f3a:	8d a1       	ldd	r24, Y+37	; 0x25
    5f3c:	9e a1       	ldd	r25, Y+38	; 0x26
    5f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f42:	dc 01       	movw	r26, r24
    5f44:	cb 01       	movw	r24, r22
    5f46:	9a a3       	std	Y+34, r25	; 0x22
    5f48:	89 a3       	std	Y+33, r24	; 0x21
    5f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    5f4c:	9a a1       	ldd	r25, Y+34	; 0x22
    5f4e:	9e 8f       	std	Y+30, r25	; 0x1e
    5f50:	8d 8f       	std	Y+29, r24	; 0x1d
    5f52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f56:	01 97       	sbiw	r24, 0x01	; 1
    5f58:	f1 f7       	brne	.-4      	; 0x5f56 <SevenSegment_FromAToH+0x7e0>
    5f5a:	9e 8f       	std	Y+30, r25	; 0x1e
    5f5c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 0); // G
    5f5e:	fe 01       	movw	r30, r28
    5f60:	ef 58       	subi	r30, 0x8F	; 143
    5f62:	ff 4f       	sbci	r31, 0xFF	; 255
    5f64:	80 81       	ld	r24, Z
    5f66:	61 e0       	ldi	r22, 0x01	; 1
    5f68:	40 e0       	ldi	r20, 0x00	; 0
    5f6a:	21 e0       	ldi	r18, 0x01	; 1
    5f6c:	01 e0       	ldi	r16, 0x01	; 1
    5f6e:	ee 24       	eor	r14, r14
    5f70:	e3 94       	inc	r14
    5f72:	cc 24       	eor	r12, r12
    5f74:	c3 94       	inc	r12
    5f76:	aa 24       	eor	r10, r10
    5f78:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    5f7c:	80 e0       	ldi	r24, 0x00	; 0
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	a8 e4       	ldi	r26, 0x48	; 72
    5f82:	b2 e4       	ldi	r27, 0x42	; 66
    5f84:	89 8f       	std	Y+25, r24	; 0x19
    5f86:	9a 8f       	std	Y+26, r25	; 0x1a
    5f88:	ab 8f       	std	Y+27, r26	; 0x1b
    5f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    5f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f94:	20 e0       	ldi	r18, 0x00	; 0
    5f96:	30 e0       	ldi	r19, 0x00	; 0
    5f98:	4a e7       	ldi	r20, 0x7A	; 122
    5f9a:	55 e4       	ldi	r21, 0x45	; 69
    5f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa0:	dc 01       	movw	r26, r24
    5fa2:	cb 01       	movw	r24, r22
    5fa4:	8d 8b       	std	Y+21, r24	; 0x15
    5fa6:	9e 8b       	std	Y+22, r25	; 0x16
    5fa8:	af 8b       	std	Y+23, r26	; 0x17
    5faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5fac:	6d 89       	ldd	r22, Y+21	; 0x15
    5fae:	7e 89       	ldd	r23, Y+22	; 0x16
    5fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    5fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    5fb4:	20 e0       	ldi	r18, 0x00	; 0
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	40 e8       	ldi	r20, 0x80	; 128
    5fba:	5f e3       	ldi	r21, 0x3F	; 63
    5fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5fc0:	88 23       	and	r24, r24
    5fc2:	2c f4       	brge	.+10     	; 0x5fce <SevenSegment_FromAToH+0x858>
		__ticks = 1;
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	9c 8b       	std	Y+20, r25	; 0x14
    5fca:	8b 8b       	std	Y+19, r24	; 0x13
    5fcc:	3f c0       	rjmp	.+126    	; 0x604c <SevenSegment_FromAToH+0x8d6>
	else if (__tmp > 65535)
    5fce:	6d 89       	ldd	r22, Y+21	; 0x15
    5fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    5fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    5fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	3f ef       	ldi	r19, 0xFF	; 255
    5fda:	4f e7       	ldi	r20, 0x7F	; 127
    5fdc:	57 e4       	ldi	r21, 0x47	; 71
    5fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5fe2:	18 16       	cp	r1, r24
    5fe4:	4c f5       	brge	.+82     	; 0x6038 <SevenSegment_FromAToH+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    5fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fee:	20 e0       	ldi	r18, 0x00	; 0
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	40 e2       	ldi	r20, 0x20	; 32
    5ff4:	51 e4       	ldi	r21, 0x41	; 65
    5ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffa:	dc 01       	movw	r26, r24
    5ffc:	cb 01       	movw	r24, r22
    5ffe:	bc 01       	movw	r22, r24
    6000:	cd 01       	movw	r24, r26
    6002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6006:	dc 01       	movw	r26, r24
    6008:	cb 01       	movw	r24, r22
    600a:	9c 8b       	std	Y+20, r25	; 0x14
    600c:	8b 8b       	std	Y+19, r24	; 0x13
    600e:	0f c0       	rjmp	.+30     	; 0x602e <SevenSegment_FromAToH+0x8b8>
    6010:	80 e9       	ldi	r24, 0x90	; 144
    6012:	91 e0       	ldi	r25, 0x01	; 1
    6014:	9a 8b       	std	Y+18, r25	; 0x12
    6016:	89 8b       	std	Y+17, r24	; 0x11
    6018:	89 89       	ldd	r24, Y+17	; 0x11
    601a:	9a 89       	ldd	r25, Y+18	; 0x12
    601c:	01 97       	sbiw	r24, 0x01	; 1
    601e:	f1 f7       	brne	.-4      	; 0x601c <SevenSegment_FromAToH+0x8a6>
    6020:	9a 8b       	std	Y+18, r25	; 0x12
    6022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6024:	8b 89       	ldd	r24, Y+19	; 0x13
    6026:	9c 89       	ldd	r25, Y+20	; 0x14
    6028:	01 97       	sbiw	r24, 0x01	; 1
    602a:	9c 8b       	std	Y+20, r25	; 0x14
    602c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    602e:	8b 89       	ldd	r24, Y+19	; 0x13
    6030:	9c 89       	ldd	r25, Y+20	; 0x14
    6032:	00 97       	sbiw	r24, 0x00	; 0
    6034:	69 f7       	brne	.-38     	; 0x6010 <SevenSegment_FromAToH+0x89a>
    6036:	14 c0       	rjmp	.+40     	; 0x6060 <SevenSegment_FromAToH+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6038:	6d 89       	ldd	r22, Y+21	; 0x15
    603a:	7e 89       	ldd	r23, Y+22	; 0x16
    603c:	8f 89       	ldd	r24, Y+23	; 0x17
    603e:	98 8d       	ldd	r25, Y+24	; 0x18
    6040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6044:	dc 01       	movw	r26, r24
    6046:	cb 01       	movw	r24, r22
    6048:	9c 8b       	std	Y+20, r25	; 0x14
    604a:	8b 8b       	std	Y+19, r24	; 0x13
    604c:	8b 89       	ldd	r24, Y+19	; 0x13
    604e:	9c 89       	ldd	r25, Y+20	; 0x14
    6050:	98 8b       	std	Y+16, r25	; 0x10
    6052:	8f 87       	std	Y+15, r24	; 0x0f
    6054:	8f 85       	ldd	r24, Y+15	; 0x0f
    6056:	98 89       	ldd	r25, Y+16	; 0x10
    6058:	01 97       	sbiw	r24, 0x01	; 1
    605a:	f1 f7       	brne	.-4      	; 0x6058 <SevenSegment_FromAToH+0x8e2>
    605c:	98 8b       	std	Y+16, r25	; 0x10
    605e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 1, 1, 1); // H
    6060:	fe 01       	movw	r30, r28
    6062:	ef 58       	subi	r30, 0x8F	; 143
    6064:	ff 4f       	sbci	r31, 0xFF	; 255
    6066:	80 81       	ld	r24, Z
    6068:	60 e0       	ldi	r22, 0x00	; 0
    606a:	41 e0       	ldi	r20, 0x01	; 1
    606c:	21 e0       	ldi	r18, 0x01	; 1
    606e:	00 e0       	ldi	r16, 0x00	; 0
    6070:	ee 24       	eor	r14, r14
    6072:	e3 94       	inc	r14
    6074:	cc 24       	eor	r12, r12
    6076:	c3 94       	inc	r12
    6078:	aa 24       	eor	r10, r10
    607a:	a3 94       	inc	r10
    607c:	0e 94 07 23 	call	0x460e	; 0x460e <SevenSegment_Display>
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	a8 e4       	ldi	r26, 0x48	; 72
    6086:	b2 e4       	ldi	r27, 0x42	; 66
    6088:	8b 87       	std	Y+11, r24	; 0x0b
    608a:	9c 87       	std	Y+12, r25	; 0x0c
    608c:	ad 87       	std	Y+13, r26	; 0x0d
    608e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6090:	6b 85       	ldd	r22, Y+11	; 0x0b
    6092:	7c 85       	ldd	r23, Y+12	; 0x0c
    6094:	8d 85       	ldd	r24, Y+13	; 0x0d
    6096:	9e 85       	ldd	r25, Y+14	; 0x0e
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	4a e7       	ldi	r20, 0x7A	; 122
    609e:	55 e4       	ldi	r21, 0x45	; 69
    60a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a4:	dc 01       	movw	r26, r24
    60a6:	cb 01       	movw	r24, r22
    60a8:	8f 83       	std	Y+7, r24	; 0x07
    60aa:	98 87       	std	Y+8, r25	; 0x08
    60ac:	a9 87       	std	Y+9, r26	; 0x09
    60ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    60b0:	6f 81       	ldd	r22, Y+7	; 0x07
    60b2:	78 85       	ldd	r23, Y+8	; 0x08
    60b4:	89 85       	ldd	r24, Y+9	; 0x09
    60b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	40 e8       	ldi	r20, 0x80	; 128
    60be:	5f e3       	ldi	r21, 0x3F	; 63
    60c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    60c4:	88 23       	and	r24, r24
    60c6:	2c f4       	brge	.+10     	; 0x60d2 <SevenSegment_FromAToH+0x95c>
		__ticks = 1;
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	9e 83       	std	Y+6, r25	; 0x06
    60ce:	8d 83       	std	Y+5, r24	; 0x05
    60d0:	3f c0       	rjmp	.+126    	; 0x6150 <SevenSegment_FromAToH+0x9da>
	else if (__tmp > 65535)
    60d2:	6f 81       	ldd	r22, Y+7	; 0x07
    60d4:	78 85       	ldd	r23, Y+8	; 0x08
    60d6:	89 85       	ldd	r24, Y+9	; 0x09
    60d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    60da:	20 e0       	ldi	r18, 0x00	; 0
    60dc:	3f ef       	ldi	r19, 0xFF	; 255
    60de:	4f e7       	ldi	r20, 0x7F	; 127
    60e0:	57 e4       	ldi	r21, 0x47	; 71
    60e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    60e6:	18 16       	cp	r1, r24
    60e8:	4c f5       	brge	.+82     	; 0x613c <SevenSegment_FromAToH+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    60ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    60ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    60f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	40 e2       	ldi	r20, 0x20	; 32
    60f8:	51 e4       	ldi	r21, 0x41	; 65
    60fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60fe:	dc 01       	movw	r26, r24
    6100:	cb 01       	movw	r24, r22
    6102:	bc 01       	movw	r22, r24
    6104:	cd 01       	movw	r24, r26
    6106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    610a:	dc 01       	movw	r26, r24
    610c:	cb 01       	movw	r24, r22
    610e:	9e 83       	std	Y+6, r25	; 0x06
    6110:	8d 83       	std	Y+5, r24	; 0x05
    6112:	0f c0       	rjmp	.+30     	; 0x6132 <SevenSegment_FromAToH+0x9bc>
    6114:	80 e9       	ldi	r24, 0x90	; 144
    6116:	91 e0       	ldi	r25, 0x01	; 1
    6118:	9c 83       	std	Y+4, r25	; 0x04
    611a:	8b 83       	std	Y+3, r24	; 0x03
    611c:	8b 81       	ldd	r24, Y+3	; 0x03
    611e:	9c 81       	ldd	r25, Y+4	; 0x04
    6120:	01 97       	sbiw	r24, 0x01	; 1
    6122:	f1 f7       	brne	.-4      	; 0x6120 <SevenSegment_FromAToH+0x9aa>
    6124:	9c 83       	std	Y+4, r25	; 0x04
    6126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6128:	8d 81       	ldd	r24, Y+5	; 0x05
    612a:	9e 81       	ldd	r25, Y+6	; 0x06
    612c:	01 97       	sbiw	r24, 0x01	; 1
    612e:	9e 83       	std	Y+6, r25	; 0x06
    6130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6132:	8d 81       	ldd	r24, Y+5	; 0x05
    6134:	9e 81       	ldd	r25, Y+6	; 0x06
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	69 f7       	brne	.-38     	; 0x6114 <SevenSegment_FromAToH+0x99e>
    613a:	31 cb       	rjmp	.-2462   	; 0x579e <SevenSegment_FromAToH+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    613c:	6f 81       	ldd	r22, Y+7	; 0x07
    613e:	78 85       	ldd	r23, Y+8	; 0x08
    6140:	89 85       	ldd	r24, Y+9	; 0x09
    6142:	9a 85       	ldd	r25, Y+10	; 0x0a
    6144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6148:	dc 01       	movw	r26, r24
    614a:	cb 01       	movw	r24, r22
    614c:	9e 83       	std	Y+6, r25	; 0x06
    614e:	8d 83       	std	Y+5, r24	; 0x05
    6150:	8d 81       	ldd	r24, Y+5	; 0x05
    6152:	9e 81       	ldd	r25, Y+6	; 0x06
    6154:	9a 83       	std	Y+2, r25	; 0x02
    6156:	89 83       	std	Y+1, r24	; 0x01
    6158:	89 81       	ldd	r24, Y+1	; 0x01
    615a:	9a 81       	ldd	r25, Y+2	; 0x02
    615c:	01 97       	sbiw	r24, 0x01	; 1
    615e:	f1 f7       	brne	.-4      	; 0x615c <SevenSegment_FromAToH+0x9e6>
    6160:	9a 83       	std	Y+2, r25	; 0x02
    6162:	89 83       	std	Y+1, r24	; 0x01
    6164:	1c cb       	rjmp	.-2504   	; 0x579e <SevenSegment_FromAToH+0x28>

00006166 <main>:
#include "APP_Includes.h"


int main(void){
    6166:	df 93       	push	r29
    6168:	cf 93       	push	r28
    616a:	cd b7       	in	r28, 0x3d	; 61
    616c:	de b7       	in	r29, 0x3e	; 62
    616e:	61 97       	sbiw	r28, 0x11	; 17
    6170:	0f b6       	in	r0, 0x3f	; 63
    6172:	f8 94       	cli
    6174:	de bf       	out	0x3e, r29	; 62
    6176:	0f be       	out	0x3f, r0	; 63
    6178:	cd bf       	out	0x3d, r28	; 61
	u8 hours = 0, minutes = 0, seconds = 0;
    617a:	19 8a       	std	Y+17, r1	; 0x11
    617c:	18 8a       	std	Y+16, r1	; 0x10
    617e:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_voidInit();
    6180:	0e 94 a7 10 	call	0x214e	; 0x214e <DIO_voidInit>
	LCD_init();
    6184:	0e 94 ed 1c 	call	0x39da	; 0x39da <LCD_init>
	
	LCD_GoToXY(0, 5);
    6188:	80 e0       	ldi	r24, 0x00	; 0
    618a:	65 e0       	ldi	r22, 0x05	; 5
    618c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
	LCD_displayCharacter('h');
    6190:	88 e6       	ldi	r24, 0x68	; 104
    6192:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
	LCD_displayString(":");
    6196:	80 e6       	ldi	r24, 0x60	; 96
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
	
	LCD_GoToXY(0, 7);
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	67 e0       	ldi	r22, 0x07	; 7
    61a2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
	LCD_displayCharacter('m');
    61a6:	8d e6       	ldi	r24, 0x6D	; 109
    61a8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
	LCD_displayString(":");
    61ac:	80 e6       	ldi	r24, 0x60	; 96
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
	
	LCD_GoToXY(0, 9);
    61b4:	80 e0       	ldi	r24, 0x00	; 0
    61b6:	69 e0       	ldi	r22, 0x09	; 9
    61b8:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
	LCD_displayCharacter('s');
    61bc:	83 e7       	ldi	r24, 0x73	; 115
    61be:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
	
	
	while(1){
		LCD_GoToXY(1, 5);
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	65 e0       	ldi	r22, 0x05	; 5
    61c6:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
		LCD_DisplayInteger(hours);
    61ca:	89 89       	ldd	r24, Y+17	; 0x11
    61cc:	88 2f       	mov	r24, r24
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	a0 e0       	ldi	r26, 0x00	; 0
    61d2:	b0 e0       	ldi	r27, 0x00	; 0
    61d4:	bc 01       	movw	r22, r24
    61d6:	cd 01       	movw	r24, r26
    61d8:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
		LCD_displayString(":");
    61dc:	80 e6       	ldi	r24, 0x60	; 96
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
		
		LCD_GoToXY(1, 7);
    61e4:	81 e0       	ldi	r24, 0x01	; 1
    61e6:	67 e0       	ldi	r22, 0x07	; 7
    61e8:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
		LCD_DisplayInteger(minutes);
    61ec:	88 89       	ldd	r24, Y+16	; 0x10
    61ee:	88 2f       	mov	r24, r24
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	a0 e0       	ldi	r26, 0x00	; 0
    61f4:	b0 e0       	ldi	r27, 0x00	; 0
    61f6:	bc 01       	movw	r22, r24
    61f8:	cd 01       	movw	r24, r26
    61fa:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
		LCD_displayString(":");
    61fe:	80 e6       	ldi	r24, 0x60	; 96
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
		LCD_GoToXY(1, 9);
    6206:	81 e0       	ldi	r24, 0x01	; 1
    6208:	69 e0       	ldi	r22, 0x09	; 9
    620a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
		LCD_DisplayInteger(seconds++);
    620e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6210:	88 2f       	mov	r24, r24
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	a0 e0       	ldi	r26, 0x00	; 0
    6216:	b0 e0       	ldi	r27, 0x00	; 0
    6218:	2f 85       	ldd	r18, Y+15	; 0x0f
    621a:	2f 5f       	subi	r18, 0xFF	; 255
    621c:	2f 87       	std	Y+15, r18	; 0x0f
    621e:	bc 01       	movw	r22, r24
    6220:	cd 01       	movw	r24, r26
    6222:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
    6226:	80 e0       	ldi	r24, 0x00	; 0
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	a0 e7       	ldi	r26, 0x70	; 112
    622c:	b1 e4       	ldi	r27, 0x41	; 65
    622e:	8b 87       	std	Y+11, r24	; 0x0b
    6230:	9c 87       	std	Y+12, r25	; 0x0c
    6232:	ad 87       	std	Y+13, r26	; 0x0d
    6234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6236:	6b 85       	ldd	r22, Y+11	; 0x0b
    6238:	7c 85       	ldd	r23, Y+12	; 0x0c
    623a:	8d 85       	ldd	r24, Y+13	; 0x0d
    623c:	9e 85       	ldd	r25, Y+14	; 0x0e
    623e:	20 e0       	ldi	r18, 0x00	; 0
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	4a e7       	ldi	r20, 0x7A	; 122
    6244:	55 e4       	ldi	r21, 0x45	; 69
    6246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    624a:	dc 01       	movw	r26, r24
    624c:	cb 01       	movw	r24, r22
    624e:	8f 83       	std	Y+7, r24	; 0x07
    6250:	98 87       	std	Y+8, r25	; 0x08
    6252:	a9 87       	std	Y+9, r26	; 0x09
    6254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6256:	6f 81       	ldd	r22, Y+7	; 0x07
    6258:	78 85       	ldd	r23, Y+8	; 0x08
    625a:	89 85       	ldd	r24, Y+9	; 0x09
    625c:	9a 85       	ldd	r25, Y+10	; 0x0a
    625e:	20 e0       	ldi	r18, 0x00	; 0
    6260:	30 e0       	ldi	r19, 0x00	; 0
    6262:	40 e8       	ldi	r20, 0x80	; 128
    6264:	5f e3       	ldi	r21, 0x3F	; 63
    6266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    626a:	88 23       	and	r24, r24
    626c:	2c f4       	brge	.+10     	; 0x6278 <main+0x112>
		__ticks = 1;
    626e:	81 e0       	ldi	r24, 0x01	; 1
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	9e 83       	std	Y+6, r25	; 0x06
    6274:	8d 83       	std	Y+5, r24	; 0x05
    6276:	3f c0       	rjmp	.+126    	; 0x62f6 <main+0x190>
	else if (__tmp > 65535)
    6278:	6f 81       	ldd	r22, Y+7	; 0x07
    627a:	78 85       	ldd	r23, Y+8	; 0x08
    627c:	89 85       	ldd	r24, Y+9	; 0x09
    627e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6280:	20 e0       	ldi	r18, 0x00	; 0
    6282:	3f ef       	ldi	r19, 0xFF	; 255
    6284:	4f e7       	ldi	r20, 0x7F	; 127
    6286:	57 e4       	ldi	r21, 0x47	; 71
    6288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    628c:	18 16       	cp	r1, r24
    628e:	4c f5       	brge	.+82     	; 0x62e2 <main+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6290:	6b 85       	ldd	r22, Y+11	; 0x0b
    6292:	7c 85       	ldd	r23, Y+12	; 0x0c
    6294:	8d 85       	ldd	r24, Y+13	; 0x0d
    6296:	9e 85       	ldd	r25, Y+14	; 0x0e
    6298:	20 e0       	ldi	r18, 0x00	; 0
    629a:	30 e0       	ldi	r19, 0x00	; 0
    629c:	40 e2       	ldi	r20, 0x20	; 32
    629e:	51 e4       	ldi	r21, 0x41	; 65
    62a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62a4:	dc 01       	movw	r26, r24
    62a6:	cb 01       	movw	r24, r22
    62a8:	bc 01       	movw	r22, r24
    62aa:	cd 01       	movw	r24, r26
    62ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b0:	dc 01       	movw	r26, r24
    62b2:	cb 01       	movw	r24, r22
    62b4:	9e 83       	std	Y+6, r25	; 0x06
    62b6:	8d 83       	std	Y+5, r24	; 0x05
    62b8:	0f c0       	rjmp	.+30     	; 0x62d8 <main+0x172>
    62ba:	80 e9       	ldi	r24, 0x90	; 144
    62bc:	91 e0       	ldi	r25, 0x01	; 1
    62be:	9c 83       	std	Y+4, r25	; 0x04
    62c0:	8b 83       	std	Y+3, r24	; 0x03
    62c2:	8b 81       	ldd	r24, Y+3	; 0x03
    62c4:	9c 81       	ldd	r25, Y+4	; 0x04
    62c6:	01 97       	sbiw	r24, 0x01	; 1
    62c8:	f1 f7       	brne	.-4      	; 0x62c6 <main+0x160>
    62ca:	9c 83       	std	Y+4, r25	; 0x04
    62cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ce:	8d 81       	ldd	r24, Y+5	; 0x05
    62d0:	9e 81       	ldd	r25, Y+6	; 0x06
    62d2:	01 97       	sbiw	r24, 0x01	; 1
    62d4:	9e 83       	std	Y+6, r25	; 0x06
    62d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62d8:	8d 81       	ldd	r24, Y+5	; 0x05
    62da:	9e 81       	ldd	r25, Y+6	; 0x06
    62dc:	00 97       	sbiw	r24, 0x00	; 0
    62de:	69 f7       	brne	.-38     	; 0x62ba <main+0x154>
    62e0:	14 c0       	rjmp	.+40     	; 0x630a <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62e2:	6f 81       	ldd	r22, Y+7	; 0x07
    62e4:	78 85       	ldd	r23, Y+8	; 0x08
    62e6:	89 85       	ldd	r24, Y+9	; 0x09
    62e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62ee:	dc 01       	movw	r26, r24
    62f0:	cb 01       	movw	r24, r22
    62f2:	9e 83       	std	Y+6, r25	; 0x06
    62f4:	8d 83       	std	Y+5, r24	; 0x05
    62f6:	8d 81       	ldd	r24, Y+5	; 0x05
    62f8:	9e 81       	ldd	r25, Y+6	; 0x06
    62fa:	9a 83       	std	Y+2, r25	; 0x02
    62fc:	89 83       	std	Y+1, r24	; 0x01
    62fe:	89 81       	ldd	r24, Y+1	; 0x01
    6300:	9a 81       	ldd	r25, Y+2	; 0x02
    6302:	01 97       	sbiw	r24, 0x01	; 1
    6304:	f1 f7       	brne	.-4      	; 0x6302 <main+0x19c>
    6306:	9a 83       	std	Y+2, r25	; 0x02
    6308:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		
		if(seconds == 60){
    630a:	8f 85       	ldd	r24, Y+15	; 0x0f
    630c:	8c 33       	cpi	r24, 0x3C	; 60
    630e:	09 f0       	breq	.+2      	; 0x6312 <main+0x1ac>
    6310:	52 c0       	rjmp	.+164    	; 0x63b6 <main+0x250>
			LCD_ClearScreen();
    6312:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_ClearScreen>
			LCD_GoToXY(0, 5);
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	65 e0       	ldi	r22, 0x05	; 5
    631a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_displayCharacter('h');
    631e:	88 e6       	ldi	r24, 0x68	; 104
    6320:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
			LCD_displayString(":");
    6324:	80 e6       	ldi	r24, 0x60	; 96
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			LCD_GoToXY(0, 7);
    632c:	80 e0       	ldi	r24, 0x00	; 0
    632e:	67 e0       	ldi	r22, 0x07	; 7
    6330:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_displayCharacter('m');
    6334:	8d e6       	ldi	r24, 0x6D	; 109
    6336:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
			LCD_displayString(":");
    633a:	80 e6       	ldi	r24, 0x60	; 96
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			LCD_GoToXY(0, 9);
    6342:	80 e0       	ldi	r24, 0x00	; 0
    6344:	69 e0       	ldi	r22, 0x09	; 9
    6346:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_displayCharacter('s');
    634a:	83 e7       	ldi	r24, 0x73	; 115
    634c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
			
			
			LCD_GoToXY(1, 5);
    6350:	81 e0       	ldi	r24, 0x01	; 1
    6352:	65 e0       	ldi	r22, 0x05	; 5
    6354:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_DisplayInteger(hours);
    6358:	89 89       	ldd	r24, Y+17	; 0x11
    635a:	88 2f       	mov	r24, r24
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	a0 e0       	ldi	r26, 0x00	; 0
    6360:	b0 e0       	ldi	r27, 0x00	; 0
    6362:	bc 01       	movw	r22, r24
    6364:	cd 01       	movw	r24, r26
    6366:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
			LCD_displayString(":");
    636a:	80 e6       	ldi	r24, 0x60	; 96
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			
			LCD_GoToXY(1, 7);
    6372:	81 e0       	ldi	r24, 0x01	; 1
    6374:	67 e0       	ldi	r22, 0x07	; 7
    6376:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			minutes++;
    637a:	88 89       	ldd	r24, Y+16	; 0x10
    637c:	8f 5f       	subi	r24, 0xFF	; 255
    637e:	88 8b       	std	Y+16, r24	; 0x10
			LCD_DisplayInteger(minutes);
    6380:	88 89       	ldd	r24, Y+16	; 0x10
    6382:	88 2f       	mov	r24, r24
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	a0 e0       	ldi	r26, 0x00	; 0
    6388:	b0 e0       	ldi	r27, 0x00	; 0
    638a:	bc 01       	movw	r22, r24
    638c:	cd 01       	movw	r24, r26
    638e:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
			LCD_displayString(":");
    6392:	80 e6       	ldi	r24, 0x60	; 96
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			
			LCD_GoToXY(1, 9);
    639a:	81 e0       	ldi	r24, 0x01	; 1
    639c:	69 e0       	ldi	r22, 0x09	; 9
    639e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			seconds = 0;
    63a2:	1f 86       	std	Y+15, r1	; 0x0f
			LCD_DisplayInteger(seconds);
    63a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    63a6:	88 2f       	mov	r24, r24
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	a0 e0       	ldi	r26, 0x00	; 0
    63ac:	b0 e0       	ldi	r27, 0x00	; 0
    63ae:	bc 01       	movw	r22, r24
    63b0:	cd 01       	movw	r24, r26
    63b2:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
			
		}
		
		if(minutes == 2){
    63b6:	88 89       	ldd	r24, Y+16	; 0x10
    63b8:	82 30       	cpi	r24, 0x02	; 2
    63ba:	09 f0       	breq	.+2      	; 0x63be <main+0x258>
    63bc:	02 cf       	rjmp	.-508    	; 0x61c2 <main+0x5c>
			DIO_u8SetPinValue(3, 1, 1);
    63be:	83 e0       	ldi	r24, 0x03	; 3
    63c0:	61 e0       	ldi	r22, 0x01	; 1
    63c2:	41 e0       	ldi	r20, 0x01	; 1
    63c4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPinValue>
			LCD_ClearScreen();
    63c8:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <LCD_ClearScreen>
			
			LCD_GoToXY(0, 4);
    63cc:	80 e0       	ldi	r24, 0x00	; 0
    63ce:	64 e0       	ldi	r22, 0x04	; 4
    63d0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_displayString("Time Out!");
    63d4:	82 e6       	ldi	r24, 0x62	; 98
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			LCD_GoToXY(1, 5);
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	65 e0       	ldi	r22, 0x05	; 5
    63e0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_DisplayInteger(hours);
    63e4:	89 89       	ldd	r24, Y+17	; 0x11
    63e6:	88 2f       	mov	r24, r24
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	a0 e0       	ldi	r26, 0x00	; 0
    63ec:	b0 e0       	ldi	r27, 0x00	; 0
    63ee:	bc 01       	movw	r22, r24
    63f0:	cd 01       	movw	r24, r26
    63f2:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
			LCD_displayString(":");
    63f6:	80 e6       	ldi	r24, 0x60	; 96
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			
			LCD_GoToXY(1, 7);
    63fe:	81 e0       	ldi	r24, 0x01	; 1
    6400:	67 e0       	ldi	r22, 0x07	; 7
    6402:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_DisplayInteger(minutes);
    6406:	88 89       	ldd	r24, Y+16	; 0x10
    6408:	88 2f       	mov	r24, r24
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	a0 e0       	ldi	r26, 0x00	; 0
    640e:	b0 e0       	ldi	r27, 0x00	; 0
    6410:	bc 01       	movw	r22, r24
    6412:	cd 01       	movw	r24, r26
    6414:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
			LCD_displayString(":");
    6418:	80 e6       	ldi	r24, 0x60	; 96
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_displayString>
			
			
			LCD_GoToXY(1, 9);
    6420:	81 e0       	ldi	r24, 0x01	; 1
    6422:	69 e0       	ldi	r22, 0x09	; 9
    6424:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <LCD_GoToXY>
			LCD_DisplayInteger(seconds);
    6428:	8f 85       	ldd	r24, Y+15	; 0x0f
    642a:	88 2f       	mov	r24, r24
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	a0 e0       	ldi	r26, 0x00	; 0
    6430:	b0 e0       	ldi	r27, 0x00	; 0
    6432:	bc 01       	movw	r22, r24
    6434:	cd 01       	movw	r24, r26
    6436:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_DisplayInteger>
			break;
		}
	}
	return 0;
    643a:	80 e0       	ldi	r24, 0x00	; 0
    643c:	90 e0       	ldi	r25, 0x00	; 0
}
    643e:	61 96       	adiw	r28, 0x11	; 17
    6440:	0f b6       	in	r0, 0x3f	; 63
    6442:	f8 94       	cli
    6444:	de bf       	out	0x3e, r29	; 62
    6446:	0f be       	out	0x3f, r0	; 63
    6448:	cd bf       	out	0x3d, r28	; 61
    644a:	cf 91       	pop	r28
    644c:	df 91       	pop	r29
    644e:	08 95       	ret

00006450 <__divmodhi4>:
    6450:	97 fb       	bst	r25, 7
    6452:	09 2e       	mov	r0, r25
    6454:	07 26       	eor	r0, r23
    6456:	0a d0       	rcall	.+20     	; 0x646c <__divmodhi4_neg1>
    6458:	77 fd       	sbrc	r23, 7
    645a:	04 d0       	rcall	.+8      	; 0x6464 <__divmodhi4_neg2>
    645c:	2e d0       	rcall	.+92     	; 0x64ba <__udivmodhi4>
    645e:	06 d0       	rcall	.+12     	; 0x646c <__divmodhi4_neg1>
    6460:	00 20       	and	r0, r0
    6462:	1a f4       	brpl	.+6      	; 0x646a <__divmodhi4_exit>

00006464 <__divmodhi4_neg2>:
    6464:	70 95       	com	r23
    6466:	61 95       	neg	r22
    6468:	7f 4f       	sbci	r23, 0xFF	; 255

0000646a <__divmodhi4_exit>:
    646a:	08 95       	ret

0000646c <__divmodhi4_neg1>:
    646c:	f6 f7       	brtc	.-4      	; 0x646a <__divmodhi4_exit>
    646e:	90 95       	com	r25
    6470:	81 95       	neg	r24
    6472:	9f 4f       	sbci	r25, 0xFF	; 255
    6474:	08 95       	ret

00006476 <__udivmodsi4>:
    6476:	a1 e2       	ldi	r26, 0x21	; 33
    6478:	1a 2e       	mov	r1, r26
    647a:	aa 1b       	sub	r26, r26
    647c:	bb 1b       	sub	r27, r27
    647e:	fd 01       	movw	r30, r26
    6480:	0d c0       	rjmp	.+26     	; 0x649c <__udivmodsi4_ep>

00006482 <__udivmodsi4_loop>:
    6482:	aa 1f       	adc	r26, r26
    6484:	bb 1f       	adc	r27, r27
    6486:	ee 1f       	adc	r30, r30
    6488:	ff 1f       	adc	r31, r31
    648a:	a2 17       	cp	r26, r18
    648c:	b3 07       	cpc	r27, r19
    648e:	e4 07       	cpc	r30, r20
    6490:	f5 07       	cpc	r31, r21
    6492:	20 f0       	brcs	.+8      	; 0x649c <__udivmodsi4_ep>
    6494:	a2 1b       	sub	r26, r18
    6496:	b3 0b       	sbc	r27, r19
    6498:	e4 0b       	sbc	r30, r20
    649a:	f5 0b       	sbc	r31, r21

0000649c <__udivmodsi4_ep>:
    649c:	66 1f       	adc	r22, r22
    649e:	77 1f       	adc	r23, r23
    64a0:	88 1f       	adc	r24, r24
    64a2:	99 1f       	adc	r25, r25
    64a4:	1a 94       	dec	r1
    64a6:	69 f7       	brne	.-38     	; 0x6482 <__udivmodsi4_loop>
    64a8:	60 95       	com	r22
    64aa:	70 95       	com	r23
    64ac:	80 95       	com	r24
    64ae:	90 95       	com	r25
    64b0:	9b 01       	movw	r18, r22
    64b2:	ac 01       	movw	r20, r24
    64b4:	bd 01       	movw	r22, r26
    64b6:	cf 01       	movw	r24, r30
    64b8:	08 95       	ret

000064ba <__udivmodhi4>:
    64ba:	aa 1b       	sub	r26, r26
    64bc:	bb 1b       	sub	r27, r27
    64be:	51 e1       	ldi	r21, 0x11	; 17
    64c0:	07 c0       	rjmp	.+14     	; 0x64d0 <__udivmodhi4_ep>

000064c2 <__udivmodhi4_loop>:
    64c2:	aa 1f       	adc	r26, r26
    64c4:	bb 1f       	adc	r27, r27
    64c6:	a6 17       	cp	r26, r22
    64c8:	b7 07       	cpc	r27, r23
    64ca:	10 f0       	brcs	.+4      	; 0x64d0 <__udivmodhi4_ep>
    64cc:	a6 1b       	sub	r26, r22
    64ce:	b7 0b       	sbc	r27, r23

000064d0 <__udivmodhi4_ep>:
    64d0:	88 1f       	adc	r24, r24
    64d2:	99 1f       	adc	r25, r25
    64d4:	5a 95       	dec	r21
    64d6:	a9 f7       	brne	.-22     	; 0x64c2 <__udivmodhi4_loop>
    64d8:	80 95       	com	r24
    64da:	90 95       	com	r25
    64dc:	bc 01       	movw	r22, r24
    64de:	cd 01       	movw	r24, r26
    64e0:	08 95       	ret

000064e2 <__prologue_saves__>:
    64e2:	2f 92       	push	r2
    64e4:	3f 92       	push	r3
    64e6:	4f 92       	push	r4
    64e8:	5f 92       	push	r5
    64ea:	6f 92       	push	r6
    64ec:	7f 92       	push	r7
    64ee:	8f 92       	push	r8
    64f0:	9f 92       	push	r9
    64f2:	af 92       	push	r10
    64f4:	bf 92       	push	r11
    64f6:	cf 92       	push	r12
    64f8:	df 92       	push	r13
    64fa:	ef 92       	push	r14
    64fc:	ff 92       	push	r15
    64fe:	0f 93       	push	r16
    6500:	1f 93       	push	r17
    6502:	cf 93       	push	r28
    6504:	df 93       	push	r29
    6506:	cd b7       	in	r28, 0x3d	; 61
    6508:	de b7       	in	r29, 0x3e	; 62
    650a:	ca 1b       	sub	r28, r26
    650c:	db 0b       	sbc	r29, r27
    650e:	0f b6       	in	r0, 0x3f	; 63
    6510:	f8 94       	cli
    6512:	de bf       	out	0x3e, r29	; 62
    6514:	0f be       	out	0x3f, r0	; 63
    6516:	cd bf       	out	0x3d, r28	; 61
    6518:	09 94       	ijmp

0000651a <__epilogue_restores__>:
    651a:	2a 88       	ldd	r2, Y+18	; 0x12
    651c:	39 88       	ldd	r3, Y+17	; 0x11
    651e:	48 88       	ldd	r4, Y+16	; 0x10
    6520:	5f 84       	ldd	r5, Y+15	; 0x0f
    6522:	6e 84       	ldd	r6, Y+14	; 0x0e
    6524:	7d 84       	ldd	r7, Y+13	; 0x0d
    6526:	8c 84       	ldd	r8, Y+12	; 0x0c
    6528:	9b 84       	ldd	r9, Y+11	; 0x0b
    652a:	aa 84       	ldd	r10, Y+10	; 0x0a
    652c:	b9 84       	ldd	r11, Y+9	; 0x09
    652e:	c8 84       	ldd	r12, Y+8	; 0x08
    6530:	df 80       	ldd	r13, Y+7	; 0x07
    6532:	ee 80       	ldd	r14, Y+6	; 0x06
    6534:	fd 80       	ldd	r15, Y+5	; 0x05
    6536:	0c 81       	ldd	r16, Y+4	; 0x04
    6538:	1b 81       	ldd	r17, Y+3	; 0x03
    653a:	aa 81       	ldd	r26, Y+2	; 0x02
    653c:	b9 81       	ldd	r27, Y+1	; 0x01
    653e:	ce 0f       	add	r28, r30
    6540:	d1 1d       	adc	r29, r1
    6542:	0f b6       	in	r0, 0x3f	; 63
    6544:	f8 94       	cli
    6546:	de bf       	out	0x3e, r29	; 62
    6548:	0f be       	out	0x3f, r0	; 63
    654a:	cd bf       	out	0x3d, r28	; 61
    654c:	ed 01       	movw	r28, r26
    654e:	08 95       	ret

00006550 <_exit>:
    6550:	f8 94       	cli

00006552 <__stop_program>:
    6552:	ff cf       	rjmp	.-2      	; 0x6552 <__stop_program>
